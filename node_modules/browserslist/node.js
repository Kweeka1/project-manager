var feature = require('caniuse-lite/dist/unpacker/feature').default
var region = require('caniuse-lite/dist/unpacker/region').default
var path = require('path')
var fs = require('fs')

var BrowserslistError = require('./error')

var IS_SECTION = /^\s*\[(.+)]\s*$/
var CONFIG_PATTERN = /^browserslist-config-/
var SCOPED_CONFIG__PATTERN = /@[^/]+\/browserslist-config(-|$|\/)/
var TIME_TO_UPDATE_CANIUSE = 6 * 30 * 24 * 60 * 60 * 1000
var FORMAT =
  'Browserslist config should be a string or an array ' +
  'of strings with browser queries'

var dataTimeChecked = false
var filenessCache = ***REMOVED******REMOVED***
var configCache = ***REMOVED******REMOVED***
function checkExtend(name) ***REMOVED***
  var use = ' Use `dangerousExtend` option to disable.'
  if (!CONFIG_PATTERN.test(name) && !SCOPED_CONFIG__PATTERN.test(name)) ***REMOVED***
    throw new BrowserslistError(
      'Browserslist config needs `browserslist-config-` prefix. ' + use
    )
***REMOVED***
  if (name.replace(/^@[^/]+\//, '').indexOf('.') !== -1) ***REMOVED***
    throw new BrowserslistError(
      '`.` not allowed in Browserslist config name. ' + use
    )
***REMOVED***
  if (name.indexOf('node_modules') !== -1) ***REMOVED***
    throw new BrowserslistError(
      '`node_modules` not allowed in Browserslist config.' + use
    )
***REMOVED***
***REMOVED***

function isFile(file) ***REMOVED***
  if (file in filenessCache) ***REMOVED***
    return filenessCache[file]
***REMOVED***
  var result = fs.existsSync(file) && fs.statSync(file).isFile()
  if (!process.env.BROWSERSLIST_DISABLE_CACHE) ***REMOVED***
    filenessCache[file] = result
***REMOVED***
  return result
***REMOVED***

function eachParent(file, callback) ***REMOVED***
  var dir = isFile(file) ? path.dirname(file) : file
  var loc = path.resolve(dir)
  do ***REMOVED***
    var result = callback(loc)
    if (typeof result !== 'undefined') return result
***REMOVED*** while (loc !== (loc = path.dirname(loc)))
  return undefined
***REMOVED***

function check(section) ***REMOVED***
  if (Array.isArray(section)) ***REMOVED***
    for (var i = 0; i < section.length; i++) ***REMOVED***
      if (typeof section[i] !== 'string') ***REMOVED***
        throw new BrowserslistError(FORMAT)
  ***REMOVED***
***REMOVED***
***REMOVED*** else if (typeof section !== 'string') ***REMOVED***
    throw new BrowserslistError(FORMAT)
***REMOVED***
***REMOVED***

function pickEnv(config, opts) ***REMOVED***
  if (typeof config !== 'object') return config

  var name
  if (typeof opts.env === 'string') ***REMOVED***
    name = opts.env
***REMOVED*** else if (process.env.BROWSERSLIST_ENV) ***REMOVED***
    name = process.env.BROWSERSLIST_ENV
***REMOVED*** else if (process.env.NODE_ENV) ***REMOVED***
    name = process.env.NODE_ENV
***REMOVED*** else ***REMOVED***
    name = 'production'
***REMOVED***

  if (opts.throwOnMissing) ***REMOVED***
    if (name && name !== 'defaults' && !config[name]) ***REMOVED***
      throw new BrowserslistError(
        'Missing config for Browserslist environment `' + name + '`'
      )
***REMOVED***
***REMOVED***

  return config[name] || config.defaults
***REMOVED***

function parsePackage(file) ***REMOVED***
  var config = JSON.parse(fs.readFileSync(file))
  if (config.browserlist && !config.browserslist) ***REMOVED***
    throw new BrowserslistError(
      '`browserlist` key instead of `browserslist` in ' + file
    )
***REMOVED***
  var list = config.browserslist
  if (Array.isArray(list) || typeof list === 'string') ***REMOVED***
    list = ***REMOVED*** defaults: list ***REMOVED***
***REMOVED***
  for (var i in list) ***REMOVED***
    check(list[i])
***REMOVED***

  return list
***REMOVED***

function latestReleaseTime(agents) ***REMOVED***
  var latest = 0
  for (var name in agents) ***REMOVED***
    var dates = agents[name].releaseDate || ***REMOVED******REMOVED***
    for (var key in dates) ***REMOVED***
      if (latest < dates[key]) ***REMOVED***
        latest = dates[key]
  ***REMOVED***
***REMOVED***
***REMOVED***
  return latest * 1000
***REMOVED***

function normalizeStats(data, stats) ***REMOVED***
  if (!data) ***REMOVED***
    data = ***REMOVED******REMOVED***
***REMOVED***
  if (stats && 'dataByBrowser' in stats) ***REMOVED***
    stats = stats.dataByBrowser
***REMOVED***

  if (typeof stats !== 'object') return undefined

  var normalized = ***REMOVED******REMOVED***
  for (var i in stats) ***REMOVED***
    var versions = Object.keys(stats[i])
    if (versions.length === 1 && data[i] && data[i].versions.length === 1) ***REMOVED***
      var normal = data[i].versions[0]
      normalized[i] = ***REMOVED******REMOVED***
      normalized[i][normal] = stats[i][versions[0]]
***REMOVED*** else ***REMOVED***
      normalized[i] = stats[i]
***REMOVED***
***REMOVED***

  return normalized
***REMOVED***

function normalizeUsageData(usageData, data) ***REMOVED***
  for (var browser in usageData) ***REMOVED***
    var browserUsage = usageData[browser]
    // eslint-disable-next-line max-len
    // https://github.com/browserslist/browserslist/issues/431#issuecomment-565230615
    // caniuse-db returns ***REMOVED*** 0: "percentage" ***REMOVED*** for `and_*` regional stats
    if ('0' in browserUsage) ***REMOVED***
      var versions = data[browser].versions
      browserUsage[versions[versions.length - 1]] = browserUsage[0]
      delete browserUsage[0]
***REMOVED***
***REMOVED***
***REMOVED***

module.exports = ***REMOVED***
  loadQueries: function loadQueries(ctx, name) ***REMOVED***
    if (!ctx.dangerousExtend && !process.env.BROWSERSLIST_DANGEROUS_EXTEND) ***REMOVED***
      checkExtend(name)
***REMOVED***
    var queries = require(require.resolve(name, ***REMOVED*** paths: ['.', ctx.path] ***REMOVED***))
    if (queries) ***REMOVED***
      if (Array.isArray(queries)) ***REMOVED***
        return queries
  ***REMOVED*** else if (typeof queries === 'object') ***REMOVED***
        if (!queries.defaults) queries.defaults = []
        return pickEnv(queries, ctx, name)
  ***REMOVED***
***REMOVED***
    throw new BrowserslistError(
      '`' +
        name +
        '` config exports not an array of queries' +
        ' or an object of envs'
    )
***REMOVED***

  loadStat: function loadStat(ctx, name, data) ***REMOVED***
    if (!ctx.dangerousExtend && !process.env.BROWSERSLIST_DANGEROUS_EXTEND) ***REMOVED***
      checkExtend(name)
***REMOVED***
    var stats = require(require.resolve(
      path.join(name, 'browserslist-stats.json'),
      ***REMOVED*** paths: ['.'] ***REMOVED***
    ))
    return normalizeStats(data, stats)
***REMOVED***

  getStat: function getStat(opts, data) ***REMOVED***
    var stats
    if (opts.stats) ***REMOVED***
      stats = opts.stats
***REMOVED*** else if (process.env.BROWSERSLIST_STATS) ***REMOVED***
      stats = process.env.BROWSERSLIST_STATS
***REMOVED*** else if (opts.path && path.resolve && fs.existsSync) ***REMOVED***
      stats = eachParent(opts.path, function (dir) ***REMOVED***
        var file = path.join(dir, 'browserslist-stats.json')
        return isFile(file) ? file : undefined
  ***REMOVED***)
***REMOVED***
    if (typeof stats === 'string') ***REMOVED***
      try ***REMOVED***
        stats = JSON.parse(fs.readFileSync(stats))
  ***REMOVED*** catch (e) ***REMOVED***
        throw new BrowserslistError("Can't read " + stats)
  ***REMOVED***
***REMOVED***
    return normalizeStats(data, stats)
***REMOVED***

  loadConfig: function loadConfig(opts) ***REMOVED***
    if (process.env.BROWSERSLIST) ***REMOVED***
      return process.env.BROWSERSLIST
***REMOVED*** else if (opts.config || process.env.BROWSERSLIST_CONFIG) ***REMOVED***
      var file = opts.config || process.env.BROWSERSLIST_CONFIG
      if (path.basename(file) === 'package.json') ***REMOVED***
        return pickEnv(parsePackage(file), opts)
  ***REMOVED*** else ***REMOVED***
        return pickEnv(module.exports.readConfig(file), opts)
  ***REMOVED***
***REMOVED*** else if (opts.path) ***REMOVED***
      return pickEnv(module.exports.findConfig(opts.path), opts)
***REMOVED*** else ***REMOVED***
      return undefined
***REMOVED***
***REMOVED***

  loadCountry: function loadCountry(usage, country, data) ***REMOVED***
    var code = country.replace(/[^\w-]/g, '')
    if (!usage[code]) ***REMOVED***
      var compressed = require('caniuse-lite/data/regions/' + code + '.js')
      var usageData = region(compressed)
      normalizeUsageData(usageData, data)
      usage[country] = ***REMOVED******REMOVED***
      for (var i in usageData) ***REMOVED***
        for (var j in usageData[i]) ***REMOVED***
          usage[country][i + ' ' + j] = usageData[i][j]
    ***REMOVED***
  ***REMOVED***
***REMOVED***
***REMOVED***

  loadFeature: function loadFeature(features, name) ***REMOVED***
    name = name.replace(/[^\w-]/g, '')
    if (features[name]) return

    var compressed = require('caniuse-lite/data/features/' + name + '.js')
    var stats = feature(compressed).stats
    features[name] = ***REMOVED******REMOVED***
    for (var i in stats) ***REMOVED***
      for (var j in stats[i]) ***REMOVED***
        features[name][i + ' ' + j] = stats[i][j]
  ***REMOVED***
***REMOVED***
***REMOVED***

  parseConfig: function parseConfig(string) ***REMOVED***
    var result = ***REMOVED*** defaults: [] ***REMOVED***
    var sections = ['defaults']

    string
      .toString()
      .replace(/#[^\n]*/g, '')
      .split(/\n|,/)
      .map(function (line) ***REMOVED***
        return line.trim()
  ***REMOVED***)
      .filter(function (line) ***REMOVED***
        return line !== ''
  ***REMOVED***)
      .forEach(function (line) ***REMOVED***
        if (IS_SECTION.test(line)) ***REMOVED***
          sections = line.match(IS_SECTION)[1].trim().split(' ')
          sections.forEach(function (section) ***REMOVED***
            if (result[section]) ***REMOVED***
              throw new BrowserslistError(
                'Duplicate section ' + section + ' in Browserslist config'
              )
        ***REMOVED***
            result[section] = []
      ***REMOVED***)
    ***REMOVED*** else ***REMOVED***
          sections.forEach(function (section) ***REMOVED***
            result[section].push(line)
      ***REMOVED***)
    ***REMOVED***
  ***REMOVED***)

    return result
***REMOVED***

  readConfig: function readConfig(file) ***REMOVED***
    if (!isFile(file)) ***REMOVED***
      throw new BrowserslistError("Can't read " + file + ' config')
***REMOVED***
    return module.exports.parseConfig(fs.readFileSync(file))
***REMOVED***

  findConfig: function findConfig(from) ***REMOVED***
    from = path.resolve(from)

    var passed = []
    var resolved = eachParent(from, function (dir) ***REMOVED***
      if (dir in configCache) ***REMOVED***
        return configCache[dir]
  ***REMOVED***

      passed.push(dir)

      var config = path.join(dir, 'browserslist')
      var pkg = path.join(dir, 'package.json')
      var rc = path.join(dir, '.browserslistrc')

      var pkgBrowserslist
      if (isFile(pkg)) ***REMOVED***
        try ***REMOVED***
          pkgBrowserslist = parsePackage(pkg)
    ***REMOVED*** catch (e) ***REMOVED***
          if (e.name === 'BrowserslistError') throw e
          console.warn(
            '[Browserslist] Could not parse ' + pkg + '. Ignoring it.'
          )
    ***REMOVED***
  ***REMOVED***

      if (isFile(config) && pkgBrowserslist) ***REMOVED***
        throw new BrowserslistError(
          dir + ' contains both browserslist and package.json with browsers'
        )
  ***REMOVED*** else if (isFile(rc) && pkgBrowserslist) ***REMOVED***
        throw new BrowserslistError(
          dir + ' contains both .browserslistrc and package.json with browsers'
        )
  ***REMOVED*** else if (isFile(config) && isFile(rc)) ***REMOVED***
        throw new BrowserslistError(
          dir + ' contains both .browserslistrc and browserslist'
        )
  ***REMOVED*** else if (isFile(config)) ***REMOVED***
        return module.exports.readConfig(config)
  ***REMOVED*** else if (isFile(rc)) ***REMOVED***
        return module.exports.readConfig(rc)
  ***REMOVED*** else ***REMOVED***
        return pkgBrowserslist
  ***REMOVED***
***REMOVED***)
    if (!process.env.BROWSERSLIST_DISABLE_CACHE) ***REMOVED***
      passed.forEach(function (dir) ***REMOVED***
        configCache[dir] = resolved
  ***REMOVED***)
***REMOVED***
    return resolved
***REMOVED***

  clearCaches: function clearCaches() ***REMOVED***
    dataTimeChecked = false
    filenessCache = ***REMOVED******REMOVED***
    configCache = ***REMOVED******REMOVED***

    this.cache = ***REMOVED******REMOVED***
***REMOVED***

  oldDataWarning: function oldDataWarning(agentsObj) ***REMOVED***
    if (dataTimeChecked) return
    dataTimeChecked = true
    if (process.env.BROWSERSLIST_IGNORE_OLD_DATA) return

    var latest = latestReleaseTime(agentsObj)
    var halfYearAgo = Date.now() - TIME_TO_UPDATE_CANIUSE

    if (latest !== 0 && latest < halfYearAgo) ***REMOVED***
      console.warn(
        'Browserslist: caniuse-lite is outdated. Please run:\n' +
          '  npx browserslist@latest --update-db\n' +
          '  Why you should do it regularly: ' +
          'https://github.com/browserslist/browserslist#browsers-data-updating'
      )
***REMOVED***
***REMOVED***

  currentNode: function currentNode() ***REMOVED***
    return 'node ' + process.versions.node
***REMOVED***
***REMOVED***
