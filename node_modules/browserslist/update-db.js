var childProcess = require('child_process')
var escalade = require('escalade/sync')
var pico = require('picocolors')
var path = require('path')
var fs = require('fs')

var BrowserslistError = require('./error')

function detectLockfile() ***REMOVED***
  var packageDir = escalade('.', function (dir, names) ***REMOVED***
    return names.indexOf('package.json') !== -1 ? dir : ''
***REMOVED***)

  if (!packageDir) ***REMOVED***
    throw new BrowserslistError(
      'Cannot find package.json. ' +
        'Is this the right directory to run `npx browserslist --update-db` in?'
    )
***REMOVED***

  var lockfileNpm = path.join(packageDir, 'package-lock.json')
  var lockfileShrinkwrap = path.join(packageDir, 'npm-shrinkwrap.json')
  var lockfileYarn = path.join(packageDir, 'yarn.lock')
  var lockfilePnpm = path.join(packageDir, 'pnpm-lock.yaml')

  if (fs.existsSync(lockfilePnpm)) ***REMOVED***
    return ***REMOVED*** mode: 'pnpm', file: lockfilePnpm ***REMOVED***
***REMOVED*** else if (fs.existsSync(lockfileNpm)) ***REMOVED***
    return ***REMOVED*** mode: 'npm', file: lockfileNpm ***REMOVED***
***REMOVED*** else if (fs.existsSync(lockfileYarn)) ***REMOVED***
    var lock = ***REMOVED*** mode: 'yarn', file: lockfileYarn ***REMOVED***
    lock.content = fs.readFileSync(lock.file).toString()
    lock.version = /# yarn lockfile v1/.test(lock.content) ? 1 : 2
    return lock
***REMOVED*** else if (fs.existsSync(lockfileShrinkwrap)) ***REMOVED***
    return ***REMOVED*** mode: 'npm', file: lockfileShrinkwrap ***REMOVED***
***REMOVED***
  throw new BrowserslistError(
    'No lockfile found. Run "npm install", "yarn install" or "pnpm install"'
  )
***REMOVED***

function getLatestInfo(lock) ***REMOVED***
  if (lock.mode === 'yarn') ***REMOVED***
    if (lock.version === 1) ***REMOVED***
      return JSON.parse(
        childProcess.execSync('yarn info caniuse-lite --json').toString()
      ).data
***REMOVED*** else ***REMOVED***
      return JSON.parse(
        childProcess.execSync('yarn npm info caniuse-lite --json').toString()
      )
***REMOVED***
***REMOVED***
  return JSON.parse(
    childProcess.execSync('npm show caniuse-lite --json').toString()
  )
***REMOVED***

function getBrowsersList() ***REMOVED***
  return childProcess
    .execSync('npx browserslist')
    .toString()
    .trim()
    .split('\n')
    .map(function (line) ***REMOVED***
      return line.trim().split(' ')
***REMOVED***)
    .reduce(function (result, entry) ***REMOVED***
      if (!result[entry[0]]) ***REMOVED***
        result[entry[0]] = []
  ***REMOVED***
      result[entry[0]].push(entry[1])
      return result
***REMOVED***, ***REMOVED******REMOVED***)
***REMOVED***

function diffBrowsersLists(old, current) ***REMOVED***
  var browsers = Object.keys(old).concat(
    Object.keys(current).filter(function (browser) ***REMOVED***
      return old[browser] === undefined
***REMOVED***)
  )
  return browsers
    .map(function (browser) ***REMOVED***
      var oldVersions = old[browser] || []
      var currentVersions = current[browser] || []
      var intersection = oldVersions.filter(function (version) ***REMOVED***
        return currentVersions.indexOf(version) !== -1
  ***REMOVED***)
      var addedVersions = currentVersions.filter(function (version) ***REMOVED***
        return intersection.indexOf(version) === -1
  ***REMOVED***)
      var removedVersions = oldVersions.filter(function (version) ***REMOVED***
        return intersection.indexOf(version) === -1
  ***REMOVED***)
      return removedVersions
        .map(function (version) ***REMOVED***
          return pico.red('- ' + browser + ' ' + version)
    ***REMOVED***)
        .concat(
          addedVersions.map(function (version) ***REMOVED***
            return pico.green('+ ' + browser + ' ' + version)
      ***REMOVED***)
        )
***REMOVED***)
    .reduce(function (result, array) ***REMOVED***
      return result.concat(array)
***REMOVED***, [])
    .join('\n')
***REMOVED***

function updateNpmLockfile(lock, latest) ***REMOVED***
  var metadata = ***REMOVED*** latest: latest, versions: [] ***REMOVED***
  var content = deletePackage(JSON.parse(lock.content), metadata)
  metadata.content = JSON.stringify(content, null, '  ')
  return metadata
***REMOVED***

function deletePackage(node, metadata) ***REMOVED***
  if (node.dependencies) ***REMOVED***
    if (node.dependencies['caniuse-lite']) ***REMOVED***
      var version = node.dependencies['caniuse-lite'].version
      metadata.versions[version] = true
      delete node.dependencies['caniuse-lite']
***REMOVED***
    for (var i in node.dependencies) ***REMOVED***
      node.dependencies[i] = deletePackage(node.dependencies[i], metadata)
***REMOVED***
***REMOVED***
  return node
***REMOVED***

var yarnVersionRe = /version "(.*?)"/

function updateYarnLockfile(lock, latest) ***REMOVED***
  var blocks = lock.content.split(/(\n***REMOVED***2,***REMOVED***)/).map(function (block) ***REMOVED***
    return block.split('\n')
***REMOVED***)
  var versions = ***REMOVED******REMOVED***
  blocks.forEach(function (lines) ***REMOVED***
    if (lines[0].indexOf('caniuse-lite@') !== -1) ***REMOVED***
      var match = yarnVersionRe.exec(lines[1])
      versions[match[1]] = true
      if (match[1] !== latest.version) ***REMOVED***
        lines[1] = lines[1].replace(
          /version "[^"]+"/,
          'version "' + latest.version + '"'
        )
        lines[2] = lines[2].replace(
          /resolved "[^"]+"/,
          'resolved "' + latest.dist.tarball + '"'
        )
        if (lines.length === 4) ***REMOVED***
          lines[3] = latest.dist.integrity
            ? lines[3].replace(
                /integrity .+/,
                'integrity ' + latest.dist.integrity
              )
            : ''
    ***REMOVED***
  ***REMOVED***
***REMOVED***
***REMOVED***)
  var content = blocks
    .map(function (lines) ***REMOVED***
      return lines.join('\n')
***REMOVED***)
    .join('')
  return ***REMOVED*** content: content, versions: versions ***REMOVED***
***REMOVED***

function updateLockfile(lock, latest) ***REMOVED***
  if (!lock.content) lock.content = fs.readFileSync(lock.file).toString()

  if (lock.mode === 'yarn') ***REMOVED***
    return updateYarnLockfile(lock, latest)
***REMOVED*** else ***REMOVED***
    return updateNpmLockfile(lock, latest)
***REMOVED***
***REMOVED***

function updatePackageManually(print, lock, latest) ***REMOVED***
  var lockfileData = updateLockfile(lock, latest)
  var caniuseVersions = Object.keys(lockfileData.versions).sort()
  if (caniuseVersions.length === 1 && caniuseVersions[0] === latest.version) ***REMOVED***
    print(
      'Installed version:  ' +
        pico.bold(pico.green(latest.version)) +
        '\n' +
        pico.bold(pico.green('caniuse-lite is up to date')) +
        '\n'
    )
    return
***REMOVED***

  if (caniuseVersions.length === 0) ***REMOVED***
    caniuseVersions[0] = 'none'
***REMOVED***
  print(
    'Installed version' +
      (caniuseVersions.length === 1 ? ':  ' : 's: ') +
      pico.bold(pico.red(caniuseVersions.join(', '))) +
      '\n' +
      'Removing old caniuse-lite from lock file\n'
  )
  fs.writeFileSync(lock.file, lockfileData.content)

  var install = lock.mode === 'yarn' ? 'yarn add -W' : lock.mode + ' install'
  print(
    'Installing new caniuse-lite version\n' +
      pico.yellow('$ ' + install + ' caniuse-lite') +
      '\n'
  )
  try ***REMOVED***
    childProcess.execSync(install + ' caniuse-lite')
***REMOVED*** catch (e) /* c8 ignore start */ ***REMOVED***
    print(
      pico.red(
        '\n' +
          e.stack +
          '\n\n' +
          'Problem with `' +
          install +
          ' caniuse-lite` call. ' +
          'Run it manually.\n'
      )
    )
    process.exit(1)
***REMOVED*** /* c8 ignore end */

  var del = lock.mode === 'yarn' ? 'yarn remove -W' : lock.mode + ' uninstall'
  print(
    'Cleaning package.json dependencies from caniuse-lite\n' +
      pico.yellow('$ ' + del + ' caniuse-lite') +
      '\n'
  )
  childProcess.execSync(del + ' caniuse-lite')
***REMOVED***

function updateWith(print, cmd) ***REMOVED***
  print('Updating caniuse-lite version\n' + pico.yellow('$ ' + cmd) + '\n')
  try ***REMOVED***
    childProcess.execSync(cmd)
***REMOVED*** catch (e) /* c8 ignore start */ ***REMOVED***
    print(pico.red(e.stdout.toString()))
    print(
      pico.red(
        '\n' +
          e.stack +
          '\n\n' +
          'Problem with `' +
          cmd +
          '` call. ' +
          'Run it manually.\n'
      )
    )
    process.exit(1)
***REMOVED*** /* c8 ignore end */
***REMOVED***

module.exports = function updateDB(print) ***REMOVED***
  var lock = detectLockfile()
  var latest = getLatestInfo(lock)

  var browsersListRetrievalError
  var oldBrowsersList
  try ***REMOVED***
    oldBrowsersList = getBrowsersList()
***REMOVED*** catch (e) ***REMOVED***
    browsersListRetrievalError = e
***REMOVED***

  print('Latest version:     ' + pico.bold(pico.green(latest.version)) + '\n')

  if (lock.mode === 'yarn' && lock.version !== 1) ***REMOVED***
    updateWith(print, 'yarn up -R caniuse-lite')
***REMOVED*** else if (lock.mode === 'pnpm') ***REMOVED***
    updateWith(print, 'pnpm up caniuse-lite')
***REMOVED*** else ***REMOVED***
    updatePackageManually(print, lock, latest)
***REMOVED***

  print('caniuse-lite has been successfully updated\n')

  var currentBrowsersList
  if (!browsersListRetrievalError) ***REMOVED***
    try ***REMOVED***
      currentBrowsersList = getBrowsersList()
***REMOVED*** catch (e) /* c8 ignore start */ ***REMOVED***
      browsersListRetrievalError = e
***REMOVED*** /* c8 ignore end */
***REMOVED***

  if (browsersListRetrievalError) ***REMOVED***
    print(
      pico.red(
        '\n' +
          browsersListRetrievalError.stack +
          '\n\n' +
          'Problem with browser list retrieval.\n' +
          'Target browser changes wonâ€™t be shown.\n'
      )
    )
***REMOVED*** else ***REMOVED***
    var targetBrowserChanges = diffBrowsersLists(
      oldBrowsersList,
      currentBrowsersList
    )
    if (targetBrowserChanges) ***REMOVED***
      print('\nTarget browser changes:\n')
      print(targetBrowserChanges + '\n')
***REMOVED*** else ***REMOVED***
      print('\n' + pico.green('No target browser changes') + '\n')
***REMOVED***
***REMOVED***
***REMOVED***
