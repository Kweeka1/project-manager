#!/usr/bin/env node

var fs = require('fs')

var browserslist = require('./')
var updateDb = require('./update-db')
var pkg = require('./package.json')

var args = process.argv.slice(2)

var USAGE =
  'Usage:\n' +
  '  npx browserslist\n' +
  '  npx browserslist "QUERIES"\n' +
  '  npx browserslist --json "QUERIES"\n' +
  '  npx browserslist --config="path/to/browserlist/file"\n' +
  '  npx browserslist --coverage "QUERIES"\n' +
  '  npx browserslist --coverage=US "QUERIES"\n' +
  '  npx browserslist --coverage=US,RU,global "QUERIES"\n' +
  '  npx browserslist --env="environment name defined in config"\n' +
  '  npx browserslist --stats="path/to/browserlist/stats/file"\n' +
  '  npx browserslist --mobile-to-desktop\n' +
  '  npx browserslist --ignore-unknown-versions\n' +
  '  npx browserslist --update-db'

function isArg(arg) ***REMOVED***
  return args.some(function (str) ***REMOVED***
    return str === arg || str.indexOf(arg + '=') === 0
***REMOVED***)
***REMOVED***

function error(msg) ***REMOVED***
  process.stderr.write('browserslist: ' + msg + '\n')
  process.exit(1)
***REMOVED***

if (isArg('--help') || isArg('-h')) ***REMOVED***
  process.stdout.write(pkg.description + '.\n\n' + USAGE + '\n')
***REMOVED*** else if (isArg('--version') || isArg('-v')) ***REMOVED***
  process.stdout.write('browserslist ' + pkg.version + '\n')
***REMOVED*** else if (isArg('--update-db')) ***REMOVED***
  /* c8 ignore next 3 */
  updateDb(function (str) ***REMOVED***
    process.stdout.write(str)
***REMOVED***)
***REMOVED*** else ***REMOVED***
  var mode = 'browsers'
  var opts = ***REMOVED******REMOVED***
  var queries
  var areas

  for (var i = 0; i < args.length; i++) ***REMOVED***
    if (args[i][0] !== '-') ***REMOVED***
      queries = args[i].replace(/^["']|["']$/g, '')
      continue
***REMOVED***

    var arg = args[i].split('=')
    var name = arg[0]
    var value = arg[1]

    if (value) value = value.replace(/^["']|["']$/g, '')

    if (name === '--config' || name === '-b') ***REMOVED***
      opts.config = value
***REMOVED*** else if (name === '--env' || name === '-e') ***REMOVED***
      opts.env = value
***REMOVED*** else if (name === '--stats' || name === '-s') ***REMOVED***
      opts.stats = value
***REMOVED*** else if (name === '--coverage' || name === '-c') ***REMOVED***
      if (mode !== 'json') mode = 'coverage'
      if (value) ***REMOVED***
        areas = value.split(',')
  ***REMOVED*** else ***REMOVED***
        areas = ['global']
  ***REMOVED***
***REMOVED*** else if (name === '--json') ***REMOVED***
      mode = 'json'
***REMOVED*** else if (name === '--mobile-to-desktop') ***REMOVED***
      /* c8 ignore next */
      opts.mobileToDesktop = true
***REMOVED*** else if (name === '--ignore-unknown-versions') ***REMOVED***
      /* c8 ignore next */
      opts.ignoreUnknownVersions = true
***REMOVED*** else ***REMOVED***
      error('Unknown arguments ' + args[i] + '.\n\n' + USAGE)
***REMOVED***
***REMOVED***

  var browsers
  try ***REMOVED***
    browsers = browserslist(queries, opts)
***REMOVED*** catch (e) ***REMOVED***
    if (e.name === 'BrowserslistError') ***REMOVED***
      error(e.message)
***REMOVED*** else /* c8 ignore start */ ***REMOVED***
      throw e
***REMOVED*** /* c8 ignore end */
***REMOVED***

  var coverage
  if (mode === 'browsers') ***REMOVED***
    browsers.forEach(function (browser) ***REMOVED***
      process.stdout.write(browser + '\n')
***REMOVED***)
***REMOVED*** else if (areas) ***REMOVED***
    coverage = areas.map(function (area) ***REMOVED***
      var stats
      if (area !== 'global') ***REMOVED***
        stats = area
  ***REMOVED*** else if (opts.stats) ***REMOVED***
        stats = JSON.parse(fs.readFileSync(opts.stats))
  ***REMOVED***
      var result = browserslist.coverage(browsers, stats)
      var round = Math.round(result * 100) / 100.0

      return [area, round]
***REMOVED***)

    if (mode === 'coverage') ***REMOVED***
      var prefix = 'These browsers account for '
      process.stdout.write(prefix)
      coverage.forEach(function (data, index) ***REMOVED***
        var area = data[0]
        var round = data[1]
        var end = 'globally'
        if (area && area !== 'global') ***REMOVED***
          end = 'in the ' + area.toUpperCase()
    ***REMOVED*** else if (opts.stats) ***REMOVED***
          end = 'in custom statistics'
    ***REMOVED***

        if (index !== 0) ***REMOVED***
          process.stdout.write(prefix.replace(/./g, ' '))
    ***REMOVED***

        process.stdout.write(round + '% of all users ' + end + '\n')
  ***REMOVED***)
***REMOVED***
***REMOVED***

  if (mode === 'json') ***REMOVED***
    var data = ***REMOVED*** browsers: browsers ***REMOVED***
    if (coverage) ***REMOVED***
      data.coverage = coverage.reduce(function (object, j) ***REMOVED***
        object[j[0]] = j[1]
        return object
  ***REMOVED***, ***REMOVED******REMOVED***)
***REMOVED***
    process.stdout.write(JSON.stringify(data, null, '  ') + '\n')
***REMOVED***
***REMOVED***
