'use strict';

const fill = require('fill-range');
const utils = require('./utils');

const compile = (ast, options = ***REMOVED******REMOVED***) => ***REMOVED***
  let walk = (node, parent = ***REMOVED******REMOVED***) => ***REMOVED***
    let invalidBlock = utils.isInvalidBrace(parent);
    let invalidNode = node.invalid === true && options.escapeInvalid === true;
    let invalid = invalidBlock === true || invalidNode === true;
    let prefix = options.escapeInvalid === true ? '\\' : '';
    let output = '';

    if (node.isOpen === true) ***REMOVED***
      return prefix + node.value;
***REMOVED***
    if (node.isClose === true) ***REMOVED***
      return prefix + node.value;
***REMOVED***

    if (node.type === 'open') ***REMOVED***
      return invalid ? (prefix + node.value) : '(';
***REMOVED***

    if (node.type === 'close') ***REMOVED***
      return invalid ? (prefix + node.value) : ')';
***REMOVED***

    if (node.type === 'comma') ***REMOVED***
      return node.prev.type === 'comma' ? '' : (invalid ? node.value : '|');
***REMOVED***

    if (node.value) ***REMOVED***
      return node.value;
***REMOVED***

    if (node.nodes && node.ranges > 0) ***REMOVED***
      let args = utils.reduce(node.nodes);
      let range = fill(...args, ***REMOVED*** ...options, wrap: false, toRegex: true ***REMOVED***);

      if (range.length !== 0) ***REMOVED***
        return args.length > 1 && range.length > 1 ? `($***REMOVED***range***REMOVED***)` : range;
  ***REMOVED***
***REMOVED***

    if (node.nodes) ***REMOVED***
      for (let child of node.nodes) ***REMOVED***
        output += walk(child, node);
  ***REMOVED***
***REMOVED***
    return output;
***REMOVED***;

  return walk(ast);
***REMOVED***;

module.exports = compile;
