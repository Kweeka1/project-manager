import prettier from 'prettier'
import ***REMOVED*** corePlugins ***REMOVED*** from '../src/corePlugins'
import colors from '../src/public/colors'
import fs from 'fs'
import path from 'path'

fs.writeFileSync(
  path.join(process.cwd(), 'types', 'generated', 'corePluginList.d.ts'),
  `export type CorePluginList = $***REMOVED***Object.keys(corePlugins)
    .map((p) => `'$***REMOVED***p***REMOVED***'`)
    .join(' | ')***REMOVED***`
)

let colorsWithoutDeprecatedColors = Object.fromEntries(
  Object.entries(Object.getOwnPropertyDescriptors(colors))
    .filter(([_, ***REMOVED*** value ***REMOVED***]) => ***REMOVED***
      return typeof value !== 'undefined'
***REMOVED***)
    .map(([name, definition]) => [name, definition.value])
)

let deprecatedColors = Object.entries(Object.getOwnPropertyDescriptors(colors))
  .filter(([_, ***REMOVED*** value ***REMOVED***]) => ***REMOVED***
    return typeof value === 'undefined'
***REMOVED***)
  .map(([name, definition]) => ***REMOVED***
    let warn = console.warn
    let messages = []
    console.warn = (...args) => messages.push(args.pop())
    definition.get()
    console.warn = warn
    let message = messages.join(' ').trim()
    let newColor = message.match(/renamed to `(.*)`/)[1]
    return `/** @deprecated $***REMOVED***message***REMOVED*** */$***REMOVED***name***REMOVED***: DefaultColors['$***REMOVED***newColor***REMOVED***'],`
***REMOVED***)
  .join('\n')

fs.writeFileSync(
  path.join(process.cwd(), 'types', 'generated', 'colors.d.ts'),
  prettier.format(
    `export interface DefaultColors ***REMOVED*** $***REMOVED***JSON.stringify(colorsWithoutDeprecatedColors).slice(
      1,
      -1
    )***REMOVED***\n$***REMOVED***deprecatedColors***REMOVED***\n***REMOVED***`,
    ***REMOVED***
      semi: false,
      singleQuote: true,
      printWidth: 100,
      parser: 'typescript',
***REMOVED***
  )
)
