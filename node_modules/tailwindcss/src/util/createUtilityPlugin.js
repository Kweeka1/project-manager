import transformThemeValue from './transformThemeValue'

export default function createUtilityPlugin(
  themeKey,
  utilityVariations = [[themeKey, [themeKey]]],
  ***REMOVED*** filterDefault = false, ...options ***REMOVED*** = ***REMOVED******REMOVED***
) ***REMOVED***
  let transformValue = transformThemeValue(themeKey)
  return function (***REMOVED*** matchUtilities, theme ***REMOVED***) ***REMOVED***
    for (let utilityVariation of utilityVariations) ***REMOVED***
      let group = Array.isArray(utilityVariation[0]) ? utilityVariation : [utilityVariation]

      matchUtilities(
        group.reduce((obj, [classPrefix, properties]) => ***REMOVED***
          return Object.assign(obj, ***REMOVED***
            [classPrefix]: (value) => ***REMOVED***
              return properties.reduce((obj, name) => ***REMOVED***
                if (Array.isArray(name)) ***REMOVED***
                  return Object.assign(obj, ***REMOVED*** [name[0]]: name[1] ***REMOVED***)
            ***REMOVED***
                return Object.assign(obj, ***REMOVED*** [name]: transformValue(value) ***REMOVED***)
          ***REMOVED***, ***REMOVED******REMOVED***)
        ***REMOVED***,
      ***REMOVED***)
    ***REMOVED***, ***REMOVED******REMOVED***),
        ***REMOVED***
          ...options,
          values: filterDefault
            ? Object.fromEntries(
                Object.entries(theme(themeKey) ?? ***REMOVED******REMOVED***).filter(([modifier]) => modifier !== 'DEFAULT')
              )
            : theme(themeKey),
    ***REMOVED***
      )
***REMOVED***
***REMOVED***
***REMOVED***
