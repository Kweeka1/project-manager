import namedColors from 'color-name'

let HEX = /^#([a-f\d]***REMOVED***2***REMOVED***)([a-f\d]***REMOVED***2***REMOVED***)([a-f\d]***REMOVED***2***REMOVED***)([a-f\d]***REMOVED***2***REMOVED***)?$/i
let SHORT_HEX = /^#([a-f\d])([a-f\d])([a-f\d])([a-f\d])?$/i
let VALUE = /(?:\d+|\d*\.\d+)%?/
let SEP = /(?:\s*,\s*|\s+)/
let ALPHA_SEP = /\s*[,/]\s*/
let CUSTOM_PROPERTY = /var\(--(?:[^ )]*?)\)/

let RGB = new RegExp(
  `^rgba?\\(\\s*($***REMOVED***VALUE.source***REMOVED***|$***REMOVED***CUSTOM_PROPERTY.source***REMOVED***)$***REMOVED***SEP.source***REMOVED***($***REMOVED***VALUE.source***REMOVED***|$***REMOVED***CUSTOM_PROPERTY.source***REMOVED***)$***REMOVED***SEP.source***REMOVED***($***REMOVED***VALUE.source***REMOVED***|$***REMOVED***CUSTOM_PROPERTY.source***REMOVED***)(?:$***REMOVED***ALPHA_SEP.source***REMOVED***($***REMOVED***VALUE.source***REMOVED***|$***REMOVED***CUSTOM_PROPERTY.source***REMOVED***))?\\s*\\)$`
)
let HSL = new RegExp(
  `^hsla?\\(\\s*((?:$***REMOVED***VALUE.source***REMOVED***)(?:deg|rad|grad|turn)?|$***REMOVED***CUSTOM_PROPERTY.source***REMOVED***)$***REMOVED***SEP.source***REMOVED***($***REMOVED***VALUE.source***REMOVED***|$***REMOVED***CUSTOM_PROPERTY.source***REMOVED***)$***REMOVED***SEP.source***REMOVED***($***REMOVED***VALUE.source***REMOVED***|$***REMOVED***CUSTOM_PROPERTY.source***REMOVED***)(?:$***REMOVED***ALPHA_SEP.source***REMOVED***($***REMOVED***VALUE.source***REMOVED***|$***REMOVED***CUSTOM_PROPERTY.source***REMOVED***))?\\s*\\)$`
)

export function parseColor(value) ***REMOVED***
  if (typeof value !== 'string') ***REMOVED***
    return null
***REMOVED***

  value = value.trim()
  if (value === 'transparent') ***REMOVED***
    return ***REMOVED*** mode: 'rgb', color: ['0', '0', '0'], alpha: '0' ***REMOVED***
***REMOVED***

  if (value in namedColors) ***REMOVED***
    return ***REMOVED*** mode: 'rgb', color: namedColors[value].map((v) => v.toString()) ***REMOVED***
***REMOVED***

  let hex = value
    .replace(SHORT_HEX, (_, r, g, b, a) => ['#', r, r, g, g, b, b, a ? a + a : ''].join(''))
    .match(HEX)

  if (hex !== null) ***REMOVED***
    return ***REMOVED***
      mode: 'rgb',
      color: [parseInt(hex[1], 16), parseInt(hex[2], 16), parseInt(hex[3], 16)].map((v) =>
        v.toString()
      ),
      alpha: hex[4] ? (parseInt(hex[4], 16) / 255).toString() : undefined,
***REMOVED***
***REMOVED***

  let rgbMatch = value.match(RGB)

  if (rgbMatch !== null) ***REMOVED***
    return ***REMOVED***
      mode: 'rgb',
      color: [rgbMatch[1], rgbMatch[2], rgbMatch[3]].map((v) => v.toString()),
      alpha: rgbMatch[4]?.toString?.(),
***REMOVED***
***REMOVED***

  let hslMatch = value.match(HSL)

  if (hslMatch !== null) ***REMOVED***
    return ***REMOVED***
      mode: 'hsl',
      color: [hslMatch[1], hslMatch[2], hslMatch[3]].map((v) => v.toString()),
      alpha: hslMatch[4]?.toString?.(),
***REMOVED***
***REMOVED***

  return null
***REMOVED***

export function formatColor(***REMOVED*** mode, color, alpha ***REMOVED***) ***REMOVED***
  let hasAlpha = alpha !== undefined
  return `$***REMOVED***mode***REMOVED***($***REMOVED***color.join(' ')***REMOVED***$***REMOVED***hasAlpha ? ` / $***REMOVED***alpha***REMOVED***` : ''***REMOVED***)`
***REMOVED***
