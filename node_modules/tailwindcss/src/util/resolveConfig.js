import negateValue from './negateValue'
import corePluginList from '../corePluginList'
import configurePlugins from './configurePlugins'
import defaultConfig from '../../stubs/defaultConfig.stub'
import colors from '../public/colors'
import ***REMOVED*** defaults ***REMOVED*** from './defaults'
import ***REMOVED*** toPath ***REMOVED*** from './toPath'
import ***REMOVED*** normalizeConfig ***REMOVED*** from './normalizeConfig'
import isPlainObject from './isPlainObject'
import ***REMOVED*** cloneDeep ***REMOVED*** from './cloneDeep'

function isFunction(input) ***REMOVED***
  return typeof input === 'function'
***REMOVED***

function isObject(input) ***REMOVED***
  return typeof input === 'object' && input !== null
***REMOVED***

function mergeWith(target, ...sources) ***REMOVED***
  let customizer = sources.pop()

  for (let source of sources) ***REMOVED***
    for (let k in source) ***REMOVED***
      let merged = customizer(target[k], source[k])

      if (merged === undefined) ***REMOVED***
        if (isObject(target[k]) && isObject(source[k])) ***REMOVED***
          target[k] = mergeWith(target[k], source[k], customizer)
    ***REMOVED*** else ***REMOVED***
          target[k] = source[k]
    ***REMOVED***
  ***REMOVED*** else ***REMOVED***
        target[k] = merged
  ***REMOVED***
***REMOVED***
***REMOVED***

  return target
***REMOVED***

const configUtils = ***REMOVED***
  colors,
  negative(scale) ***REMOVED***
    // TODO: Log that this function isn't really needed anymore?
    return Object.keys(scale)
      .filter((key) => scale[key] !== '0')
      .reduce((negativeScale, key) => ***REMOVED***
        let negativeValue = negateValue(scale[key])

        if (negativeValue !== undefined) ***REMOVED***
          negativeScale[`-$***REMOVED***key***REMOVED***`] = negativeValue
    ***REMOVED***

        return negativeScale
  ***REMOVED***, ***REMOVED******REMOVED***)
***REMOVED***
  breakpoints(screens) ***REMOVED***
    return Object.keys(screens)
      .filter((key) => typeof screens[key] === 'string')
      .reduce(
        (breakpoints, key) => (***REMOVED***
          ...breakpoints,
          [`screen-$***REMOVED***key***REMOVED***`]: screens[key],
    ***REMOVED***),
        ***REMOVED******REMOVED***
      )
***REMOVED***
  /*
  rgb(property) ***REMOVED***
    if (!property.startsWith('--')) ***REMOVED***
      throw new Error(
        'The rgb() helper requires a custom property name to be passed as the first argument.'
      )
***REMOVED***

    return (***REMOVED*** opacityValue ***REMOVED***) => ***REMOVED***
      if (opacityValue === undefined || opacityValue === 1) ***REMOVED***
        return `rgb(var($***REMOVED***property***REMOVED***) / 1.0)`
  ***REMOVED***

      return `rgb(var($***REMOVED***property***REMOVED***) / $***REMOVED***opacityValue***REMOVED***)`
***REMOVED***
***REMOVED***
  hsl(property) ***REMOVED***
    if (!property.startsWith('--')) ***REMOVED***
      throw new Error(
        'The hsl() helper requires a custom property name to be passed as the first argument.'
      )
***REMOVED***

    return (***REMOVED*** opacityValue ***REMOVED***) => ***REMOVED***
      if (opacityValue === undefined || opacityValue === 1) ***REMOVED***
        return `hsl(var($***REMOVED***property***REMOVED***) / 1)`
  ***REMOVED***

      return `hsl(var($***REMOVED***property***REMOVED***) / $***REMOVED***opacityValue***REMOVED***)`
***REMOVED***
***REMOVED***
  */
***REMOVED***

function value(valueToResolve, ...args) ***REMOVED***
  return isFunction(valueToResolve) ? valueToResolve(...args) : valueToResolve
***REMOVED***

function collectExtends(items) ***REMOVED***
  return items.reduce((merged, ***REMOVED*** extend ***REMOVED***) => ***REMOVED***
    return mergeWith(merged, extend, (mergedValue, extendValue) => ***REMOVED***
      if (mergedValue === undefined) ***REMOVED***
        return [extendValue]
  ***REMOVED***

      if (Array.isArray(mergedValue)) ***REMOVED***
        return [extendValue, ...mergedValue]
  ***REMOVED***

      return [extendValue, mergedValue]
***REMOVED***)
***REMOVED*** ***REMOVED******REMOVED***)
***REMOVED***

function mergeThemes(themes) ***REMOVED***
  return ***REMOVED***
    ...themes.reduce((merged, theme) => defaults(merged, theme), ***REMOVED******REMOVED***),

    // In order to resolve n config objects, we combine all of their `extend` properties
    // into arrays instead of objects so they aren't overridden.
    extend: collectExtends(themes),
***REMOVED***
***REMOVED***

function mergeExtensionCustomizer(merged, value) ***REMOVED***
  // When we have an array of objects, we do want to merge it
  if (Array.isArray(merged) && isObject(merged[0])) ***REMOVED***
    return merged.concat(value)
***REMOVED***

  // When the incoming value is an array, and the existing config is an object, prepend the existing object
  if (Array.isArray(value) && isObject(value[0]) && isObject(merged)) ***REMOVED***
    return [merged, ...value]
***REMOVED***

  // Override arrays (for example for font-families, box-shadows, ...)
  if (Array.isArray(value)) ***REMOVED***
    return value
***REMOVED***

  // Execute default behaviour
  return undefined
***REMOVED***

function mergeExtensions(***REMOVED*** extend, ...theme ***REMOVED***) ***REMOVED***
  return mergeWith(theme, extend, (themeValue, extensions) => ***REMOVED***
    // The `extend` property is an array, so we need to check if it contains any functions
    if (!isFunction(themeValue) && !extensions.some(isFunction)) ***REMOVED***
      return mergeWith(***REMOVED******REMOVED***, themeValue, ...extensions, mergeExtensionCustomizer)
***REMOVED***

    return (resolveThemePath, utils) =>
      mergeWith(
        ***REMOVED******REMOVED***,
        ...[themeValue, ...extensions].map((e) => value(e, resolveThemePath, utils)),
        mergeExtensionCustomizer
      )
***REMOVED***)
***REMOVED***

function resolveFunctionKeys(object) ***REMOVED***
  const resolvePath = (key, defaultValue) => ***REMOVED***
    const path = toPath(key)

    let index = 0
    let val = object

    while (val !== undefined && val !== null && index < path.length) ***REMOVED***
      val = val[path[index++]]
      val = isFunction(val) ? val(resolvePath, configUtils) : val
***REMOVED***

    if (val === undefined) ***REMOVED***
      return defaultValue
***REMOVED***

    if (isPlainObject(val)) ***REMOVED***
      return cloneDeep(val)
***REMOVED***

    return val
***REMOVED***

  resolvePath.theme = resolvePath

  for (let key in configUtils) ***REMOVED***
    resolvePath[key] = configUtils[key]
***REMOVED***

  return Object.keys(object).reduce((resolved, key) => ***REMOVED***
    return ***REMOVED***
      ...resolved,
      [key]: isFunction(object[key]) ? object[key](resolvePath, configUtils) : object[key],
***REMOVED***
***REMOVED*** ***REMOVED******REMOVED***)
***REMOVED***

function extractPluginConfigs(configs) ***REMOVED***
  let allConfigs = []

  configs.forEach((config) => ***REMOVED***
    allConfigs = [...allConfigs, config]

    const plugins = config?.plugins ?? []

    if (plugins.length === 0) ***REMOVED***
      return
***REMOVED***

    plugins.forEach((plugin) => ***REMOVED***
      if (plugin.__isOptionsFunction) ***REMOVED***
        plugin = plugin()
  ***REMOVED***
      allConfigs = [...allConfigs, ...extractPluginConfigs([plugin?.config ?? ***REMOVED******REMOVED***])]
***REMOVED***)
***REMOVED***)

  return allConfigs
***REMOVED***

function resolveCorePlugins(corePluginConfigs) ***REMOVED***
  const result = [...corePluginConfigs].reduceRight((resolved, corePluginConfig) => ***REMOVED***
    if (isFunction(corePluginConfig)) ***REMOVED***
      return corePluginConfig(***REMOVED*** corePlugins: resolved ***REMOVED***)
***REMOVED***
    return configurePlugins(corePluginConfig, resolved)
***REMOVED*** corePluginList)

  return result
***REMOVED***

function resolvePluginLists(pluginLists) ***REMOVED***
  const result = [...pluginLists].reduceRight((resolved, pluginList) => ***REMOVED***
    return [...resolved, ...pluginList]
***REMOVED*** [])

  return result
***REMOVED***

export default function resolveConfig(configs) ***REMOVED***
  let allConfigs = [
    ...extractPluginConfigs(configs),
    ***REMOVED***
      prefix: '',
      important: false,
      separator: ':',
      variantOrder: defaultConfig.variantOrder,
***REMOVED***,
  ]

  return normalizeConfig(
    defaults(
      ***REMOVED***
        theme: resolveFunctionKeys(
          mergeExtensions(mergeThemes(allConfigs.map((t) => t?.theme ?? ***REMOVED******REMOVED***)))
        ),
        corePlugins: resolveCorePlugins(allConfigs.map((c) => c.corePlugins)),
        plugins: resolvePluginLists(configs.map((c) => c?.plugins ?? [])),
  ***REMOVED***,
      ...allConfigs
    )
  )
***REMOVED***
