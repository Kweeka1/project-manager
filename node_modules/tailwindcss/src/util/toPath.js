/**
 * Parse a path string into an array of path segments.
 *
 * Square bracket notation `a[b]` may be used to "escape" dots that would otherwise be interpreted as path separators.
 *
 * Example:
 * a -> ['a]
 * a.b.c -> ['a', 'b', 'c']
 * a[b].c -> ['a', 'b', 'c']
 * a[b.c].e.f -> ['a', 'b.c', 'e', 'f']
 * a[b][c][d] -> ['a', 'b', 'c', 'd']
 *
 * @param ***REMOVED***string|string[]***REMOVED*** path
 **/
export function toPath(path) ***REMOVED***
  if (Array.isArray(path)) return path

  let openBrackets = path.split('[').length - 1
  let closedBrackets = path.split(']').length - 1

  if (openBrackets !== closedBrackets) ***REMOVED***
    throw new Error(`Path is invalid. Has unbalanced brackets: $***REMOVED***path***REMOVED***`)
***REMOVED***

  return path.split(/\.(?![^\[]*\])|[\[\]]/g).filter(Boolean)
***REMOVED***
