import ***REMOVED*** parseColor ***REMOVED*** from './color'
import ***REMOVED*** parseBoxShadowValue ***REMOVED*** from './parseBoxShadowValue'

let cssFunctions = ['min', 'max', 'clamp', 'calc']

// Ref: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Types

let COMMA = /,(?![^(]*\))/g // Comma separator that is not located between brackets. E.g.: `cubiz-bezier(a, b, c)` these don't count.
let UNDERSCORE = /_(?![^(]*\))/g // Underscore separator that is not located between brackets. E.g.: `rgba(255,_255,_255)_black` these don't count.

// This is not a data type, but rather a function that can normalize the
// correct values.
export function normalize(value, isRoot = true) ***REMOVED***
  // Keep raw strings if it starts with `url(`
  if (value.includes('url(')) ***REMOVED***
    return value
      .split(/(url\(.*?\))/g)
      .filter(Boolean)
      .map((part) => ***REMOVED***
        if (/^url\(.*?\)$/.test(part)) ***REMOVED***
          return part
    ***REMOVED***

        return normalize(part, false)
  ***REMOVED***)
      .join('')
***REMOVED***

  // Convert `_` to ` `, except for escaped underscores `\_`
  value = value
    .replace(
      /([^\\])_+/g,
      (fullMatch, characterBefore) => characterBefore + ' '.repeat(fullMatch.length - 1)
    )
    .replace(/^_/g, ' ')
    .replace(/\\_/g, '_')

  // Remove leftover whitespace
  if (isRoot) ***REMOVED***
    value = value.trim()
***REMOVED***

  // Add spaces around operators inside calc() that do not follow an operator
  // or '('.
  return value.replace(
    /(-?\d*\.?\d(?!\b-.+[,)](?![^+\-/*])\D)(?:%|[a-z]+)?|\))([+\-/*])/g,
    '$1 $2 '
  )
***REMOVED***

export function url(value) ***REMOVED***
  return value.startsWith('url(')
***REMOVED***

export function number(value) ***REMOVED***
  return !isNaN(Number(value)) || cssFunctions.some((fn) => new RegExp(`^$***REMOVED***fn***REMOVED***\\(.+?`).test(value))
***REMOVED***

export function percentage(value) ***REMOVED***
  return value.split(UNDERSCORE).every((part) => ***REMOVED***
    return /%$/g.test(part) || cssFunctions.some((fn) => new RegExp(`^$***REMOVED***fn***REMOVED***\\(.+?%`).test(part))
***REMOVED***)
***REMOVED***

let lengthUnits = [
  'cm',
  'mm',
  'Q',
  'in',
  'pc',
  'pt',
  'px',
  'em',
  'ex',
  'ch',
  'rem',
  'lh',
  'vw',
  'vh',
  'vmin',
  'vmax',
]
let lengthUnitsPattern = `(?:$***REMOVED***lengthUnits.join('|')***REMOVED***)`
export function length(value) ***REMOVED***
  return value.split(UNDERSCORE).every((part) => ***REMOVED***
    return (
      part === '0' ||
      new RegExp(`$***REMOVED***lengthUnitsPattern***REMOVED***$`).test(part) ||
      cssFunctions.some((fn) => new RegExp(`^$***REMOVED***fn***REMOVED***\\(.+?$***REMOVED***lengthUnitsPattern***REMOVED***`).test(part))
    )
***REMOVED***)
***REMOVED***

let lineWidths = new Set(['thin', 'medium', 'thick'])
export function lineWidth(value) ***REMOVED***
  return lineWidths.has(value)
***REMOVED***

export function shadow(value) ***REMOVED***
  let parsedShadows = parseBoxShadowValue(normalize(value))

  for (let parsedShadow of parsedShadows) ***REMOVED***
    if (!parsedShadow.valid) ***REMOVED***
      return false
***REMOVED***
***REMOVED***

  return true
***REMOVED***

export function color(value) ***REMOVED***
  let colors = 0

  let result = value.split(UNDERSCORE).every((part) => ***REMOVED***
    part = normalize(part)

    if (part.startsWith('var(')) return true
    if (parseColor(part) !== null) return colors++, true

    return false
***REMOVED***)

  if (!result) return false
  return colors > 0
***REMOVED***

export function image(value) ***REMOVED***
  let images = 0
  let result = value.split(COMMA).every((part) => ***REMOVED***
    part = normalize(part)

    if (part.startsWith('var(')) return true
    if (
      url(part) ||
      gradient(part) ||
      ['element(', 'image(', 'cross-fade(', 'image-set('].some((fn) => part.startsWith(fn))
    ) ***REMOVED***
      images++
      return true
***REMOVED***

    return false
***REMOVED***)

  if (!result) return false
  return images > 0
***REMOVED***

let gradientTypes = new Set([
  'linear-gradient',
  'radial-gradient',
  'repeating-linear-gradient',
  'repeating-radial-gradient',
  'conic-gradient',
])
export function gradient(value) ***REMOVED***
  value = normalize(value)

  for (let type of gradientTypes) ***REMOVED***
    if (value.startsWith(`$***REMOVED***type***REMOVED***(`)) ***REMOVED***
      return true
***REMOVED***
***REMOVED***
  return false
***REMOVED***

let validPositions = new Set(['center', 'top', 'right', 'bottom', 'left'])
export function position(value) ***REMOVED***
  let positions = 0
  let result = value.split(UNDERSCORE).every((part) => ***REMOVED***
    part = normalize(part)

    if (part.startsWith('var(')) return true
    if (validPositions.has(part) || length(part) || percentage(part)) ***REMOVED***
      positions++
      return true
***REMOVED***

    return false
***REMOVED***)

  if (!result) return false
  return positions > 0
***REMOVED***

export function familyName(value) ***REMOVED***
  let fonts = 0
  let result = value.split(COMMA).every((part) => ***REMOVED***
    part = normalize(part)

    if (part.startsWith('var(')) return true

    // If it contains spaces, then it should be quoted
    if (part.includes(' ')) ***REMOVED***
      if (!/(['"])([^"']+)\1/g.test(part)) ***REMOVED***
        return false
  ***REMOVED***
***REMOVED***

    // If it starts with a number, it's invalid
    if (/^\d/g.test(part)) ***REMOVED***
      return false
***REMOVED***

    fonts++

    return true
***REMOVED***)

  if (!result) return false
  return fonts > 0
***REMOVED***

let genericNames = new Set([
  'serif',
  'sans-serif',
  'monospace',
  'cursive',
  'fantasy',
  'system-ui',
  'ui-serif',
  'ui-sans-serif',
  'ui-monospace',
  'ui-rounded',
  'math',
  'emoji',
  'fangsong',
])
export function genericName(value) ***REMOVED***
  return genericNames.has(value)
***REMOVED***

let absoluteSizes = new Set([
  'xx-small',
  'x-small',
  'small',
  'medium',
  'large',
  'x-large',
  'x-large',
  'xxx-large',
])
export function absoluteSize(value) ***REMOVED***
  return absoluteSizes.has(value)
***REMOVED***

let relativeSizes = new Set(['larger', 'smaller'])
export function relativeSize(value) ***REMOVED***
  return relativeSizes.has(value)
***REMOVED***
