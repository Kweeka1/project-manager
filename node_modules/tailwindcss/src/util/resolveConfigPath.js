import fs from 'fs'
import path from 'path'

function isObject(value) ***REMOVED***
  return typeof value === 'object' && value !== null
***REMOVED***

function isEmpty(obj) ***REMOVED***
  return Object.keys(obj).length === 0
***REMOVED***

function isString(value) ***REMOVED***
  return typeof value === 'string' || value instanceof String
***REMOVED***

export default function resolveConfigPath(pathOrConfig) ***REMOVED***
  // require('tailwindcss')(***REMOVED*** theme: ..., variants: ... ***REMOVED***)
  if (isObject(pathOrConfig) && pathOrConfig.config === undefined && !isEmpty(pathOrConfig)) ***REMOVED***
    return null
***REMOVED***

  // require('tailwindcss')(***REMOVED*** config: 'custom-config.js' ***REMOVED***)
  if (
    isObject(pathOrConfig) &&
    pathOrConfig.config !== undefined &&
    isString(pathOrConfig.config)
  ) ***REMOVED***
    return path.resolve(pathOrConfig.config)
***REMOVED***

  // require('tailwindcss')(***REMOVED*** config: ***REMOVED*** theme: ..., variants: ... ***REMOVED*** ***REMOVED***)
  if (
    isObject(pathOrConfig) &&
    pathOrConfig.config !== undefined &&
    isObject(pathOrConfig.config)
  ) ***REMOVED***
    return null
***REMOVED***

  // require('tailwindcss')('custom-config.js')
  if (isString(pathOrConfig)) ***REMOVED***
    return path.resolve(pathOrConfig)
***REMOVED***

  // require('tailwindcss')
  for (const configFile of ['./tailwind.config.js', './tailwind.config.cjs']) ***REMOVED***
    try ***REMOVED***
      const configPath = path.resolve(configFile)
      fs.accessSync(configPath)
      return configPath
***REMOVED*** catch (err) ***REMOVED******REMOVED***
***REMOVED***

  return null
***REMOVED***
