let comparisonMap = ***REMOVED***
  atrule: ['name', 'params'],
  rule: ['selector'],
***REMOVED***
let types = new Set(Object.keys(comparisonMap))

export default function collapseAdjacentRules() ***REMOVED***
  function collapseRulesIn(root) ***REMOVED***
    let currentRule = null
    root.each((node) => ***REMOVED***
      if (!types.has(node.type)) ***REMOVED***
        currentRule = null
        return
  ***REMOVED***

      if (currentRule === null) ***REMOVED***
        currentRule = node
        return
  ***REMOVED***

      let properties = comparisonMap[node.type]

      if (node.type === 'atrule' && node.name === 'font-face') ***REMOVED***
        currentRule = node
  ***REMOVED*** else if (
        properties.every(
          (property) =>
            (node[property] ?? '').replace(/\s+/g, ' ') ===
            (currentRule[property] ?? '').replace(/\s+/g, ' ')
        )
      ) ***REMOVED***
        currentRule.append(node.nodes)
        node.remove()
  ***REMOVED*** else ***REMOVED***
        currentRule = node
  ***REMOVED***
***REMOVED***)

    // After we've collapsed adjacent rules & at-rules, we need to collapse
    // adjacent rules & at-rules that are children of at-rules.
    // We do not care about nesting rules because Tailwind CSS
    // explicitly does not handle rule nesting on its own as
    // the user is expected to use a nesting plugin
    root.each((node) => ***REMOVED***
      if (node.type === 'atrule') ***REMOVED***
        collapseRulesIn(node)
  ***REMOVED***
***REMOVED***)
***REMOVED***

  return (root) => ***REMOVED***
    collapseRulesIn(root)
***REMOVED***
***REMOVED***
