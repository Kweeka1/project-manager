function partitionRules(root) ***REMOVED***
  if (!root.walkAtRules) return

  let applyParents = new Set()

  root.walkAtRules('apply', (rule) => ***REMOVED***
    applyParents.add(rule.parent)
***REMOVED***)

  if (applyParents.size === 0) ***REMOVED***
    return
***REMOVED***

  for (let rule of applyParents) ***REMOVED***
    let nodeGroups = []
    let lastGroup = []

    for (let node of rule.nodes) ***REMOVED***
      if (node.type === 'atrule' && node.name === 'apply') ***REMOVED***
        if (lastGroup.length > 0) ***REMOVED***
          nodeGroups.push(lastGroup)
          lastGroup = []
    ***REMOVED***
        nodeGroups.push([node])
  ***REMOVED*** else ***REMOVED***
        lastGroup.push(node)
  ***REMOVED***
***REMOVED***

    if (lastGroup.length > 0) ***REMOVED***
      nodeGroups.push(lastGroup)
***REMOVED***

    if (nodeGroups.length === 1) ***REMOVED***
      continue
***REMOVED***

    for (let group of [...nodeGroups].reverse()) ***REMOVED***
      let clone = rule.clone(***REMOVED*** nodes: [] ***REMOVED***)
      clone.append(group)
      rule.after(clone)
***REMOVED***

    rule.remove()
***REMOVED***
***REMOVED***

export default function expandApplyAtRules() ***REMOVED***
  return (root) => ***REMOVED***
    partitionRules(root)
***REMOVED***
***REMOVED***
