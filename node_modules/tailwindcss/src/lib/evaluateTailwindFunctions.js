import dlv from 'dlv'
import didYouMean from 'didyoumean'
import transformThemeValue from '../util/transformThemeValue'
import parseValue from 'postcss-value-parser'
import ***REMOVED*** normalizeScreens ***REMOVED*** from '../util/normalizeScreens'
import buildMediaQuery from '../util/buildMediaQuery'
import ***REMOVED*** toPath ***REMOVED*** from '../util/toPath'

function isObject(input) ***REMOVED***
  return typeof input === 'object' && input !== null
***REMOVED***

function findClosestExistingPath(theme, path) ***REMOVED***
  let parts = toPath(path)
  do ***REMOVED***
    parts.pop()

    if (dlv(theme, parts) !== undefined) break
***REMOVED*** while (parts.length)

  return parts.length ? parts : undefined
***REMOVED***

function pathToString(path) ***REMOVED***
  if (typeof path === 'string') return path
  return path.reduce((acc, cur, i) => ***REMOVED***
    if (cur.includes('.')) return `$***REMOVED***acc***REMOVED***[$***REMOVED***cur***REMOVED***]`
    return i === 0 ? cur : `$***REMOVED***acc***REMOVED***.$***REMOVED***cur***REMOVED***`
***REMOVED*** '')
***REMOVED***

function list(items) ***REMOVED***
  return items.map((key) => `'$***REMOVED***key***REMOVED***'`).join(', ')
***REMOVED***

function listKeys(obj) ***REMOVED***
  return list(Object.keys(obj))
***REMOVED***

function validatePath(config, path, defaultValue) ***REMOVED***
  const pathString = Array.isArray(path)
    ? pathToString(path)
    : path.replace(/^['"]+/g, '').replace(/['"]+$/g, '')
  const pathSegments = Array.isArray(path) ? path : toPath(pathString)
  const value = dlv(config.theme, pathSegments, defaultValue)

  if (value === undefined) ***REMOVED***
    let error = `'$***REMOVED***pathString***REMOVED***' does not exist in your theme config.`
    const parentSegments = pathSegments.slice(0, -1)
    const parentValue = dlv(config.theme, parentSegments)

    if (isObject(parentValue)) ***REMOVED***
      const validKeys = Object.keys(parentValue).filter(
        (key) => validatePath(config, [...parentSegments, key]).isValid
      )
      const suggestion = didYouMean(pathSegments[pathSegments.length - 1], validKeys)
      if (suggestion) ***REMOVED***
        error += ` Did you mean '$***REMOVED***pathToString([...parentSegments, suggestion])***REMOVED***'?`
  ***REMOVED*** else if (validKeys.length > 0) ***REMOVED***
        error += ` '$***REMOVED***pathToString(parentSegments)***REMOVED***' has the following valid keys: $***REMOVED***list(
          validKeys
        )***REMOVED***`
  ***REMOVED***
***REMOVED*** else ***REMOVED***
      const closestPath = findClosestExistingPath(config.theme, pathString)
      if (closestPath) ***REMOVED***
        const closestValue = dlv(config.theme, closestPath)
        if (isObject(closestValue)) ***REMOVED***
          error += ` '$***REMOVED***pathToString(closestPath)***REMOVED***' has the following keys: $***REMOVED***listKeys(
            closestValue
          )***REMOVED***`
    ***REMOVED*** else ***REMOVED***
          error += ` '$***REMOVED***pathToString(closestPath)***REMOVED***' is not an object.`
    ***REMOVED***
  ***REMOVED*** else ***REMOVED***
        error += ` Your theme has the following top-level keys: $***REMOVED***listKeys(config.theme)***REMOVED***`
  ***REMOVED***
***REMOVED***

    return ***REMOVED***
      isValid: false,
      error,
***REMOVED***
***REMOVED***

  if (
    !(
      typeof value === 'string' ||
      typeof value === 'number' ||
      typeof value === 'function' ||
      value instanceof String ||
      value instanceof Number ||
      Array.isArray(value)
    )
  ) ***REMOVED***
    let error = `'$***REMOVED***pathString***REMOVED***' was found but does not resolve to a string.`

    if (isObject(value)) ***REMOVED***
      let validKeys = Object.keys(value).filter(
        (key) => validatePath(config, [...pathSegments, key]).isValid
      )
      if (validKeys.length) ***REMOVED***
        error += ` Did you mean something like '$***REMOVED***pathToString([...pathSegments, validKeys[0]])***REMOVED***'?`
  ***REMOVED***
***REMOVED***

    return ***REMOVED***
      isValid: false,
      error,
***REMOVED***
***REMOVED***

  const [themeSection] = pathSegments

  return ***REMOVED***
    isValid: true,
    value: transformThemeValue(themeSection)(value),
***REMOVED***
***REMOVED***

function extractArgs(node, vNodes, functions) ***REMOVED***
  vNodes = vNodes.map((vNode) => resolveVNode(node, vNode, functions))

  let args = ['']

  for (let vNode of vNodes) ***REMOVED***
    if (vNode.type === 'div' && vNode.value === ',') ***REMOVED***
      args.push('')
***REMOVED*** else ***REMOVED***
      args[args.length - 1] += parseValue.stringify(vNode)
***REMOVED***
***REMOVED***

  return args
***REMOVED***

function resolveVNode(node, vNode, functions) ***REMOVED***
  if (vNode.type === 'function' && functions[vNode.value] !== undefined) ***REMOVED***
    let args = extractArgs(node, vNode.nodes, functions)
    vNode.type = 'word'
    vNode.value = functions[vNode.value](node, ...args)
***REMOVED***

  return vNode
***REMOVED***

function resolveFunctions(node, input, functions) ***REMOVED***
  return parseValue(input)
    .walk((vNode) => ***REMOVED***
      resolveVNode(node, vNode, functions)
***REMOVED***)
    .toString()
***REMOVED***

let nodeTypePropertyMap = ***REMOVED***
  atrule: 'params',
  decl: 'value',
***REMOVED***

export default function (***REMOVED*** tailwindConfig: config ***REMOVED***) ***REMOVED***
  let functions = ***REMOVED***
    theme: (node, path, ...defaultValue) => ***REMOVED***
      const ***REMOVED*** isValid, value, error ***REMOVED*** = validatePath(
        config,
        path,
        defaultValue.length ? defaultValue : undefined
      )

      if (!isValid) ***REMOVED***
        throw node.error(error)
  ***REMOVED***

      return value
***REMOVED***,
    screen: (node, screen) => ***REMOVED***
      screen = screen.replace(/^['"]+/g, '').replace(/['"]+$/g, '')
      let screens = normalizeScreens(config.theme.screens)
      let screenDefinition = screens.find((***REMOVED*** name ***REMOVED***) => name === screen)

      if (!screenDefinition) ***REMOVED***
        throw node.error(`The '$***REMOVED***screen***REMOVED***' screen does not exist in your theme.`)
  ***REMOVED***

      return buildMediaQuery(screenDefinition)
***REMOVED***,
***REMOVED***
  return (root) => ***REMOVED***
    root.walk((node) => ***REMOVED***
      let property = nodeTypePropertyMap[node.type]

      if (property === undefined) ***REMOVED***
        return
  ***REMOVED***

      node[property] = resolveFunctions(node, node[property], functions)
***REMOVED***)
***REMOVED***
***REMOVED***
