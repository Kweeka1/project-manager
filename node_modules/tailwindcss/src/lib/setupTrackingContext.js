import fs from 'fs'
import path from 'path'

import fastGlob from 'fast-glob'
import LRU from 'quick-lru'
import normalizePath from 'normalize-path'

import hash from '../util/hashConfig'
import getModuleDependencies from '../lib/getModuleDependencies'

import resolveConfig from '../public/resolve-config'

import resolveConfigPath from '../util/resolveConfigPath'

import ***REMOVED*** env ***REMOVED*** from './sharedState'

import ***REMOVED*** getContext, getFileModifiedMap ***REMOVED*** from './setupContextUtils'
import parseDependency from '../util/parseDependency'

let configPathCache = new LRU(***REMOVED*** maxSize: 100 ***REMOVED***)

let candidateFilesCache = new WeakMap()

function getCandidateFiles(context, tailwindConfig) ***REMOVED***
  if (candidateFilesCache.has(context)) ***REMOVED***
    return candidateFilesCache.get(context)
***REMOVED***

  let candidateFiles = tailwindConfig.content.files
    .filter((item) => typeof item === 'string')
    .map((contentPath) => normalizePath(contentPath))

  return candidateFilesCache.set(context, candidateFiles).get(context)
***REMOVED***

// Get the config object based on a path
function getTailwindConfig(configOrPath) ***REMOVED***
  let userConfigPath = resolveConfigPath(configOrPath)

  if (userConfigPath !== null) ***REMOVED***
    let [prevConfig, prevConfigHash, prevDeps, prevModified] =
      configPathCache.get(userConfigPath) || []

    let newDeps = getModuleDependencies(userConfigPath).map((dep) => dep.file)

    let modified = false
    let newModified = new Map()
    for (let file of newDeps) ***REMOVED***
      let time = fs.statSync(file).mtimeMs
      newModified.set(file, time)
      if (!prevModified || !prevModified.has(file) || time > prevModified.get(file)) ***REMOVED***
        modified = true
  ***REMOVED***
***REMOVED***

    // It hasn't changed (based on timestamps)
    if (!modified) ***REMOVED***
      return [prevConfig, userConfigPath, prevConfigHash, prevDeps]
***REMOVED***

    // It has changed (based on timestamps), or first run
    for (let file of newDeps) ***REMOVED***
      delete require.cache[file]
***REMOVED***
    let newConfig = resolveConfig(require(userConfigPath))
    let newHash = hash(newConfig)
    configPathCache.set(userConfigPath, [newConfig, newHash, newDeps, newModified])
    return [newConfig, userConfigPath, newHash, newDeps]
***REMOVED***

  // It's a plain object, not a path
  let newConfig = resolveConfig(
    configOrPath.config === undefined ? configOrPath : configOrPath.config
  )

  return [newConfig, null, hash(newConfig), []]
***REMOVED***

function resolvedChangedContent(context, candidateFiles, fileModifiedMap) ***REMOVED***
  let changedContent = context.tailwindConfig.content.files
    .filter((item) => typeof item.raw === 'string')
    .map((***REMOVED*** raw, extension = 'html' ***REMOVED***) => (***REMOVED*** content: raw, extension ***REMOVED***))

  for (let changedFile of resolveChangedFiles(candidateFiles, fileModifiedMap)) ***REMOVED***
    let content = fs.readFileSync(changedFile, 'utf8')
    let extension = path.extname(changedFile).slice(1)
    changedContent.push(***REMOVED*** content, extension ***REMOVED***)
***REMOVED***
  return changedContent
***REMOVED***

function resolveChangedFiles(candidateFiles, fileModifiedMap) ***REMOVED***
  let changedFiles = new Set()
  env.DEBUG && console.time('Finding changed files')
  let files = fastGlob.sync(candidateFiles)
  for (let file of files) ***REMOVED***
    let prevModified = fileModifiedMap.has(file) ? fileModifiedMap.get(file) : -Infinity
    let modified = fs.statSync(file).mtimeMs

    if (modified > prevModified) ***REMOVED***
      changedFiles.add(file)
      fileModifiedMap.set(file, modified)
***REMOVED***
***REMOVED***
  env.DEBUG && console.timeEnd('Finding changed files')
  return changedFiles
***REMOVED***

// DISABLE_TOUCH = TRUE

// Retrieve an existing context from cache if possible (since contexts are unique per
// source path), or set up a new one (including setting up watchers and registering
// plugins) then return it
export default function setupTrackingContext(configOrPath) ***REMOVED***
  return (***REMOVED*** tailwindDirectives, registerDependency ***REMOVED***) => ***REMOVED***
    return (root, result) => ***REMOVED***
      let [tailwindConfig, userConfigPath, tailwindConfigHash, configDependencies] =
        getTailwindConfig(configOrPath)

      let contextDependencies = new Set(configDependencies)

      // If there are no @tailwind or @apply rules, we don't consider this CSS
      // file or its dependencies to be dependencies of the context. Can reuse
      // the context even if they change. We may want to think about `@layer`
      // being part of this trigger too, but it's tough because it's impossible
      // for a layer in one file to end up in the actual @tailwind rule in
      // another file since independent sources are effectively isolated.
      if (tailwindDirectives.size > 0) ***REMOVED***
        // Add current css file as a context dependencies.
        contextDependencies.add(result.opts.from)

        // Add all css @import dependencies as context dependencies.
        for (let message of result.messages) ***REMOVED***
          if (message.type === 'dependency') ***REMOVED***
            contextDependencies.add(message.file)
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***

      let [context] = getContext(
        root,
        result,
        tailwindConfig,
        userConfigPath,
        tailwindConfigHash,
        contextDependencies
      )

      let candidateFiles = getCandidateFiles(context, tailwindConfig)

      // If there are no @tailwind or @apply rules, we don't consider this CSS file or it's
      // dependencies to be dependencies of the context. Can reuse the context even if they change.
      // We may want to think about `@layer` being part of this trigger too, but it's tough
      // because it's impossible for a layer in one file to end up in the actual @tailwind rule
      // in another file since independent sources are effectively isolated.
      if (tailwindDirectives.size > 0) ***REMOVED***
        let fileModifiedMap = getFileModifiedMap(context)

        // Add template paths as postcss dependencies.
        for (let fileOrGlob of candidateFiles) ***REMOVED***
          let dependency = parseDependency(fileOrGlob)
          if (dependency) ***REMOVED***
            registerDependency(dependency)
      ***REMOVED***
    ***REMOVED***

        for (let changedContent of resolvedChangedContent(
          context,
          candidateFiles,
          fileModifiedMap
        )) ***REMOVED***
          context.changedContent.push(changedContent)
    ***REMOVED***
  ***REMOVED***

      for (let file of configDependencies) ***REMOVED***
        registerDependency(***REMOVED*** type: 'dependency', file ***REMOVED***)
  ***REMOVED***

      return context
***REMOVED***
***REMOVED***
***REMOVED***
