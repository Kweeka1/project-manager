import postcss from 'postcss'
import selectorParser from 'postcss-selector-parser'
import ***REMOVED*** flagEnabled ***REMOVED*** from '../featureFlags'

let getNode = ***REMOVED***
  id(node) ***REMOVED***
    return selectorParser.attribute(***REMOVED***
      attribute: 'id',
      operator: '=',
      value: node.value,
      quoteMark: '"',
***REMOVED***)
***REMOVED***
***REMOVED***

function minimumImpactSelector(nodes) ***REMOVED***
  let rest = nodes
    .filter((node) => ***REMOVED***
      // Keep non-pseudo nodes
      if (node.type !== 'pseudo') return true

      // Keep pseudo nodes that have subnodes
      // E.g.: `:not()` contains subnodes inside the parentheses
      if (node.nodes.length > 0) return true

      // Keep pseudo `elements`
      // This implicitly means that we ignore pseudo `classes`
      return (
        node.value.startsWith('::') ||
        [':before', ':after', ':first-line', ':first-letter'].includes(node.value)
      )
***REMOVED***)
    .reverse()

  let searchFor = new Set(['tag', 'class', 'id', 'attribute'])

  let splitPointIdx = rest.findIndex((n) => searchFor.has(n.type))
  if (splitPointIdx === -1) return rest.reverse().join('').trim()

  let node = rest[splitPointIdx]
  let bestNode = getNode[node.type] ? getNode[node.type](node) : node

  rest = rest.slice(0, splitPointIdx)

  let combinatorIdx = rest.findIndex((n) => n.type === 'combinator' && n.value === '>')
  if (combinatorIdx !== -1) ***REMOVED***
    rest.splice(0, combinatorIdx)
    rest.unshift(selectorParser.universal())
***REMOVED***

  return [bestNode, ...rest.reverse()].join('').trim()
***REMOVED***

export let elementSelectorParser = selectorParser((selectors) => ***REMOVED***
  return selectors.map((s) => ***REMOVED***
    let nodes = s.split((n) => n.type === 'combinator' && n.value === ' ').pop()
    return minimumImpactSelector(nodes)
***REMOVED***)
***REMOVED***)

let cache = new Map()

function extractElementSelector(selector) ***REMOVED***
  if (!cache.has(selector)) ***REMOVED***
    cache.set(selector, elementSelectorParser.transformSync(selector))
***REMOVED***

  return cache.get(selector)
***REMOVED***

export default function resolveDefaultsAtRules(***REMOVED*** tailwindConfig ***REMOVED***) ***REMOVED***
  return (root) => ***REMOVED***
    let variableNodeMap = new Map()

    /** @type ***REMOVED***Set<import('postcss').AtRule>***REMOVED*** */
    let universals = new Set()

    root.walkAtRules('defaults', (rule) => ***REMOVED***
      if (rule.nodes && rule.nodes.length > 0) ***REMOVED***
        universals.add(rule)
        return
  ***REMOVED***

      let variable = rule.params
      if (!variableNodeMap.has(variable)) ***REMOVED***
        variableNodeMap.set(variable, new Set())
  ***REMOVED***

      variableNodeMap.get(variable).add(rule.parent)

      rule.remove()
***REMOVED***)

    for (let universal of universals) ***REMOVED***
      /** @type ***REMOVED***Map<string, Set<string>>***REMOVED*** */
      let selectorGroups = new Map()

      let rules = variableNodeMap.get(universal.params) ?? []

      for (let rule of rules) ***REMOVED***
        for (let selector of extractElementSelector(rule.selector)) ***REMOVED***
          // If selector contains a vendor prefix after a pseudo element or class,
          // we consider them separately because merging the declarations into
          // a single rule will cause browsers that do not understand the
          // vendor prefix to throw out the whole rule
          let selectorGroupName =
            selector.includes(':-') || selector.includes('::-') ? selector : '__DEFAULT__'

          let selectors = selectorGroups.get(selectorGroupName) ?? new Set()
          selectorGroups.set(selectorGroupName, selectors)

          selectors.add(selector)
    ***REMOVED***
  ***REMOVED***

      if (flagEnabled(tailwindConfig, 'optimizeUniversalDefaults')) ***REMOVED***
        if (selectorGroups.size === 0) ***REMOVED***
          universal.remove()
          continue
    ***REMOVED***

        for (let [, selectors] of selectorGroups) ***REMOVED***
          let universalRule = postcss.rule(***REMOVED***
            source: universal.source,
      ***REMOVED***)

          universalRule.selectors = [...selectors]

          universalRule.append(universal.nodes.map((node) => node.clone()))
          universal.before(universalRule)
    ***REMOVED***
  ***REMOVED*** else ***REMOVED***
        let universalRule = postcss.rule(***REMOVED***
          source: universal.source,
    ***REMOVED***)

        universalRule.selectors = ['*', '::before', '::after']

        universalRule.append(universal.nodes)
        universal.before(universalRule)
  ***REMOVED***

      universal.remove()
***REMOVED***
***REMOVED***
***REMOVED***
