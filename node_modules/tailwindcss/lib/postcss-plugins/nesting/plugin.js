"use strict";
Object.defineProperty(exports, "__esModule", ***REMOVED***
    value: true
***REMOVED***);
exports.nesting = nesting;
var _postcss = _interopRequireDefault(require("postcss"));
var _postcssNested = _interopRequireDefault(require("postcss-nested"));
function _interopRequireDefault(obj) ***REMOVED***
    return obj && obj.__esModule ? obj : ***REMOVED***
        default: obj
***REMOVED***;
***REMOVED***
function nesting(opts = _postcssNested.default) ***REMOVED***
    return (root, result)=>***REMOVED***
        root.walkAtRules("screen", (rule)=>***REMOVED***
            rule.name = "media";
            rule.params = `screen($***REMOVED***rule.params***REMOVED***)`;
    ***REMOVED***);
        root.walkAtRules("apply", (rule)=>***REMOVED***
            rule.before(_postcss.default.decl(***REMOVED***
                prop: "__apply",
                value: rule.params,
                source: rule.source
        ***REMOVED***));
            rule.remove();
    ***REMOVED***);
        let plugin = (()=>***REMOVED***
            var ref;
            if (typeof opts === "function" || typeof opts === "object" && (opts === null || opts === void 0 ? void 0 : (ref = opts.hasOwnProperty) === null || ref === void 0 ? void 0 : ref.call(opts, "postcssPlugin"))) ***REMOVED***
                return opts;
        ***REMOVED***
            if (typeof opts === "string") ***REMOVED***
                return require(opts);
        ***REMOVED***
            if (Object.keys(opts).length <= 0) ***REMOVED***
                return _postcssNested.default;
        ***REMOVED***
            throw new Error("tailwindcss/nesting should be loaded with a nesting plugin.");
    ***REMOVED***)();
        (0, _postcss).default([
            plugin
        ]).process(root, result.opts).sync();
        root.walkDecls("__apply", (decl)=>***REMOVED***
            decl.before(_postcss.default.atRule(***REMOVED***
                name: "apply",
                params: decl.value,
                source: decl.source
        ***REMOVED***));
            decl.remove();
    ***REMOVED***);
        /**
     * Use a private PostCSS API to remove the "clean" flag from the entire AST.
     * This is done because running process() on the AST will set the "clean"
     * flag on all nodes, which we don't want.
     *
     * This causes downstream plugins using the visitor API to be skipped.
     *
     * This is guarded because the PostCSS API is not public
     * and may change in future versions of PostCSS.
     *
     * See https://github.com/postcss/postcss/issues/1712 for more details
     *
     * @param ***REMOVED***import('postcss').Node***REMOVED*** node
     */ function markDirty(node) ***REMOVED***
            if (!("markDirty" in node)) ***REMOVED***
                return;
        ***REMOVED***
            // Traverse the tree down to the leaf nodes
            if (node.nodes) ***REMOVED***
                node.nodes.forEach((n)=>markDirty(n)
                );
        ***REMOVED***
            // If it's a leaf node mark it as dirty
            // We do this here because marking a node as dirty
            // will walk up the tree and mark all parents as dirty
            // resulting in a lot of unnecessary work if we did this
            // for every single node
            if (!node.nodes) ***REMOVED***
                node.markDirty();
        ***REMOVED***
    ***REMOVED***
        markDirty(root);
        return root;
***REMOVED***;
***REMOVED***
