"use strict";
Object.defineProperty(exports, "__esModule", ***REMOVED***
    value: true
***REMOVED***);
exports.hasContentChanged = hasContentChanged;
var _crypto = _interopRequireDefault(require("crypto"));
var sharedState = _interopRequireWildcard(require("./sharedState"));
function _interopRequireDefault(obj) ***REMOVED***
    return obj && obj.__esModule ? obj : ***REMOVED***
        default: obj
***REMOVED***;
***REMOVED***
function _interopRequireWildcard(obj) ***REMOVED***
    if (obj && obj.__esModule) ***REMOVED***
        return obj;
***REMOVED*** else ***REMOVED***
        var newObj = ***REMOVED******REMOVED***;
        if (obj != null) ***REMOVED***
            for(var key in obj)***REMOVED***
                if (Object.prototype.hasOwnProperty.call(obj, key)) ***REMOVED***
                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : ***REMOVED******REMOVED***;
                    if (desc.get || desc.set) ***REMOVED***
                        Object.defineProperty(newObj, key, desc);
                ***REMOVED*** else ***REMOVED***
                        newObj[key] = obj[key];
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***
        newObj.default = obj;
        return newObj;
***REMOVED***
***REMOVED***
/**
 * Calculate the hash of a string.
 *
 * This doesn't need to be cryptographically secure or
 * anything like that since it's used only to detect
 * when the CSS changes to invalidate the context.
 *
 * This is wrapped in a try/catch because it's really dependent
 * on how Node itself is build and the environment and OpenSSL
 * version / build that is installed on the user's machine.
 *
 * Based on the environment this can just outright fail.
 *
 * See https://github.com/nodejs/node/issues/40455
 *
 * @param ***REMOVED***string***REMOVED*** str
 */ function getHash(str) ***REMOVED***
    try ***REMOVED***
        return _crypto.default.createHash("md5").update(str, "utf-8").digest("binary");
***REMOVED*** catch (err) ***REMOVED***
        return "";
***REMOVED***
***REMOVED***
function hasContentChanged(sourcePath, root) ***REMOVED***
    let css = root.toString();
    // We only care about files with @tailwind directives
    // Other files use an existing context
    if (!css.includes("@tailwind")) ***REMOVED***
        return false;
***REMOVED***
    let existingHash = sharedState.sourceHashMap.get(sourcePath);
    let rootHash = getHash(css);
    let didChange = existingHash !== rootHash;
    sharedState.sourceHashMap.set(sourcePath, rootHash);
    return didChange;
***REMOVED***
