"use strict";
Object.defineProperty(exports, "__esModule", ***REMOVED***
    value: true
***REMOVED***);
exports.default = normalizeTailwindDirectives;
var _log = _interopRequireDefault(require("../util/log"));
function normalizeTailwindDirectives(root) ***REMOVED***
    let tailwindDirectives = new Set();
    let layerDirectives = new Set();
    let applyDirectives = new Set();
    root.walkAtRules((atRule)=>***REMOVED***
        if (atRule.name === "apply") ***REMOVED***
            applyDirectives.add(atRule);
    ***REMOVED***
        if (atRule.name === "import") ***REMOVED***
            if (atRule.params === '"tailwindcss/base"' || atRule.params === "'tailwindcss/base'") ***REMOVED***
                atRule.name = "tailwind";
                atRule.params = "base";
        ***REMOVED*** else if (atRule.params === '"tailwindcss/components"' || atRule.params === "'tailwindcss/components'") ***REMOVED***
                atRule.name = "tailwind";
                atRule.params = "components";
        ***REMOVED*** else if (atRule.params === '"tailwindcss/utilities"' || atRule.params === "'tailwindcss/utilities'") ***REMOVED***
                atRule.name = "tailwind";
                atRule.params = "utilities";
        ***REMOVED*** else if (atRule.params === '"tailwindcss/screens"' || atRule.params === "'tailwindcss/screens'" || atRule.params === '"tailwindcss/variants"' || atRule.params === "'tailwindcss/variants'") ***REMOVED***
                atRule.name = "tailwind";
                atRule.params = "variants";
        ***REMOVED***
    ***REMOVED***
        if (atRule.name === "tailwind") ***REMOVED***
            if (atRule.params === "screens") ***REMOVED***
                atRule.params = "variants";
        ***REMOVED***
            tailwindDirectives.add(atRule.params);
    ***REMOVED***
        if ([
            "layer",
            "responsive",
            "variants"
        ].includes(atRule.name)) ***REMOVED***
            if ([
                "responsive",
                "variants"
            ].includes(atRule.name)) ***REMOVED***
                _log.default.warn(`$***REMOVED***atRule.name***REMOVED***-at-rule-deprecated`, [
                    `The \`@$***REMOVED***atRule.name***REMOVED***\` directive has been deprecated in Tailwind CSS v3.0.`,
                    `Use \`@layer utilities\` or \`@layer components\` instead.`,
                    "https://tailwindcss.com/docs/upgrade-guide#replace-variants-with-layer", 
                ]);
        ***REMOVED***
            layerDirectives.add(atRule);
    ***REMOVED***
***REMOVED***);
    if (!tailwindDirectives.has("base") || !tailwindDirectives.has("components") || !tailwindDirectives.has("utilities")) ***REMOVED***
        for (let rule of layerDirectives)***REMOVED***
            if (rule.name === "layer" && [
                "base",
                "components",
                "utilities"
            ].includes(rule.params)) ***REMOVED***
                if (!tailwindDirectives.has(rule.params)) ***REMOVED***
                    throw rule.error(`\`@layer $***REMOVED***rule.params***REMOVED***\` is used but no matching \`@tailwind $***REMOVED***rule.params***REMOVED***\` directive is present.`);
            ***REMOVED***
        ***REMOVED*** else if (rule.name === "responsive") ***REMOVED***
                if (!tailwindDirectives.has("utilities")) ***REMOVED***
                    throw rule.error("`@responsive` is used but `@tailwind utilities` is missing.");
            ***REMOVED***
        ***REMOVED*** else if (rule.name === "variants") ***REMOVED***
                if (!tailwindDirectives.has("utilities")) ***REMOVED***
                    throw rule.error("`@variants` is used but `@tailwind utilities` is missing.");
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***
***REMOVED***
    return ***REMOVED***
        tailwindDirectives,
        applyDirectives
***REMOVED***;
***REMOVED***
function _interopRequireDefault(obj) ***REMOVED***
    return obj && obj.__esModule ? obj : ***REMOVED***
        default: obj
***REMOVED***;
***REMOVED***
