"use strict";
Object.defineProperty(exports, "__esModule", ***REMOVED***
    value: true
***REMOVED***);
exports.normalizeConfig = normalizeConfig;
var _log = _interopRequireWildcard(require("./log"));
function _interopRequireWildcard(obj) ***REMOVED***
    if (obj && obj.__esModule) ***REMOVED***
        return obj;
***REMOVED*** else ***REMOVED***
        var newObj = ***REMOVED******REMOVED***;
        if (obj != null) ***REMOVED***
            for(var key in obj)***REMOVED***
                if (Object.prototype.hasOwnProperty.call(obj, key)) ***REMOVED***
                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : ***REMOVED******REMOVED***;
                    if (desc.get || desc.set) ***REMOVED***
                        Object.defineProperty(newObj, key, desc);
                ***REMOVED*** else ***REMOVED***
                        newObj[key] = obj[key];
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***
        newObj.default = obj;
        return newObj;
***REMOVED***
***REMOVED***
function normalizeConfig(config) ***REMOVED***
    // Quick structure validation
    /**
   * type FilePath = string
   * type RawFile = ***REMOVED*** raw: string, extension?: string ***REMOVED***
   * type ExtractorFn = (content: string) => Array<string>
   * type TransformerFn = (content: string) => string
   *
   * type Content =
   *   | Array<FilePath | RawFile>
   *   | ***REMOVED***
   *       files: Array<FilePath | RawFile>,
   *       extract?: ExtractorFn | ***REMOVED*** [extension: string]: ExtractorFn ***REMOVED***
   *       transform?: TransformerFn | ***REMOVED*** [extension: string]: TransformerFn ***REMOVED***
   * ***REMOVED***
   */ let valid = (()=>***REMOVED***
        // `config.purge` should not exist anymore
        if (config.purge) ***REMOVED***
            return false;
    ***REMOVED***
        // `config.content` should exist
        if (!config.content) ***REMOVED***
            return false;
    ***REMOVED***
        // `config.content` should be an object or an array
        if (!Array.isArray(config.content) && !(typeof config.content === "object" && config.content !== null)) ***REMOVED***
            return false;
    ***REMOVED***
        // When `config.content` is an array, it should consist of FilePaths or RawFiles
        if (Array.isArray(config.content)) ***REMOVED***
            return config.content.every((path)=>***REMOVED***
                // `path` can be a string
                if (typeof path === "string") return true;
                // `path` can be an object ***REMOVED*** raw: string, extension?: string ***REMOVED***
                // `raw` must be a string
                if (typeof (path === null || path === void 0 ? void 0 : path.raw) !== "string") return false;
                // `extension` (if provided) should also be a string
                if ((path === null || path === void 0 ? void 0 : path.extension) && typeof (path === null || path === void 0 ? void 0 : path.extension) !== "string") ***REMOVED***
                    return false;
            ***REMOVED***
                return true;
        ***REMOVED***);
    ***REMOVED***
        // When `config.content` is an object
        if (typeof config.content === "object" && config.content !== null) ***REMOVED***
            // Only `files`, `extract` and `transform` can exist in `config.content`
            if (Object.keys(config.content).some((key)=>![
                    "files",
                    "extract",
                    "transform"
                ].includes(key)
            )) ***REMOVED***
                return false;
        ***REMOVED***
            // `config.content.files` should exist of FilePaths or RawFiles
            if (Array.isArray(config.content.files)) ***REMOVED***
                if (!config.content.files.every((path)=>***REMOVED***
                    // `path` can be a string
                    if (typeof path === "string") return true;
                    // `path` can be an object ***REMOVED*** raw: string, extension?: string ***REMOVED***
                    // `raw` must be a string
                    if (typeof (path === null || path === void 0 ? void 0 : path.raw) !== "string") return false;
                    // `extension` (if provided) should also be a string
                    if ((path === null || path === void 0 ? void 0 : path.extension) && typeof (path === null || path === void 0 ? void 0 : path.extension) !== "string") ***REMOVED***
                        return false;
                ***REMOVED***
                    return true;
            ***REMOVED***)) ***REMOVED***
                    return false;
            ***REMOVED***
                // `config.content.extract` is optional, and can be a Function or a Record<String, Function>
                if (typeof config.content.extract === "object") ***REMOVED***
                    for (let value of Object.values(config.content.extract))***REMOVED***
                        if (typeof value !== "function") ***REMOVED***
                            return false;
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED*** else if (!(config.content.extract === undefined || typeof config.content.extract === "function")) ***REMOVED***
                    return false;
            ***REMOVED***
                // `config.content.transform` is optional, and can be a Function or a Record<String, Function>
                if (typeof config.content.transform === "object") ***REMOVED***
                    for (let value of Object.values(config.content.transform))***REMOVED***
                        if (typeof value !== "function") ***REMOVED***
                            return false;
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED*** else if (!(config.content.transform === undefined || typeof config.content.transform === "function")) ***REMOVED***
                    return false;
            ***REMOVED***
        ***REMOVED***
            return true;
    ***REMOVED***
        return false;
***REMOVED***)();
    if (!valid) ***REMOVED***
        _log.default.warn("purge-deprecation", [
            "The `purge`/`content` options have changed in Tailwind CSS v3.0.",
            "Update your configuration file to eliminate this warning.",
            "https://tailwindcss.com/docs/upgrade-guide#configure-content-sources", 
        ]);
***REMOVED***
    // Normalize the `safelist`
    config.safelist = (()=>***REMOVED***
        var ref;
        let ***REMOVED*** content , purge , safelist***REMOVED*** = config;
        if (Array.isArray(safelist)) return safelist;
        if (Array.isArray(content === null || content === void 0 ? void 0 : content.safelist)) return content.safelist;
        if (Array.isArray(purge === null || purge === void 0 ? void 0 : purge.safelist)) return purge.safelist;
        if (Array.isArray(purge === null || purge === void 0 ? void 0 : (ref = purge.options) === null || ref === void 0 ? void 0 : ref.safelist)) return purge.options.safelist;
        return [];
***REMOVED***)();
    // Normalize prefix option
    if (typeof config.prefix === "function") ***REMOVED***
        _log.default.warn("prefix-function", [
            "As of Tailwind CSS v3.0, `prefix` cannot be a function.",
            "Update `prefix` in your configuration to be a string to eliminate this warning.",
            "https://tailwindcss.com/docs/upgrade-guide#prefix-cannot-be-a-function", 
        ]);
        config.prefix = "";
***REMOVED*** else ***REMOVED***
        var _prefix;
        config.prefix = (_prefix = config.prefix) !== null && _prefix !== void 0 ? _prefix : "";
***REMOVED***
    // Normalize the `content`
    config.content = ***REMOVED***
        files: (()=>***REMOVED***
            let ***REMOVED*** content , purge***REMOVED*** = config;
            if (Array.isArray(purge)) return purge;
            if (Array.isArray(purge === null || purge === void 0 ? void 0 : purge.content)) return purge.content;
            if (Array.isArray(content)) return content;
            if (Array.isArray(content === null || content === void 0 ? void 0 : content.content)) return content.content;
            if (Array.isArray(content === null || content === void 0 ? void 0 : content.files)) return content.files;
            return [];
    ***REMOVED***)(),
        extract: (()=>***REMOVED***
            let extract = (()=>***REMOVED***
                var ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;
                if ((ref = config.purge) === null || ref === void 0 ? void 0 : ref.extract) return config.purge.extract;
                if ((ref1 = config.content) === null || ref1 === void 0 ? void 0 : ref1.extract) return config.content.extract;
                if ((ref2 = config.purge) === null || ref2 === void 0 ? void 0 : (ref3 = ref2.extract) === null || ref3 === void 0 ? void 0 : ref3.DEFAULT) return config.purge.extract.DEFAULT;
                if ((ref4 = config.content) === null || ref4 === void 0 ? void 0 : (ref5 = ref4.extract) === null || ref5 === void 0 ? void 0 : ref5.DEFAULT) return config.content.extract.DEFAULT;
                if ((ref6 = config.purge) === null || ref6 === void 0 ? void 0 : (ref7 = ref6.options) === null || ref7 === void 0 ? void 0 : ref7.extractors) return config.purge.options.extractors;
                if ((ref8 = config.content) === null || ref8 === void 0 ? void 0 : (ref9 = ref8.options) === null || ref9 === void 0 ? void 0 : ref9.extractors) return config.content.options.extractors;
                return ***REMOVED******REMOVED***;
        ***REMOVED***)();
            let extractors = ***REMOVED******REMOVED***;
            let defaultExtractor = (()=>***REMOVED***
                var ref, ref10, ref11, ref12;
                if ((ref = config.purge) === null || ref === void 0 ? void 0 : (ref10 = ref.options) === null || ref10 === void 0 ? void 0 : ref10.defaultExtractor) ***REMOVED***
                    return config.purge.options.defaultExtractor;
            ***REMOVED***
                if ((ref11 = config.content) === null || ref11 === void 0 ? void 0 : (ref12 = ref11.options) === null || ref12 === void 0 ? void 0 : ref12.defaultExtractor) ***REMOVED***
                    return config.content.options.defaultExtractor;
            ***REMOVED***
                return undefined;
        ***REMOVED***)();
            if (defaultExtractor !== undefined) ***REMOVED***
                extractors.DEFAULT = defaultExtractor;
        ***REMOVED***
            // Functions
            if (typeof extract === "function") ***REMOVED***
                extractors.DEFAULT = extract;
        ***REMOVED*** else if (Array.isArray(extract)) ***REMOVED***
                for (let ***REMOVED*** extensions , extractor***REMOVED*** of extract !== null && extract !== void 0 ? extract : [])***REMOVED***
                    for (let extension of extensions)***REMOVED***
                        extractors[extension] = extractor;
                ***REMOVED***
            ***REMOVED***
        ***REMOVED*** else if (typeof extract === "object" && extract !== null) ***REMOVED***
                Object.assign(extractors, extract);
        ***REMOVED***
            return extractors;
    ***REMOVED***)(),
        transform: (()=>***REMOVED***
            let transform = (()=>***REMOVED***
                var ref, ref13, ref14, ref15, ref16, ref17;
                if ((ref = config.purge) === null || ref === void 0 ? void 0 : ref.transform) return config.purge.transform;
                if ((ref13 = config.content) === null || ref13 === void 0 ? void 0 : ref13.transform) return config.content.transform;
                if ((ref14 = config.purge) === null || ref14 === void 0 ? void 0 : (ref15 = ref14.transform) === null || ref15 === void 0 ? void 0 : ref15.DEFAULT) return config.purge.transform.DEFAULT;
                if ((ref16 = config.content) === null || ref16 === void 0 ? void 0 : (ref17 = ref16.transform) === null || ref17 === void 0 ? void 0 : ref17.DEFAULT) return config.content.transform.DEFAULT;
                return ***REMOVED******REMOVED***;
        ***REMOVED***)();
            let transformers = ***REMOVED******REMOVED***;
            if (typeof transform === "function") ***REMOVED***
                transformers.DEFAULT = transform;
        ***REMOVED***
            if (typeof transform === "object" && transform !== null) ***REMOVED***
                Object.assign(transformers, transform);
        ***REMOVED***
            return transformers;
    ***REMOVED***)()
***REMOVED***;
    // Validate globs to prevent bogus globs.
    // E.g.: `./src/*.***REMOVED***html***REMOVED***` is invalid, the `***REMOVED***html***REMOVED***` should just be `html`
    for (let file of config.content.files)***REMOVED***
        if (typeof file === "string" && /***REMOVED***([^,]*?)***REMOVED***/g.test(file)) ***REMOVED***
            _log.default.warn("invalid-glob-braces", [
                `The glob pattern $***REMOVED***(0, _log).dim(file)***REMOVED*** in your Tailwind CSS configuration is invalid.`,
                `Update it to $***REMOVED***(0, _log).dim(file.replace(/***REMOVED***([^,]*?)***REMOVED***/g, "$1"))***REMOVED*** to silence this warning.`
            ]);
            break;
    ***REMOVED***
***REMOVED***
    if (config.content.files.length === 0) ***REMOVED***
        _log.default.warn("content-problems", [
            "The `content` option in your Tailwind CSS configuration is missing or empty.",
            "Configure your content sources or your generated CSS will be missing styles.",
            "https://tailwindcss.com/docs/content-configuration", 
        ]);
***REMOVED***
    return config;
***REMOVED***
