"use strict";
Object.defineProperty(exports, "__esModule", ***REMOVED***
    value: true
***REMOVED***);
exports.default = parseAnimationValue;
function parseAnimationValue(input) ***REMOVED***
    let animations = input.split(COMMA);
    return animations.map((animation)=>***REMOVED***
        let value = animation.trim();
        let result = ***REMOVED***
            value
    ***REMOVED***;
        let parts = value.split(SPACE);
        let seen = new Set();
        for (let part of parts)***REMOVED***
            if (!seen.has("DIRECTIONS") && DIRECTIONS.has(part)) ***REMOVED***
                result.direction = part;
                seen.add("DIRECTIONS");
        ***REMOVED*** else if (!seen.has("PLAY_STATES") && PLAY_STATES.has(part)) ***REMOVED***
                result.playState = part;
                seen.add("PLAY_STATES");
        ***REMOVED*** else if (!seen.has("FILL_MODES") && FILL_MODES.has(part)) ***REMOVED***
                result.fillMode = part;
                seen.add("FILL_MODES");
        ***REMOVED*** else if (!seen.has("ITERATION_COUNTS") && (ITERATION_COUNTS.has(part) || DIGIT.test(part))) ***REMOVED***
                result.iterationCount = part;
                seen.add("ITERATION_COUNTS");
        ***REMOVED*** else if (!seen.has("TIMING_FUNCTION") && TIMINGS.has(part)) ***REMOVED***
                result.timingFunction = part;
                seen.add("TIMING_FUNCTION");
        ***REMOVED*** else if (!seen.has("TIMING_FUNCTION") && TIMING_FNS.some((f)=>part.startsWith(`$***REMOVED***f***REMOVED***(`)
            )) ***REMOVED***
                result.timingFunction = part;
                seen.add("TIMING_FUNCTION");
        ***REMOVED*** else if (!seen.has("DURATION") && TIME.test(part)) ***REMOVED***
                result.duration = part;
                seen.add("DURATION");
        ***REMOVED*** else if (!seen.has("DELAY") && TIME.test(part)) ***REMOVED***
                result.delay = part;
                seen.add("DELAY");
        ***REMOVED*** else if (!seen.has("NAME")) ***REMOVED***
                result.name = part;
                seen.add("NAME");
        ***REMOVED*** else ***REMOVED***
                if (!result.unknown) result.unknown = [];
                result.unknown.push(part);
        ***REMOVED***
    ***REMOVED***
        return result;
***REMOVED***);
***REMOVED***
const DIRECTIONS = new Set([
    "normal",
    "reverse",
    "alternate",
    "alternate-reverse"
]);
const PLAY_STATES = new Set([
    "running",
    "paused"
]);
const FILL_MODES = new Set([
    "none",
    "forwards",
    "backwards",
    "both"
]);
const ITERATION_COUNTS = new Set([
    "infinite"
]);
const TIMINGS = new Set([
    "linear",
    "ease",
    "ease-in",
    "ease-out",
    "ease-in-out",
    "step-start",
    "step-end", 
]);
const TIMING_FNS = [
    "cubic-bezier",
    "steps"
];
const COMMA = /\,(?![^(]*\))/g // Comma separator that is not located between brackets. E.g.: `cubiz-bezier(a, b, c)` these don't count.
;
const SPACE = /\ +(?![^(]*\))/g // Similar to the one above, but with spaces instead.
;
const TIME = /^(-?[\d.]+m?s)$/;
const DIGIT = /^(\d+)$/;
