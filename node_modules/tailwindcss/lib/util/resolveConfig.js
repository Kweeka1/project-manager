"use strict";
Object.defineProperty(exports, "__esModule", ***REMOVED***
    value: true
***REMOVED***);
exports.default = resolveConfig;
var _negateValue = _interopRequireDefault(require("./negateValue"));
var _corePluginList = _interopRequireDefault(require("../corePluginList"));
var _configurePlugins = _interopRequireDefault(require("./configurePlugins"));
var _defaultConfigStub = _interopRequireDefault(require("../../stubs/defaultConfig.stub"));
var _colors = _interopRequireDefault(require("../public/colors"));
var _defaults = require("./defaults");
var _toPath = require("./toPath");
var _normalizeConfig = require("./normalizeConfig");
var _isPlainObject = _interopRequireDefault(require("./isPlainObject"));
var _cloneDeep = require("./cloneDeep");
function resolveConfig(configs) ***REMOVED***
    let allConfigs = [
        ...extractPluginConfigs(configs),
        ***REMOVED***
            prefix: "",
            important: false,
            separator: ":",
            variantOrder: _defaultConfigStub.default.variantOrder
    ***REMOVED***, 
    ];
    var ref, ref1;
    return (0, _normalizeConfig).normalizeConfig((0, _defaults).defaults(***REMOVED***
        theme: resolveFunctionKeys(mergeExtensions(mergeThemes(allConfigs.map((t)=>***REMOVED***
            return (ref = t === null || t === void 0 ? void 0 : t.theme) !== null && ref !== void 0 ? ref : ***REMOVED******REMOVED***;
    ***REMOVED***)))),
        corePlugins: resolveCorePlugins(allConfigs.map((c)=>c.corePlugins
        )),
        plugins: resolvePluginLists(configs.map((c)=>***REMOVED***
            return (ref1 = c === null || c === void 0 ? void 0 : c.plugins) !== null && ref1 !== void 0 ? ref1 : [];
    ***REMOVED***))
***REMOVED***, ...allConfigs));
***REMOVED***
function _interopRequireDefault(obj) ***REMOVED***
    return obj && obj.__esModule ? obj : ***REMOVED***
        default: obj
***REMOVED***;
***REMOVED***
function isFunction(input) ***REMOVED***
    return typeof input === "function";
***REMOVED***
function isObject(input) ***REMOVED***
    return typeof input === "object" && input !== null;
***REMOVED***
function mergeWith(target, ...sources) ***REMOVED***
    let customizer = sources.pop();
    for (let source of sources)***REMOVED***
        for(let k in source)***REMOVED***
            let merged = customizer(target[k], source[k]);
            if (merged === undefined) ***REMOVED***
                if (isObject(target[k]) && isObject(source[k])) ***REMOVED***
                    target[k] = mergeWith(target[k], source[k], customizer);
            ***REMOVED*** else ***REMOVED***
                    target[k] = source[k];
            ***REMOVED***
        ***REMOVED*** else ***REMOVED***
                target[k] = merged;
        ***REMOVED***
    ***REMOVED***
***REMOVED***
    return target;
***REMOVED***
const configUtils = ***REMOVED***
    colors: _colors.default,
    negative (scale) ***REMOVED***
        // TODO: Log that this function isn't really needed anymore?
        return Object.keys(scale).filter((key)=>scale[key] !== "0"
        ).reduce((negativeScale, key)=>***REMOVED***
            let negativeValue = (0, _negateValue).default(scale[key]);
            if (negativeValue !== undefined) ***REMOVED***
                negativeScale[`-$***REMOVED***key***REMOVED***`] = negativeValue;
        ***REMOVED***
            return negativeScale;
    ***REMOVED***, ***REMOVED******REMOVED***);
***REMOVED***,
    breakpoints (screens) ***REMOVED***
        return Object.keys(screens).filter((key)=>typeof screens[key] === "string"
        ).reduce((breakpoints, key)=>(***REMOVED***
                ...breakpoints,
                [`screen-$***REMOVED***key***REMOVED***`]: screens[key]
        ***REMOVED***)
        , ***REMOVED******REMOVED***);
***REMOVED***
***REMOVED***;
function value(valueToResolve, ...args) ***REMOVED***
    return isFunction(valueToResolve) ? valueToResolve(...args) : valueToResolve;
***REMOVED***
function collectExtends(items) ***REMOVED***
    return items.reduce((merged, ***REMOVED*** extend***REMOVED***)=>***REMOVED***
        return mergeWith(merged, extend, (mergedValue, extendValue)=>***REMOVED***
            if (mergedValue === undefined) ***REMOVED***
                return [
                    extendValue
                ];
        ***REMOVED***
            if (Array.isArray(mergedValue)) ***REMOVED***
                return [
                    extendValue,
                    ...mergedValue
                ];
        ***REMOVED***
            return [
                extendValue,
                mergedValue
            ];
    ***REMOVED***);
***REMOVED***, ***REMOVED******REMOVED***);
***REMOVED***
function mergeThemes(themes) ***REMOVED***
    return ***REMOVED***
        ...themes.reduce((merged, theme)=>(0, _defaults).defaults(merged, theme)
        , ***REMOVED******REMOVED***),
        // In order to resolve n config objects, we combine all of their `extend` properties
        // into arrays instead of objects so they aren't overridden.
        extend: collectExtends(themes)
***REMOVED***;
***REMOVED***
function mergeExtensionCustomizer(merged, value1) ***REMOVED***
    // When we have an array of objects, we do want to merge it
    if (Array.isArray(merged) && isObject(merged[0])) ***REMOVED***
        return merged.concat(value1);
***REMOVED***
    // When the incoming value is an array, and the existing config is an object, prepend the existing object
    if (Array.isArray(value1) && isObject(value1[0]) && isObject(merged)) ***REMOVED***
        return [
            merged,
            ...value1
        ];
***REMOVED***
    // Override arrays (for example for font-families, box-shadows, ...)
    if (Array.isArray(value1)) ***REMOVED***
        return value1;
***REMOVED***
    // Execute default behaviour
    return undefined;
***REMOVED***
function mergeExtensions(***REMOVED*** extend , ...theme ***REMOVED***) ***REMOVED***
    return mergeWith(theme, extend, (themeValue, extensions)=>***REMOVED***
        // The `extend` property is an array, so we need to check if it contains any functions
        if (!isFunction(themeValue) && !extensions.some(isFunction)) ***REMOVED***
            return mergeWith(***REMOVED******REMOVED***, themeValue, ...extensions, mergeExtensionCustomizer);
    ***REMOVED***
        return (resolveThemePath, utils)=>mergeWith(***REMOVED******REMOVED***, ...[
                themeValue,
                ...extensions
            ].map((e)=>value(e, resolveThemePath, utils)
            ), mergeExtensionCustomizer)
        ;
***REMOVED***);
***REMOVED***
function resolveFunctionKeys(object) ***REMOVED***
    const resolvePath = (key, defaultValue)=>***REMOVED***
        const path = (0, _toPath).toPath(key);
        let index = 0;
        let val = object;
        while(val !== undefined && val !== null && index < path.length)***REMOVED***
            val = val[path[index++]];
            val = isFunction(val) ? val(resolvePath, configUtils) : val;
    ***REMOVED***
        if (val === undefined) ***REMOVED***
            return defaultValue;
    ***REMOVED***
        if ((0, _isPlainObject).default(val)) ***REMOVED***
            return (0, _cloneDeep).cloneDeep(val);
    ***REMOVED***
        return val;
***REMOVED***;
    resolvePath.theme = resolvePath;
    for(let key1 in configUtils)***REMOVED***
        resolvePath[key1] = configUtils[key1];
***REMOVED***
    return Object.keys(object).reduce((resolved, key)=>***REMOVED***
        return ***REMOVED***
            ...resolved,
            [key]: isFunction(object[key]) ? object[key](resolvePath, configUtils) : object[key]
    ***REMOVED***;
***REMOVED***, ***REMOVED******REMOVED***);
***REMOVED***
function extractPluginConfigs(configs) ***REMOVED***
    let allConfigs = [];
    configs.forEach((config)=>***REMOVED***
        allConfigs = [
            ...allConfigs,
            config
        ];
        var ref2;
        const plugins = (ref2 = config === null || config === void 0 ? void 0 : config.plugins) !== null && ref2 !== void 0 ? ref2 : [];
        if (plugins.length === 0) ***REMOVED***
            return;
    ***REMOVED***
        plugins.forEach((plugin)=>***REMOVED***
            if (plugin.__isOptionsFunction) ***REMOVED***
                plugin = plugin();
        ***REMOVED***
            var ref;
            allConfigs = [
                ...allConfigs,
                ...extractPluginConfigs([
                    (ref = plugin === null || plugin === void 0 ? void 0 : plugin.config) !== null && ref !== void 0 ? ref : ***REMOVED******REMOVED***
                ])
            ];
    ***REMOVED***);
***REMOVED***);
    return allConfigs;
***REMOVED***
function resolveCorePlugins(corePluginConfigs) ***REMOVED***
    const result = [
        ...corePluginConfigs
    ].reduceRight((resolved, corePluginConfig)=>***REMOVED***
        if (isFunction(corePluginConfig)) ***REMOVED***
            return corePluginConfig(***REMOVED***
                corePlugins: resolved
        ***REMOVED***);
    ***REMOVED***
        return (0, _configurePlugins).default(corePluginConfig, resolved);
***REMOVED***, _corePluginList.default);
    return result;
***REMOVED***
function resolvePluginLists(pluginLists) ***REMOVED***
    const result = [
        ...pluginLists
    ].reduceRight((resolved, pluginList)=>***REMOVED***
        return [
            ...resolved,
            ...pluginList
        ];
***REMOVED***, []);
    return result;
***REMOVED***
