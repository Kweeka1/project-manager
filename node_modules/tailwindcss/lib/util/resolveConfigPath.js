"use strict";
Object.defineProperty(exports, "__esModule", ***REMOVED***
    value: true
***REMOVED***);
exports.default = resolveConfigPath;
var _fs = _interopRequireDefault(require("fs"));
var _path = _interopRequireDefault(require("path"));
function resolveConfigPath(pathOrConfig) ***REMOVED***
    // require('tailwindcss')(***REMOVED*** theme: ..., variants: ... ***REMOVED***)
    if (isObject(pathOrConfig) && pathOrConfig.config === undefined && !isEmpty(pathOrConfig)) ***REMOVED***
        return null;
***REMOVED***
    // require('tailwindcss')(***REMOVED*** config: 'custom-config.js' ***REMOVED***)
    if (isObject(pathOrConfig) && pathOrConfig.config !== undefined && isString(pathOrConfig.config)) ***REMOVED***
        return _path.default.resolve(pathOrConfig.config);
***REMOVED***
    // require('tailwindcss')(***REMOVED*** config: ***REMOVED*** theme: ..., variants: ... ***REMOVED*** ***REMOVED***)
    if (isObject(pathOrConfig) && pathOrConfig.config !== undefined && isObject(pathOrConfig.config)) ***REMOVED***
        return null;
***REMOVED***
    // require('tailwindcss')('custom-config.js')
    if (isString(pathOrConfig)) ***REMOVED***
        return _path.default.resolve(pathOrConfig);
***REMOVED***
    // require('tailwindcss')
    for (const configFile of [
        "./tailwind.config.js",
        "./tailwind.config.cjs"
    ])***REMOVED***
        try ***REMOVED***
            const configPath = _path.default.resolve(configFile);
            _fs.default.accessSync(configPath);
            return configPath;
    ***REMOVED*** catch (err) ***REMOVED******REMOVED***
***REMOVED***
    return null;
***REMOVED***
function _interopRequireDefault(obj) ***REMOVED***
    return obj && obj.__esModule ? obj : ***REMOVED***
        default: obj
***REMOVED***;
***REMOVED***
function isObject(value) ***REMOVED***
    return typeof value === "object" && value !== null;
***REMOVED***
function isEmpty(obj) ***REMOVED***
    return Object.keys(obj).length === 0;
***REMOVED***
function isString(value) ***REMOVED***
    return typeof value === "string" || value instanceof String;
***REMOVED***
