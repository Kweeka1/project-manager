"use strict";
Object.defineProperty(exports, "__esModule", ***REMOVED***
    value: true
***REMOVED***);
exports.parseColor = parseColor;
exports.formatColor = formatColor;
var _colorName = _interopRequireDefault(require("color-name"));
function _interopRequireDefault(obj) ***REMOVED***
    return obj && obj.__esModule ? obj : ***REMOVED***
        default: obj
***REMOVED***;
***REMOVED***
let HEX = /^#([a-f\d]***REMOVED***2***REMOVED***)([a-f\d]***REMOVED***2***REMOVED***)([a-f\d]***REMOVED***2***REMOVED***)([a-f\d]***REMOVED***2***REMOVED***)?$/i;
let SHORT_HEX = /^#([a-f\d])([a-f\d])([a-f\d])([a-f\d])?$/i;
let VALUE = /(?:\d+|\d*\.\d+)%?/;
let SEP = /(?:\s*,\s*|\s+)/;
let ALPHA_SEP = /\s*[,/]\s*/;
let CUSTOM_PROPERTY = /var\(--(?:[^ )]*?)\)/;
let RGB = new RegExp(`^rgba?\\(\\s*($***REMOVED***VALUE.source***REMOVED***|$***REMOVED***CUSTOM_PROPERTY.source***REMOVED***)$***REMOVED***SEP.source***REMOVED***($***REMOVED***VALUE.source***REMOVED***|$***REMOVED***CUSTOM_PROPERTY.source***REMOVED***)$***REMOVED***SEP.source***REMOVED***($***REMOVED***VALUE.source***REMOVED***|$***REMOVED***CUSTOM_PROPERTY.source***REMOVED***)(?:$***REMOVED***ALPHA_SEP.source***REMOVED***($***REMOVED***VALUE.source***REMOVED***|$***REMOVED***CUSTOM_PROPERTY.source***REMOVED***))?\\s*\\)$`);
let HSL = new RegExp(`^hsla?\\(\\s*((?:$***REMOVED***VALUE.source***REMOVED***)(?:deg|rad|grad|turn)?|$***REMOVED***CUSTOM_PROPERTY.source***REMOVED***)$***REMOVED***SEP.source***REMOVED***($***REMOVED***VALUE.source***REMOVED***|$***REMOVED***CUSTOM_PROPERTY.source***REMOVED***)$***REMOVED***SEP.source***REMOVED***($***REMOVED***VALUE.source***REMOVED***|$***REMOVED***CUSTOM_PROPERTY.source***REMOVED***)(?:$***REMOVED***ALPHA_SEP.source***REMOVED***($***REMOVED***VALUE.source***REMOVED***|$***REMOVED***CUSTOM_PROPERTY.source***REMOVED***))?\\s*\\)$`);
function parseColor(value) ***REMOVED***
    if (typeof value !== "string") ***REMOVED***
        return null;
***REMOVED***
    value = value.trim();
    if (value === "transparent") ***REMOVED***
        return ***REMOVED***
            mode: "rgb",
            color: [
                "0",
                "0",
                "0"
            ],
            alpha: "0"
    ***REMOVED***;
***REMOVED***
    if (value in _colorName.default) ***REMOVED***
        return ***REMOVED***
            mode: "rgb",
            color: _colorName.default[value].map((v)=>v.toString()
            )
    ***REMOVED***;
***REMOVED***
    let hex = value.replace(SHORT_HEX, (_, r, g, b, a)=>[
            "#",
            r,
            r,
            g,
            g,
            b,
            b,
            a ? a + a : ""
        ].join("")
    ).match(HEX);
    if (hex !== null) ***REMOVED***
        return ***REMOVED***
            mode: "rgb",
            color: [
                parseInt(hex[1], 16),
                parseInt(hex[2], 16),
                parseInt(hex[3], 16)
            ].map((v)=>v.toString()
            ),
            alpha: hex[4] ? (parseInt(hex[4], 16) / 255).toString() : undefined
    ***REMOVED***;
***REMOVED***
    let rgbMatch = value.match(RGB);
    if (rgbMatch !== null) ***REMOVED***
        var ref, ref1;
        return ***REMOVED***
            mode: "rgb",
            color: [
                rgbMatch[1],
                rgbMatch[2],
                rgbMatch[3]
            ].map((v)=>v.toString()
            ),
            alpha: (ref = rgbMatch[4]) === null || ref === void 0 ? void 0 : (ref1 = ref.toString) === null || ref1 === void 0 ? void 0 : ref1.call(ref)
    ***REMOVED***;
***REMOVED***
    let hslMatch = value.match(HSL);
    if (hslMatch !== null) ***REMOVED***
        var ref2, ref3;
        return ***REMOVED***
            mode: "hsl",
            color: [
                hslMatch[1],
                hslMatch[2],
                hslMatch[3]
            ].map((v)=>v.toString()
            ),
            alpha: (ref2 = hslMatch[4]) === null || ref2 === void 0 ? void 0 : (ref3 = ref2.toString) === null || ref3 === void 0 ? void 0 : ref3.call(ref2)
    ***REMOVED***;
***REMOVED***
    return null;
***REMOVED***
function formatColor(***REMOVED*** mode , color , alpha***REMOVED***) ***REMOVED***
    let hasAlpha = alpha !== undefined;
    return `$***REMOVED***mode***REMOVED***($***REMOVED***color.join(" ")***REMOVED***$***REMOVED***hasAlpha ? ` / $***REMOVED***alpha***REMOVED***` : ""***REMOVED***)`;
***REMOVED***
