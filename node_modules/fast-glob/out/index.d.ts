/// <reference types="node" />
import * as taskManager from './managers/tasks';
import ***REMOVED*** Options as OptionsInternal ***REMOVED*** from './settings';
import ***REMOVED*** Entry as EntryInternal, FileSystemAdapter as FileSystemAdapterInternal, Pattern as PatternInternal ***REMOVED*** from './types';
declare type EntryObjectModePredicate = ***REMOVED***
    [TKey in keyof Pick<OptionsInternal, 'objectMode'>]-?: true;
***REMOVED***;
declare type EntryStatsPredicate = ***REMOVED***
    [TKey in keyof Pick<OptionsInternal, 'stats'>]-?: true;
***REMOVED***;
declare type EntryObjectPredicate = EntryObjectModePredicate | EntryStatsPredicate;
declare function FastGlob(source: PatternInternal | PatternInternal[], options: OptionsInternal & EntryObjectPredicate): Promise<EntryInternal[]>;
declare function FastGlob(source: PatternInternal | PatternInternal[], options?: OptionsInternal): Promise<string[]>;
declare namespace FastGlob ***REMOVED***
    type Options = OptionsInternal;
    type Entry = EntryInternal;
    type Task = taskManager.Task;
    type Pattern = PatternInternal;
    type FileSystemAdapter = FileSystemAdapterInternal;
    function sync(source: PatternInternal | PatternInternal[], options: OptionsInternal & EntryObjectPredicate): EntryInternal[];
    function sync(source: PatternInternal | PatternInternal[], options?: OptionsInternal): string[];
    function stream(source: PatternInternal | PatternInternal[], options?: OptionsInternal): NodeJS.ReadableStream;
    function generateTasks(source: PatternInternal | PatternInternal[], options?: OptionsInternal): Task[];
    function isDynamicPattern(source: PatternInternal, options?: OptionsInternal): boolean;
    function escapePath(source: PatternInternal): PatternInternal;
***REMOVED***
export = FastGlob;
