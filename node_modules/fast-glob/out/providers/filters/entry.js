"use strict";
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
const utils = require("../../utils");
class EntryFilter ***REMOVED***
    constructor(_settings, _micromatchOptions) ***REMOVED***
        this._settings = _settings;
        this._micromatchOptions = _micromatchOptions;
        this.index = new Map();
***REMOVED***
    getFilter(positive, negative) ***REMOVED***
        const positiveRe = utils.pattern.convertPatternsToRe(positive, this._micromatchOptions);
        const negativeRe = utils.pattern.convertPatternsToRe(negative, this._micromatchOptions);
        return (entry) => this._filter(entry, positiveRe, negativeRe);
***REMOVED***
    _filter(entry, positiveRe, negativeRe) ***REMOVED***
        if (this._settings.unique && this._isDuplicateEntry(entry)) ***REMOVED***
            return false;
    ***REMOVED***
        if (this._onlyFileFilter(entry) || this._onlyDirectoryFilter(entry)) ***REMOVED***
            return false;
    ***REMOVED***
        if (this._isSkippedByAbsoluteNegativePatterns(entry.path, negativeRe)) ***REMOVED***
            return false;
    ***REMOVED***
        const filepath = this._settings.baseNameMatch ? entry.name : entry.path;
        const isMatched = this._isMatchToPatterns(filepath, positiveRe) && !this._isMatchToPatterns(entry.path, negativeRe);
        if (this._settings.unique && isMatched) ***REMOVED***
            this._createIndexRecord(entry);
    ***REMOVED***
        return isMatched;
***REMOVED***
    _isDuplicateEntry(entry) ***REMOVED***
        return this.index.has(entry.path);
***REMOVED***
    _createIndexRecord(entry) ***REMOVED***
        this.index.set(entry.path, undefined);
***REMOVED***
    _onlyFileFilter(entry) ***REMOVED***
        return this._settings.onlyFiles && !entry.dirent.isFile();
***REMOVED***
    _onlyDirectoryFilter(entry) ***REMOVED***
        return this._settings.onlyDirectories && !entry.dirent.isDirectory();
***REMOVED***
    _isSkippedByAbsoluteNegativePatterns(entryPath, patternsRe) ***REMOVED***
        if (!this._settings.absolute) ***REMOVED***
            return false;
    ***REMOVED***
        const fullpath = utils.path.makeAbsolute(this._settings.cwd, entryPath);
        return utils.pattern.matchAny(fullpath, patternsRe);
***REMOVED***
    /**
     * First, just trying to apply patterns to the path.
     * Second, trying to apply patterns to the path with final slash.
     */
    _isMatchToPatterns(entryPath, patternsRe) ***REMOVED***
        const filepath = utils.path.removeLeadingDotSegment(entryPath);
        return utils.pattern.matchAny(filepath, patternsRe) || utils.pattern.matchAny(filepath + '/', patternsRe);
***REMOVED***
***REMOVED***
exports.default = EntryFilter;
