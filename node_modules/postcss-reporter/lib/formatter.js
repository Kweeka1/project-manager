var pico = require('picocolors');
var path = require('path');
var firstBy = require('thenby');
var util = require('./util');

var supportsLargeCharset =
  process.platform !== 'win32' ||
  process.env.CI ||
  process.env.TERM === 'xterm-256color';
var warningSymbol = supportsLargeCharset ? 'âš ' : '!!';

function createSortFunction(positionless, sortByPosition) ***REMOVED***
  var positionValue = 0

  if (positionless === 'any') ***REMOVED*** positionValue = 1; ***REMOVED***
  if (positionless === 'first') ***REMOVED*** positionValue = 2; ***REMOVED***
  if (positionless === 'last') ***REMOVED*** positionValue = 0; ***REMOVED***

  var sortFunction = firstBy((m) => ***REMOVED***
    if (!m.line) return 1;
    return positionValue;
***REMOVED***)

  if (sortByPosition) ***REMOVED***
    sortFunction = sortFunction.thenBy('line').thenBy('column');
***REMOVED***

  return sortFunction;
***REMOVED***

module.exports = function (opts) ***REMOVED***
  var options = opts || ***REMOVED******REMOVED***;
  var sortByPosition =
    typeof options.sortByPosition !== 'undefined'
      ? options.sortByPosition
      : true;
  var positionless = options.positionless || 'first';

  var sortFunction = createSortFunction(positionless, sortByPosition);

  return function (input) ***REMOVED***
    var messages = input.messages.filter(function (message) ***REMOVED***
      return typeof message.text === 'string';
***REMOVED***);
    var source = input.source;

    if (!messages.length) return '';

    var orderedMessages = messages.sort(sortFunction);

    var output = '\n';

    if (source) ***REMOVED***
      output += pico.bold(pico.underline(logFrom(source))) + '\n';
***REMOVED***

    orderedMessages.forEach(function (w) ***REMOVED***
      output += messageToString(w) + '\n';
***REMOVED***);

    return output;

    function messageToString(message) ***REMOVED***
      var location = util.getLocation(message);
      var str = '';

      if (location.line) ***REMOVED***
        str += pico.bold(location.line);
  ***REMOVED***

      if (location.column) ***REMOVED***
        str += pico.bold(':' + location.column);
  ***REMOVED***

      if (location.line || location.column) ***REMOVED***
        str += '\t';
  ***REMOVED***

      if (!options.noIcon && message.type === 'warning') ***REMOVED***
        str += pico.yellow(warningSymbol + '  ');
  ***REMOVED***

      str += message.text;
      if (!options.noPlugin) ***REMOVED***
        str += pico.yellow(' [' + message.plugin + ']');
  ***REMOVED***
      return str;
***REMOVED***

    function logFrom(fromValue) ***REMOVED***
      if (fromValue.charAt(0) === '<') return fromValue;
      return path.relative(process.cwd(), fromValue).split(path.sep).join('/');
***REMOVED***
***REMOVED***;
***REMOVED***;
