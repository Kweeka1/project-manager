var defaultFormatter = require('./formatter');
var pico = require('picocolors');
var util = require('./util');

module.exports = function (opts = ***REMOVED******REMOVED***) ***REMOVED***
  var formatter =
    opts.formatter ||
    defaultFormatter(***REMOVED***
      noIcon: opts.noIcon,
      noPlugin: opts.noPlugin,
***REMOVED***);

  var pluginFilter;
  if (!opts.plugins) ***REMOVED***
    // Every plugin
    pluginFilter = function () ***REMOVED***
      return true;
***REMOVED***;
***REMOVED*** else if (
    opts.plugins.every(function (plugin) ***REMOVED***
      return plugin[0] === '!';
***REMOVED***)
  ) ***REMOVED***
    // Deny list
    pluginFilter = function (message) ***REMOVED***
      return opts.plugins.indexOf('!' + message.plugin) === -1;
***REMOVED***;
***REMOVED*** else ***REMOVED***
    // Allow list
    pluginFilter = function (message) ***REMOVED***
      return opts.plugins.indexOf(message.plugin) !== -1;
***REMOVED***;
***REMOVED***

  var messageFilter = opts.filter || ((message) => message.type === 'warning');

  return ***REMOVED***
    postcssPlugin: 'postcss-reporter',
    OnceExit(css, ***REMOVED*** result ***REMOVED***) ***REMOVED***
      var messagesToLog = result.messages
        .filter(pluginFilter)
        .filter(messageFilter);

      var resultSource = !result.root.source
        ? ''
        : result.root.source.input.file || result.root.source.input.id;

      var sourceGroupedMessages = messagesToLog.reduce((grouped, message) => ***REMOVED***
        const key = util.getLocation(message).file || resultSource;

        if (!grouped.hasOwnProperty(key)) ***REMOVED***
          grouped[key] = [];
    ***REMOVED***

        grouped[key].push(message);

        return grouped;
  ***REMOVED***, ***REMOVED******REMOVED***);

      var report = '';
      for (const source in sourceGroupedMessages) ***REMOVED***
        if (sourceGroupedMessages.hasOwnProperty(source)) ***REMOVED***
          report += formatter(***REMOVED***
            messages: sourceGroupedMessages[source],
            source: source,
      ***REMOVED***);
    ***REMOVED***
  ***REMOVED***

      if (opts.clearReportedMessages) ***REMOVED***
        result.messages = result.messages.filter(message => !messagesToLog.includes(message));
  ***REMOVED***

      if (opts.clearAllMessages) ***REMOVED***
        var messagesToClear = result.messages.filter(pluginFilter);
        result.messages = result.messages.filter(message => !messagesToClear.includes(message));
  ***REMOVED***

      if (!report) return;

      console.log(report);

      if (opts.throwError && shouldThrowError()) ***REMOVED***
        throw new Error(
          pico.red(
            pico.bold('\n** postcss-reporter: warnings or errors were found **')
          )
        );
  ***REMOVED***

      function shouldThrowError() ***REMOVED***
        return (
          messagesToLog.length &&
          messagesToLog.some((message) => ***REMOVED***
            return message.type === 'warning' || message.type === 'error';
      ***REMOVED***)
        );
  ***REMOVED***
***REMOVED***,
***REMOVED***;
***REMOVED***;
