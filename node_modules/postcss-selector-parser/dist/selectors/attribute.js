"use strict";

exports.__esModule = true;
exports.unescapeValue = unescapeValue;
exports["default"] = void 0;

var _cssesc = _interopRequireDefault(require("cssesc"));

var _unesc = _interopRequireDefault(require("../util/unesc"));

var _namespace = _interopRequireDefault(require("./namespace"));

var _types = require("./types");

var _CSSESC_QUOTE_OPTIONS;

function _interopRequireDefault(obj) ***REMOVED*** return obj && obj.__esModule ? obj : ***REMOVED*** "default": obj ***REMOVED***; ***REMOVED***

function _defineProperties(target, props) ***REMOVED*** for (var i = 0; i < props.length; i++) ***REMOVED*** var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); ***REMOVED*** ***REMOVED***

function _createClass(Constructor, protoProps, staticProps) ***REMOVED*** if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; ***REMOVED***

function _inheritsLoose(subClass, superClass) ***REMOVED*** subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); ***REMOVED***

function _setPrototypeOf(o, p) ***REMOVED*** _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) ***REMOVED*** o.__proto__ = p; return o; ***REMOVED***; return _setPrototypeOf(o, p); ***REMOVED***

var deprecate = require("util-deprecate");

var WRAPPED_IN_QUOTES = /^('|")([^]*)\1$/;
var warnOfDeprecatedValueAssignment = deprecate(function () ***REMOVED******REMOVED***, "Assigning an attribute a value containing characters that might need to be escaped is deprecated. " + "Call attribute.setValue() instead.");
var warnOfDeprecatedQuotedAssignment = deprecate(function () ***REMOVED******REMOVED***, "Assigning attr.quoted is deprecated and has no effect. Assign to attr.quoteMark instead.");
var warnOfDeprecatedConstructor = deprecate(function () ***REMOVED******REMOVED***, "Constructing an Attribute selector with a value without specifying quoteMark is deprecated. Note: The value should be unescaped now.");

function unescapeValue(value) ***REMOVED***
  var deprecatedUsage = false;
  var quoteMark = null;
  var unescaped = value;
  var m = unescaped.match(WRAPPED_IN_QUOTES);

  if (m) ***REMOVED***
    quoteMark = m[1];
    unescaped = m[2];
***REMOVED***

  unescaped = (0, _unesc["default"])(unescaped);

  if (unescaped !== value) ***REMOVED***
    deprecatedUsage = true;
***REMOVED***

  return ***REMOVED***
    deprecatedUsage: deprecatedUsage,
    unescaped: unescaped,
    quoteMark: quoteMark
***REMOVED***;
***REMOVED***

function handleDeprecatedContructorOpts(opts) ***REMOVED***
  if (opts.quoteMark !== undefined) ***REMOVED***
    return opts;
***REMOVED***

  if (opts.value === undefined) ***REMOVED***
    return opts;
***REMOVED***

  warnOfDeprecatedConstructor();

  var _unescapeValue = unescapeValue(opts.value),
      quoteMark = _unescapeValue.quoteMark,
      unescaped = _unescapeValue.unescaped;

  if (!opts.raws) ***REMOVED***
    opts.raws = ***REMOVED******REMOVED***;
***REMOVED***

  if (opts.raws.value === undefined) ***REMOVED***
    opts.raws.value = opts.value;
***REMOVED***

  opts.value = unescaped;
  opts.quoteMark = quoteMark;
  return opts;
***REMOVED***

var Attribute = /*#__PURE__*/function (_Namespace) ***REMOVED***
  _inheritsLoose(Attribute, _Namespace);

  function Attribute(opts) ***REMOVED***
    var _this;

    if (opts === void 0) ***REMOVED***
      opts = ***REMOVED******REMOVED***;
***REMOVED***

    _this = _Namespace.call(this, handleDeprecatedContructorOpts(opts)) || this;
    _this.type = _types.ATTRIBUTE;
    _this.raws = _this.raws || ***REMOVED******REMOVED***;
    Object.defineProperty(_this.raws, 'unquoted', ***REMOVED***
      get: deprecate(function () ***REMOVED***
        return _this.value;
  ***REMOVED***, "attr.raws.unquoted is deprecated. Call attr.value instead."),
      set: deprecate(function () ***REMOVED***
        return _this.value;
  ***REMOVED***, "Setting attr.raws.unquoted is deprecated and has no effect. attr.value is unescaped by default now.")
***REMOVED***);
    _this._constructed = true;
    return _this;
***REMOVED***
  /**
   * Returns the Attribute's value quoted such that it would be legal to use
   * in the value of a css file. The original value's quotation setting
   * used for stringification is left unchanged. See `setValue(value, options)`
   * if you want to control the quote settings of a new value for the attribute.
   *
   * You can also change the quotation used for the current value by setting quoteMark.
   *
   * Options:
   *   * quoteMark ***REMOVED***'"' | "'" | null***REMOVED*** - Use this value to quote the value. If this
   *     option is not set, the original value for quoteMark will be used. If
   *     indeterminate, a double quote is used. The legal values are:
   *     * `null` - the value will be unquoted and characters will be escaped as necessary.
   *     * `'` - the value will be quoted with a single quote and single quotes are escaped.
   *     * `"` - the value will be quoted with a double quote and double quotes are escaped.
   *   * preferCurrentQuoteMark ***REMOVED***boolean***REMOVED*** - if true, prefer the source quote mark
   *     over the quoteMark option value.
   *   * smart ***REMOVED***boolean***REMOVED*** - if true, will select a quote mark based on the value
   *     and the other options specified here. See the `smartQuoteMark()`
   *     method.
   **/


  var _proto = Attribute.prototype;

  _proto.getQuotedValue = function getQuotedValue(options) ***REMOVED***
    if (options === void 0) ***REMOVED***
      options = ***REMOVED******REMOVED***;
***REMOVED***

    var quoteMark = this._determineQuoteMark(options);

    var cssescopts = CSSESC_QUOTE_OPTIONS[quoteMark];
    var escaped = (0, _cssesc["default"])(this._value, cssescopts);
    return escaped;
***REMOVED***;

  _proto._determineQuoteMark = function _determineQuoteMark(options) ***REMOVED***
    return options.smart ? this.smartQuoteMark(options) : this.preferredQuoteMark(options);
***REMOVED***
  /**
   * Set the unescaped value with the specified quotation options. The value
   * provided must not include any wrapping quote marks -- those quotes will
   * be interpreted as part of the value and escaped accordingly.
   */
  ;

  _proto.setValue = function setValue(value, options) ***REMOVED***
    if (options === void 0) ***REMOVED***
      options = ***REMOVED******REMOVED***;
***REMOVED***

    this._value = value;
    this._quoteMark = this._determineQuoteMark(options);

    this._syncRawValue();
***REMOVED***
  /**
   * Intelligently select a quoteMark value based on the value's contents. If
   * the value is a legal CSS ident, it will not be quoted. Otherwise a quote
   * mark will be picked that minimizes the number of escapes.
   *
   * If there's no clear winner, the quote mark from these options is used,
   * then the source quote mark (this is inverted if `preferCurrentQuoteMark` is
   * true). If the quoteMark is unspecified, a double quote is used.
   *
   * @param options This takes the quoteMark and preferCurrentQuoteMark options
   * from the quoteValue method.
   */
  ;

  _proto.smartQuoteMark = function smartQuoteMark(options) ***REMOVED***
    var v = this.value;
    var numSingleQuotes = v.replace(/[^']/g, '').length;
    var numDoubleQuotes = v.replace(/[^"]/g, '').length;

    if (numSingleQuotes + numDoubleQuotes === 0) ***REMOVED***
      var escaped = (0, _cssesc["default"])(v, ***REMOVED***
        isIdentifier: true
  ***REMOVED***);

      if (escaped === v) ***REMOVED***
        return Attribute.NO_QUOTE;
  ***REMOVED*** else ***REMOVED***
        var pref = this.preferredQuoteMark(options);

        if (pref === Attribute.NO_QUOTE) ***REMOVED***
          // pick a quote mark that isn't none and see if it's smaller
          var quote = this.quoteMark || options.quoteMark || Attribute.DOUBLE_QUOTE;
          var opts = CSSESC_QUOTE_OPTIONS[quote];
          var quoteValue = (0, _cssesc["default"])(v, opts);

          if (quoteValue.length < escaped.length) ***REMOVED***
            return quote;
      ***REMOVED***
    ***REMOVED***

        return pref;
  ***REMOVED***
***REMOVED*** else if (numDoubleQuotes === numSingleQuotes) ***REMOVED***
      return this.preferredQuoteMark(options);
***REMOVED*** else if (numDoubleQuotes < numSingleQuotes) ***REMOVED***
      return Attribute.DOUBLE_QUOTE;
***REMOVED*** else ***REMOVED***
      return Attribute.SINGLE_QUOTE;
***REMOVED***
***REMOVED***
  /**
   * Selects the preferred quote mark based on the options and the current quote mark value.
   * If you want the quote mark to depend on the attribute value, call `smartQuoteMark(opts)`
   * instead.
   */
  ;

  _proto.preferredQuoteMark = function preferredQuoteMark(options) ***REMOVED***
    var quoteMark = options.preferCurrentQuoteMark ? this.quoteMark : options.quoteMark;

    if (quoteMark === undefined) ***REMOVED***
      quoteMark = options.preferCurrentQuoteMark ? options.quoteMark : this.quoteMark;
***REMOVED***

    if (quoteMark === undefined) ***REMOVED***
      quoteMark = Attribute.DOUBLE_QUOTE;
***REMOVED***

    return quoteMark;
***REMOVED***;

  _proto._syncRawValue = function _syncRawValue() ***REMOVED***
    var rawValue = (0, _cssesc["default"])(this._value, CSSESC_QUOTE_OPTIONS[this.quoteMark]);

    if (rawValue === this._value) ***REMOVED***
      if (this.raws) ***REMOVED***
        delete this.raws.value;
  ***REMOVED***
***REMOVED*** else ***REMOVED***
      this.raws.value = rawValue;
***REMOVED***
***REMOVED***;

  _proto._handleEscapes = function _handleEscapes(prop, value) ***REMOVED***
    if (this._constructed) ***REMOVED***
      var escaped = (0, _cssesc["default"])(value, ***REMOVED***
        isIdentifier: true
  ***REMOVED***);

      if (escaped !== value) ***REMOVED***
        this.raws[prop] = escaped;
  ***REMOVED*** else ***REMOVED***
        delete this.raws[prop];
  ***REMOVED***
***REMOVED***
***REMOVED***;

  _proto._spacesFor = function _spacesFor(name) ***REMOVED***
    var attrSpaces = ***REMOVED***
      before: '',
      after: ''
***REMOVED***;
    var spaces = this.spaces[name] || ***REMOVED******REMOVED***;
    var rawSpaces = this.raws.spaces && this.raws.spaces[name] || ***REMOVED******REMOVED***;
    return Object.assign(attrSpaces, spaces, rawSpaces);
***REMOVED***;

  _proto._stringFor = function _stringFor(name, spaceName, concat) ***REMOVED***
    if (spaceName === void 0) ***REMOVED***
      spaceName = name;
***REMOVED***

    if (concat === void 0) ***REMOVED***
      concat = defaultAttrConcat;
***REMOVED***

    var attrSpaces = this._spacesFor(spaceName);

    return concat(this.stringifyProperty(name), attrSpaces);
***REMOVED***
  /**
   * returns the offset of the attribute part specified relative to the
   * start of the node of the output string.
   *
   * * "ns" - alias for "namespace"
   * * "namespace" - the namespace if it exists.
   * * "attribute" - the attribute name
   * * "attributeNS" - the start of the attribute or its namespace
   * * "operator" - the match operator of the attribute
   * * "value" - The value (string or identifier)
   * * "insensitive" - the case insensitivity flag;
   * @param part One of the possible values inside an attribute.
   * @returns -1 if the name is invalid or the value doesn't exist in this attribute.
   */
  ;

  _proto.offsetOf = function offsetOf(name) ***REMOVED***
    var count = 1;

    var attributeSpaces = this._spacesFor("attribute");

    count += attributeSpaces.before.length;

    if (name === "namespace" || name === "ns") ***REMOVED***
      return this.namespace ? count : -1;
***REMOVED***

    if (name === "attributeNS") ***REMOVED***
      return count;
***REMOVED***

    count += this.namespaceString.length;

    if (this.namespace) ***REMOVED***
      count += 1;
***REMOVED***

    if (name === "attribute") ***REMOVED***
      return count;
***REMOVED***

    count += this.stringifyProperty("attribute").length;
    count += attributeSpaces.after.length;

    var operatorSpaces = this._spacesFor("operator");

    count += operatorSpaces.before.length;
    var operator = this.stringifyProperty("operator");

    if (name === "operator") ***REMOVED***
      return operator ? count : -1;
***REMOVED***

    count += operator.length;
    count += operatorSpaces.after.length;

    var valueSpaces = this._spacesFor("value");

    count += valueSpaces.before.length;
    var value = this.stringifyProperty("value");

    if (name === "value") ***REMOVED***
      return value ? count : -1;
***REMOVED***

    count += value.length;
    count += valueSpaces.after.length;

    var insensitiveSpaces = this._spacesFor("insensitive");

    count += insensitiveSpaces.before.length;

    if (name === "insensitive") ***REMOVED***
      return this.insensitive ? count : -1;
***REMOVED***

    return -1;
***REMOVED***;

  _proto.toString = function toString() ***REMOVED***
    var _this2 = this;

    var selector = [this.rawSpaceBefore, '['];
    selector.push(this._stringFor('qualifiedAttribute', 'attribute'));

    if (this.operator && (this.value || this.value === '')) ***REMOVED***
      selector.push(this._stringFor('operator'));
      selector.push(this._stringFor('value'));
      selector.push(this._stringFor('insensitiveFlag', 'insensitive', function (attrValue, attrSpaces) ***REMOVED***
        if (attrValue.length > 0 && !_this2.quoted && attrSpaces.before.length === 0 && !(_this2.spaces.value && _this2.spaces.value.after)) ***REMOVED***
          attrSpaces.before = " ";
    ***REMOVED***

        return defaultAttrConcat(attrValue, attrSpaces);
  ***REMOVED***));
***REMOVED***

    selector.push(']');
    selector.push(this.rawSpaceAfter);
    return selector.join('');
***REMOVED***;

  _createClass(Attribute, [***REMOVED***
    key: "quoted",
    get: function get() ***REMOVED***
      var qm = this.quoteMark;
      return qm === "'" || qm === '"';
***REMOVED***,
    set: function set(value) ***REMOVED***
      warnOfDeprecatedQuotedAssignment();
***REMOVED***
    /**
     * returns a single (`'`) or double (`"`) quote character if the value is quoted.
     * returns `null` if the value is not quoted.
     * returns `undefined` if the quotation state is unknown (this can happen when
     * the attribute is constructed without specifying a quote mark.)
     */

***REMOVED*** ***REMOVED***
    key: "quoteMark",
    get: function get() ***REMOVED***
      return this._quoteMark;
***REMOVED***
    /**
     * Set the quote mark to be used by this attribute's value.
     * If the quote mark changes, the raw (escaped) value at `attr.raws.value` of the attribute
     * value is updated accordingly.
     *
     * @param ***REMOVED***"'" | '"' | null***REMOVED*** quoteMark The quote mark or `null` if the value should be unquoted.
     */
    ,
    set: function set(quoteMark) ***REMOVED***
      if (!this._constructed) ***REMOVED***
        this._quoteMark = quoteMark;
        return;
  ***REMOVED***

      if (this._quoteMark !== quoteMark) ***REMOVED***
        this._quoteMark = quoteMark;

        this._syncRawValue();
  ***REMOVED***
***REMOVED***
***REMOVED*** ***REMOVED***
    key: "qualifiedAttribute",
    get: function get() ***REMOVED***
      return this.qualifiedName(this.raws.attribute || this.attribute);
***REMOVED***
***REMOVED*** ***REMOVED***
    key: "insensitiveFlag",
    get: function get() ***REMOVED***
      return this.insensitive ? 'i' : '';
***REMOVED***
***REMOVED*** ***REMOVED***
    key: "value",
    get: function get() ***REMOVED***
      return this._value;
***REMOVED***
    /**
     * Before 3.0, the value had to be set to an escaped value including any wrapped
     * quote marks. In 3.0, the semantics of `Attribute.value` changed so that the value
     * is unescaped during parsing and any quote marks are removed.
     *
     * Because the ambiguity of this semantic change, if you set `attr.value = newValue`,
     * a deprecation warning is raised when the new value contains any characters that would
     * require escaping (including if it contains wrapped quotes).
     *
     * Instead, you should call `attr.setValue(newValue, opts)` and pass options that describe
     * how the new value is quoted.
     */
    ,
    set: function set(v) ***REMOVED***
      if (this._constructed) ***REMOVED***
        var _unescapeValue2 = unescapeValue(v),
            deprecatedUsage = _unescapeValue2.deprecatedUsage,
            unescaped = _unescapeValue2.unescaped,
            quoteMark = _unescapeValue2.quoteMark;

        if (deprecatedUsage) ***REMOVED***
          warnOfDeprecatedValueAssignment();
    ***REMOVED***

        if (unescaped === this._value && quoteMark === this._quoteMark) ***REMOVED***
          return;
    ***REMOVED***

        this._value = unescaped;
        this._quoteMark = quoteMark;

        this._syncRawValue();
  ***REMOVED*** else ***REMOVED***
        this._value = v;
  ***REMOVED***
***REMOVED***
***REMOVED*** ***REMOVED***
    key: "attribute",
    get: function get() ***REMOVED***
      return this._attribute;
***REMOVED***,
    set: function set(name) ***REMOVED***
      this._handleEscapes("attribute", name);

      this._attribute = name;
***REMOVED***
***REMOVED***]);

  return Attribute;
***REMOVED***(_namespace["default"]);

exports["default"] = Attribute;
Attribute.NO_QUOTE = null;
Attribute.SINGLE_QUOTE = "'";
Attribute.DOUBLE_QUOTE = '"';
var CSSESC_QUOTE_OPTIONS = (_CSSESC_QUOTE_OPTIONS = ***REMOVED***
  "'": ***REMOVED***
    quotes: 'single',
    wrap: true
***REMOVED***
  '"': ***REMOVED***
    quotes: 'double',
    wrap: true
***REMOVED***
***REMOVED***, _CSSESC_QUOTE_OPTIONS[null] = ***REMOVED***
  isIdentifier: true
***REMOVED***, _CSSESC_QUOTE_OPTIONS);

function defaultAttrConcat(attrValue, attrSpaces) ***REMOVED***
  return "" + attrSpaces.before + attrValue + attrSpaces.after;
***REMOVED***