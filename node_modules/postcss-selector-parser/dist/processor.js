"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _parser = _interopRequireDefault(require("./parser"));

function _interopRequireDefault(obj) ***REMOVED*** return obj && obj.__esModule ? obj : ***REMOVED*** "default": obj ***REMOVED***; ***REMOVED***

var Processor = /*#__PURE__*/function () ***REMOVED***
  function Processor(func, options) ***REMOVED***
    this.func = func || function noop() ***REMOVED******REMOVED***;

    this.funcRes = null;
    this.options = options;
***REMOVED***

  var _proto = Processor.prototype;

  _proto._shouldUpdateSelector = function _shouldUpdateSelector(rule, options) ***REMOVED***
    if (options === void 0) ***REMOVED***
      options = ***REMOVED******REMOVED***;
***REMOVED***

    var merged = Object.assign(***REMOVED******REMOVED***, this.options, options);

    if (merged.updateSelector === false) ***REMOVED***
      return false;
***REMOVED*** else ***REMOVED***
      return typeof rule !== "string";
***REMOVED***
***REMOVED***;

  _proto._isLossy = function _isLossy(options) ***REMOVED***
    if (options === void 0) ***REMOVED***
      options = ***REMOVED******REMOVED***;
***REMOVED***

    var merged = Object.assign(***REMOVED******REMOVED***, this.options, options);

    if (merged.lossless === false) ***REMOVED***
      return true;
***REMOVED*** else ***REMOVED***
      return false;
***REMOVED***
***REMOVED***;

  _proto._root = function _root(rule, options) ***REMOVED***
    if (options === void 0) ***REMOVED***
      options = ***REMOVED******REMOVED***;
***REMOVED***

    var parser = new _parser["default"](rule, this._parseOptions(options));
    return parser.root;
***REMOVED***;

  _proto._parseOptions = function _parseOptions(options) ***REMOVED***
    return ***REMOVED***
      lossy: this._isLossy(options)
***REMOVED***;
***REMOVED***;

  _proto._run = function _run(rule, options) ***REMOVED***
    var _this = this;

    if (options === void 0) ***REMOVED***
      options = ***REMOVED******REMOVED***;
***REMOVED***

    return new Promise(function (resolve, reject) ***REMOVED***
      try ***REMOVED***
        var root = _this._root(rule, options);

        Promise.resolve(_this.func(root)).then(function (transform) ***REMOVED***
          var string = undefined;

          if (_this._shouldUpdateSelector(rule, options)) ***REMOVED***
            string = root.toString();
            rule.selector = string;
      ***REMOVED***

          return ***REMOVED***
            transform: transform,
            root: root,
            string: string
      ***REMOVED***;
    ***REMOVED***).then(resolve, reject);
  ***REMOVED*** catch (e) ***REMOVED***
        reject(e);
        return;
  ***REMOVED***
***REMOVED***);
***REMOVED***;

  _proto._runSync = function _runSync(rule, options) ***REMOVED***
    if (options === void 0) ***REMOVED***
      options = ***REMOVED******REMOVED***;
***REMOVED***

    var root = this._root(rule, options);

    var transform = this.func(root);

    if (transform && typeof transform.then === "function") ***REMOVED***
      throw new Error("Selector processor returned a promise to a synchronous call.");
***REMOVED***

    var string = undefined;

    if (options.updateSelector && typeof rule !== "string") ***REMOVED***
      string = root.toString();
      rule.selector = string;
***REMOVED***

    return ***REMOVED***
      transform: transform,
      root: root,
      string: string
***REMOVED***;
***REMOVED***
  /**
   * Process rule into a selector AST.
   *
   * @param rule ***REMOVED***postcss.Rule | string***REMOVED*** The css selector to be processed
   * @param options The options for processing
   * @returns ***REMOVED***Promise<parser.Root>***REMOVED*** The AST of the selector after processing it.
   */
  ;

  _proto.ast = function ast(rule, options) ***REMOVED***
    return this._run(rule, options).then(function (result) ***REMOVED***
      return result.root;
***REMOVED***);
***REMOVED***
  /**
   * Process rule into a selector AST synchronously.
   *
   * @param rule ***REMOVED***postcss.Rule | string***REMOVED*** The css selector to be processed
   * @param options The options for processing
   * @returns ***REMOVED***parser.Root***REMOVED*** The AST of the selector after processing it.
   */
  ;

  _proto.astSync = function astSync(rule, options) ***REMOVED***
    return this._runSync(rule, options).root;
***REMOVED***
  /**
   * Process a selector into a transformed value asynchronously
   *
   * @param rule ***REMOVED***postcss.Rule | string***REMOVED*** The css selector to be processed
   * @param options The options for processing
   * @returns ***REMOVED***Promise<any>***REMOVED*** The value returned by the processor.
   */
  ;

  _proto.transform = function transform(rule, options) ***REMOVED***
    return this._run(rule, options).then(function (result) ***REMOVED***
      return result.transform;
***REMOVED***);
***REMOVED***
  /**
   * Process a selector into a transformed value synchronously.
   *
   * @param rule ***REMOVED***postcss.Rule | string***REMOVED*** The css selector to be processed
   * @param options The options for processing
   * @returns ***REMOVED***any***REMOVED*** The value returned by the processor.
   */
  ;

  _proto.transformSync = function transformSync(rule, options) ***REMOVED***
    return this._runSync(rule, options).transform;
***REMOVED***
  /**
   * Process a selector into a new selector string asynchronously.
   *
   * @param rule ***REMOVED***postcss.Rule | string***REMOVED*** The css selector to be processed
   * @param options The options for processing
   * @returns ***REMOVED***string***REMOVED*** the selector after processing.
   */
  ;

  _proto.process = function process(rule, options) ***REMOVED***
    return this._run(rule, options).then(function (result) ***REMOVED***
      return result.string || result.root.toString();
***REMOVED***);
***REMOVED***
  /**
   * Process a selector into a new selector string synchronously.
   *
   * @param rule ***REMOVED***postcss.Rule | string***REMOVED*** The css selector to be processed
   * @param options The options for processing
   * @returns ***REMOVED***string***REMOVED*** the selector after processing.
   */
  ;

  _proto.processSync = function processSync(rule, options) ***REMOVED***
    var result = this._runSync(rule, options);

    return result.string || result.root.toString();
***REMOVED***;

  return Processor;
***REMOVED***();

exports["default"] = Processor;
module.exports = exports.default;