let camelcase = require('camelcase-css')

let UNITLESS = ***REMOVED***
  boxFlex: true,
  boxFlexGroup: true,
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  fillOpacity: true,
  strokeDashoffset: true,
  strokeOpacity: true,
  strokeWidth: true
***REMOVED***

function atRule(node) ***REMOVED***
  if (typeof node.nodes === 'undefined') ***REMOVED***
    return true
***REMOVED*** else ***REMOVED***
    return process(node)
***REMOVED***
***REMOVED***

function process(node) ***REMOVED***
  let name
  let result = ***REMOVED******REMOVED***

  node.each(child => ***REMOVED***
    if (child.type === 'atrule') ***REMOVED***
      name = '@' + child.name
      if (child.params) name += ' ' + child.params
      if (typeof result[name] === 'undefined') ***REMOVED***
        result[name] = atRule(child)
  ***REMOVED*** else if (Array.isArray(result[name])) ***REMOVED***
        result[name].push(atRule(child))
  ***REMOVED*** else ***REMOVED***
        result[name] = [result[name], atRule(child)]
  ***REMOVED***
***REMOVED*** else if (child.type === 'rule') ***REMOVED***
      let body = process(child)
      if (result[child.selector]) ***REMOVED***
        for (let i in body) ***REMOVED***
          result[child.selector][i] = body[i]
    ***REMOVED***
  ***REMOVED*** else ***REMOVED***
        result[child.selector] = body
  ***REMOVED***
***REMOVED*** else if (child.type === 'decl') ***REMOVED***
      if (child.prop[0] === '-' && child.prop[1] === '-') ***REMOVED***
        name = child.prop
  ***REMOVED*** else ***REMOVED***
        name = camelcase(child.prop)
  ***REMOVED***
      let value = child.value
      if (!isNaN(child.value) && UNITLESS[name]) ***REMOVED***
        value = parseFloat(child.value)
  ***REMOVED***
      if (child.important) value += ' !important'
      if (typeof result[name] === 'undefined') ***REMOVED***
        result[name] = value
  ***REMOVED*** else if (Array.isArray(result[name])) ***REMOVED***
        result[name].push(value)
  ***REMOVED*** else ***REMOVED***
        result[name] = [result[name], value]
  ***REMOVED***
***REMOVED***
***REMOVED***)
  return result
***REMOVED***

module.exports = process
