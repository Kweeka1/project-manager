'use strict'

let ***REMOVED*** SourceMapConsumer, SourceMapGenerator ***REMOVED*** = require('source-map-js')
let ***REMOVED*** dirname, resolve, relative, sep ***REMOVED*** = require('path')
let ***REMOVED*** pathToFileURL ***REMOVED*** = require('url')

let Input = require('./input')

let sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator)
let pathAvailable = Boolean(dirname && resolve && relative && sep)

class MapGenerator ***REMOVED***
  constructor(stringify, root, opts, cssString) ***REMOVED***
    this.stringify = stringify
    this.mapOpts = opts.map || ***REMOVED******REMOVED***
    this.root = root
    this.opts = opts
    this.css = cssString
***REMOVED***

  isMap() ***REMOVED***
    if (typeof this.opts.map !== 'undefined') ***REMOVED***
      return !!this.opts.map
***REMOVED***
    return this.previous().length > 0
***REMOVED***

  previous() ***REMOVED***
    if (!this.previousMaps) ***REMOVED***
      this.previousMaps = []
      if (this.root) ***REMOVED***
        this.root.walk(node => ***REMOVED***
          if (node.source && node.source.input.map) ***REMOVED***
            let map = node.source.input.map
            if (!this.previousMaps.includes(map)) ***REMOVED***
              this.previousMaps.push(map)
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***)
  ***REMOVED*** else ***REMOVED***
        let input = new Input(this.css, this.opts)
        if (input.map) this.previousMaps.push(input.map)
  ***REMOVED***
***REMOVED***

    return this.previousMaps
***REMOVED***

  isInline() ***REMOVED***
    if (typeof this.mapOpts.inline !== 'undefined') ***REMOVED***
      return this.mapOpts.inline
***REMOVED***

    let annotation = this.mapOpts.annotation
    if (typeof annotation !== 'undefined' && annotation !== true) ***REMOVED***
      return false
***REMOVED***

    if (this.previous().length) ***REMOVED***
      return this.previous().some(i => i.inline)
***REMOVED***
    return true
***REMOVED***

  isSourcesContent() ***REMOVED***
    if (typeof this.mapOpts.sourcesContent !== 'undefined') ***REMOVED***
      return this.mapOpts.sourcesContent
***REMOVED***
    if (this.previous().length) ***REMOVED***
      return this.previous().some(i => i.withContent())
***REMOVED***
    return true
***REMOVED***

  clearAnnotation() ***REMOVED***
    if (this.mapOpts.annotation === false) return

    if (this.root) ***REMOVED***
      let node
      for (let i = this.root.nodes.length - 1; i >= 0; i--) ***REMOVED***
        node = this.root.nodes[i]
        if (node.type !== 'comment') continue
        if (node.text.indexOf('# sourceMappingURL=') === 0) ***REMOVED***
          this.root.removeChild(i)
    ***REMOVED***
  ***REMOVED***
***REMOVED*** else if (this.css) ***REMOVED***
      this.css = this.css.replace(/(\n)?\/\*#[\S\s]*?\*\/$/gm, '')
***REMOVED***
***REMOVED***

  setSourcesContent() ***REMOVED***
    let already = ***REMOVED******REMOVED***
    if (this.root) ***REMOVED***
      this.root.walk(node => ***REMOVED***
        if (node.source) ***REMOVED***
          let from = node.source.input.from
          if (from && !already[from]) ***REMOVED***
            already[from] = true
            this.map.setSourceContent(
              this.toUrl(this.path(from)),
              node.source.input.css
            )
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***)
***REMOVED*** else if (this.css) ***REMOVED***
      let from = this.opts.from
        ? this.toUrl(this.path(this.opts.from))
        : '<no source>'
      this.map.setSourceContent(from, this.css)
***REMOVED***
***REMOVED***

  applyPrevMaps() ***REMOVED***
    for (let prev of this.previous()) ***REMOVED***
      let from = this.toUrl(this.path(prev.file))
      let root = prev.root || dirname(prev.file)
      let map

      if (this.mapOpts.sourcesContent === false) ***REMOVED***
        map = new SourceMapConsumer(prev.text)
        if (map.sourcesContent) ***REMOVED***
          map.sourcesContent = map.sourcesContent.map(() => null)
    ***REMOVED***
  ***REMOVED*** else ***REMOVED***
        map = prev.consumer()
  ***REMOVED***

      this.map.applySourceMap(map, from, this.toUrl(this.path(root)))
***REMOVED***
***REMOVED***

  isAnnotation() ***REMOVED***
    if (this.isInline()) ***REMOVED***
      return true
***REMOVED***
    if (typeof this.mapOpts.annotation !== 'undefined') ***REMOVED***
      return this.mapOpts.annotation
***REMOVED***
    if (this.previous().length) ***REMOVED***
      return this.previous().some(i => i.annotation)
***REMOVED***
    return true
***REMOVED***

  toBase64(str) ***REMOVED***
    if (Buffer) ***REMOVED***
      return Buffer.from(str).toString('base64')
***REMOVED*** else ***REMOVED***
      return window.btoa(unescape(encodeURIComponent(str)))
***REMOVED***
***REMOVED***

  addAnnotation() ***REMOVED***
    let content

    if (this.isInline()) ***REMOVED***
      content =
        'data:application/json;base64,' + this.toBase64(this.map.toString())
***REMOVED*** else if (typeof this.mapOpts.annotation === 'string') ***REMOVED***
      content = this.mapOpts.annotation
***REMOVED*** else if (typeof this.mapOpts.annotation === 'function') ***REMOVED***
      content = this.mapOpts.annotation(this.opts.to, this.root)
***REMOVED*** else ***REMOVED***
      content = this.outputFile() + '.map'
***REMOVED***
    let eol = '\n'
    if (this.css.includes('\r\n')) eol = '\r\n'

    this.css += eol + '/*# sourceMappingURL=' + content + ' */'
***REMOVED***

  outputFile() ***REMOVED***
    if (this.opts.to) ***REMOVED***
      return this.path(this.opts.to)
***REMOVED*** else if (this.opts.from) ***REMOVED***
      return this.path(this.opts.from)
***REMOVED*** else ***REMOVED***
      return 'to.css'
***REMOVED***
***REMOVED***

  generateMap() ***REMOVED***
    if (this.root) ***REMOVED***
      this.generateString()
***REMOVED*** else if (this.previous().length === 1) ***REMOVED***
      let prev = this.previous()[0].consumer()
      prev.file = this.outputFile()
      this.map = SourceMapGenerator.fromSourceMap(prev)
***REMOVED*** else ***REMOVED***
      this.map = new SourceMapGenerator(***REMOVED*** file: this.outputFile() ***REMOVED***)
      this.map.addMapping(***REMOVED***
        source: this.opts.from
          ? this.toUrl(this.path(this.opts.from))
          : '<no source>',
        generated: ***REMOVED*** line: 1, column: 0 ***REMOVED***,
        original: ***REMOVED*** line: 1, column: 0 ***REMOVED***
  ***REMOVED***)
***REMOVED***

    if (this.isSourcesContent()) this.setSourcesContent()
    if (this.root && this.previous().length > 0) this.applyPrevMaps()
    if (this.isAnnotation()) this.addAnnotation()

    if (this.isInline()) ***REMOVED***
      return [this.css]
***REMOVED*** else ***REMOVED***
      return [this.css, this.map]
***REMOVED***
***REMOVED***

  path(file) ***REMOVED***
    if (file.indexOf('<') === 0) return file
    if (/^\w+:\/\//.test(file)) return file
    if (this.mapOpts.absolute) return file

    let from = this.opts.to ? dirname(this.opts.to) : '.'

    if (typeof this.mapOpts.annotation === 'string') ***REMOVED***
      from = dirname(resolve(from, this.mapOpts.annotation))
***REMOVED***

    file = relative(from, file)
    return file
***REMOVED***

  toUrl(path) ***REMOVED***
    if (sep === '\\') ***REMOVED***
      path = path.replace(/\\/g, '/')
***REMOVED***
    return encodeURI(path).replace(/[#?]/g, encodeURIComponent)
***REMOVED***

  sourcePath(node) ***REMOVED***
    if (this.mapOpts.from) ***REMOVED***
      return this.toUrl(this.mapOpts.from)
***REMOVED*** else if (this.mapOpts.absolute) ***REMOVED***
      if (pathToFileURL) ***REMOVED***
        return pathToFileURL(node.source.input.from).toString()
  ***REMOVED*** else ***REMOVED***
        throw new Error(
          '`map.absolute` option is not available in this PostCSS build'
        )
  ***REMOVED***
***REMOVED*** else ***REMOVED***
      return this.toUrl(this.path(node.source.input.from))
***REMOVED***
***REMOVED***

  generateString() ***REMOVED***
    this.css = ''
    this.map = new SourceMapGenerator(***REMOVED*** file: this.outputFile() ***REMOVED***)

    let line = 1
    let column = 1

    let noSource = '<no source>'
    let mapping = ***REMOVED***
      source: '',
      generated: ***REMOVED*** line: 0, column: 0 ***REMOVED***,
      original: ***REMOVED*** line: 0, column: 0 ***REMOVED***
***REMOVED***

    let lines, last
    this.stringify(this.root, (str, node, type) => ***REMOVED***
      this.css += str

      if (node && type !== 'end') ***REMOVED***
        mapping.generated.line = line
        mapping.generated.column = column - 1
        if (node.source && node.source.start) ***REMOVED***
          mapping.source = this.sourcePath(node)
          mapping.original.line = node.source.start.line
          mapping.original.column = node.source.start.column - 1
          this.map.addMapping(mapping)
    ***REMOVED*** else ***REMOVED***
          mapping.source = noSource
          mapping.original.line = 1
          mapping.original.column = 0
          this.map.addMapping(mapping)
    ***REMOVED***
  ***REMOVED***

      lines = str.match(/\n/g)
      if (lines) ***REMOVED***
        line += lines.length
        last = str.lastIndexOf('\n')
        column = str.length - last
  ***REMOVED*** else ***REMOVED***
        column += str.length
  ***REMOVED***

      if (node && type !== 'start') ***REMOVED***
        let p = node.parent || ***REMOVED*** raws: ***REMOVED******REMOVED*** ***REMOVED***
        if (node.type !== 'decl' || node !== p.last || p.raws.semicolon) ***REMOVED***
          if (node.source && node.source.end) ***REMOVED***
            mapping.source = this.sourcePath(node)
            mapping.original.line = node.source.end.line
            mapping.original.column = node.source.end.column - 1
            mapping.generated.line = line
            mapping.generated.column = column - 2
            this.map.addMapping(mapping)
      ***REMOVED*** else ***REMOVED***
            mapping.source = noSource
            mapping.original.line = 1
            mapping.original.column = 0
            mapping.generated.line = line
            mapping.generated.column = column - 1
            this.map.addMapping(mapping)
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
***REMOVED***)
***REMOVED***

  generate() ***REMOVED***
    this.clearAnnotation()
    if (pathAvailable && sourceMapAvailable && this.isMap()) ***REMOVED***
      return this.generateMap()
***REMOVED*** else ***REMOVED***
      let result = ''
      this.stringify(this.root, i => ***REMOVED***
        result += i
  ***REMOVED***)
      return [result]
***REMOVED***
***REMOVED***
***REMOVED***

module.exports = MapGenerator
