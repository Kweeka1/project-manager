'use strict'

let MapGenerator = require('./map-generator')
let stringify = require('./stringify')
let warnOnce = require('./warn-once')
let parse = require('./parse')
const Result = require('./result')

class NoWorkResult ***REMOVED***
  constructor(processor, css, opts) ***REMOVED***
    css = css.toString()
    this.stringified = false

    this._processor = processor
    this._css = css
    this._opts = opts
    this._map = undefined
    let root

    let str = stringify
    this.result = new Result(this._processor, root, this._opts)
    this.result.css = css

    let self = this
    Object.defineProperty(this.result, 'root', ***REMOVED***
      get() ***REMOVED***
        return self.root
  ***REMOVED***
***REMOVED***)

    let map = new MapGenerator(str, root, this._opts, css)
    if (map.isMap()) ***REMOVED***
      let [generatedCSS, generatedMap] = map.generate()
      if (generatedCSS) ***REMOVED***
        this.result.css = generatedCSS
  ***REMOVED***
      if (generatedMap) ***REMOVED***
        this.result.map = generatedMap
  ***REMOVED***
***REMOVED***
***REMOVED***

  get [Symbol.toStringTag]() ***REMOVED***
    return 'NoWorkResult'
***REMOVED***

  get processor() ***REMOVED***
    return this.result.processor
***REMOVED***

  get opts() ***REMOVED***
    return this.result.opts
***REMOVED***

  get css() ***REMOVED***
    return this.result.css
***REMOVED***

  get content() ***REMOVED***
    return this.result.css
***REMOVED***

  get map() ***REMOVED***
    return this.result.map
***REMOVED***

  get root() ***REMOVED***
    if (this._root) ***REMOVED***
      return this._root
***REMOVED***

    let root
    let parser = parse

    try ***REMOVED***
      root = parser(this._css, this._opts)
***REMOVED*** catch (error) ***REMOVED***
      this.error = error
***REMOVED***

    if (this.error) ***REMOVED***
      throw this.error
***REMOVED*** else ***REMOVED***
      this._root = root
      return root
***REMOVED***
***REMOVED***

  get messages() ***REMOVED***
    return []
***REMOVED***

  warnings() ***REMOVED***
    return []
***REMOVED***

  toString() ***REMOVED***
    return this._css
***REMOVED***

  then(onFulfilled, onRejected) ***REMOVED***
    if (process.env.NODE_ENV !== 'production') ***REMOVED***
      if (!('from' in this._opts)) ***REMOVED***
        warnOnce(
          'Without `from` option PostCSS could generate wrong source map ' +
            'and will not find Browserslist config. Set it to CSS file path ' +
            'or to `undefined` to prevent this warning.'
        )
  ***REMOVED***
***REMOVED***

    return this.async().then(onFulfilled, onRejected)
***REMOVED***

  catch(onRejected) ***REMOVED***
    return this.async().catch(onRejected)
***REMOVED***

  finally(onFinally) ***REMOVED***
    return this.async().then(onFinally, onFinally)
***REMOVED***

  async() ***REMOVED***
    if (this.error) return Promise.reject(this.error)
    return Promise.resolve(this.result)
***REMOVED***

  sync() ***REMOVED***
    if (this.error) throw this.error
    return this.result
***REMOVED***
***REMOVED***

module.exports = NoWorkResult
NoWorkResult.default = NoWorkResult
