'use strict'

let Container = require('./container')

let LazyResult, Processor

class Root extends Container ***REMOVED***
  constructor(defaults) ***REMOVED***
    super(defaults)
    this.type = 'root'
    if (!this.nodes) this.nodes = []
***REMOVED***

  removeChild(child, ignore) ***REMOVED***
    let index = this.index(child)

    if (!ignore && index === 0 && this.nodes.length > 1) ***REMOVED***
      this.nodes[1].raws.before = this.nodes[index].raws.before
***REMOVED***

    return super.removeChild(child)
***REMOVED***

  normalize(child, sample, type) ***REMOVED***
    let nodes = super.normalize(child)

    if (sample) ***REMOVED***
      if (type === 'prepend') ***REMOVED***
        if (this.nodes.length > 1) ***REMOVED***
          sample.raws.before = this.nodes[1].raws.before
    ***REMOVED*** else ***REMOVED***
          delete sample.raws.before
    ***REMOVED***
  ***REMOVED*** else if (this.first !== sample) ***REMOVED***
        for (let node of nodes) ***REMOVED***
          node.raws.before = sample.raws.before
    ***REMOVED***
  ***REMOVED***
***REMOVED***

    return nodes
***REMOVED***

  toResult(opts = ***REMOVED******REMOVED***) ***REMOVED***
    let lazy = new LazyResult(new Processor(), this, opts)
    return lazy.stringify()
***REMOVED***
***REMOVED***

Root.registerLazyResult = dependant => ***REMOVED***
  LazyResult = dependant
***REMOVED***

Root.registerProcessor = dependant => ***REMOVED***
  Processor = dependant
***REMOVED***

module.exports = Root
Root.default = Root
