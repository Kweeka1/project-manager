'use strict'

let pico = require('picocolors')

let terminalHighlight = require('./terminal-highlight')

class CssSyntaxError extends Error ***REMOVED***
  constructor(message, line, column, source, file, plugin) ***REMOVED***
    super(message)
    this.name = 'CssSyntaxError'
    this.reason = message

    if (file) ***REMOVED***
      this.file = file
***REMOVED***
    if (source) ***REMOVED***
      this.source = source
***REMOVED***
    if (plugin) ***REMOVED***
      this.plugin = plugin
***REMOVED***
    if (typeof line !== 'undefined' && typeof column !== 'undefined') ***REMOVED***
      if (typeof line === 'number') ***REMOVED***
        this.line = line
        this.column = column
  ***REMOVED*** else ***REMOVED***
        this.line = line.line
        this.column = line.column
        this.endLine = column.line
        this.endColumn = column.column
  ***REMOVED***
***REMOVED***

    this.setMessage()

    if (Error.captureStackTrace) ***REMOVED***
      Error.captureStackTrace(this, CssSyntaxError)
***REMOVED***
***REMOVED***

  setMessage() ***REMOVED***
    this.message = this.plugin ? this.plugin + ': ' : ''
    this.message += this.file ? this.file : '<css input>'
    if (typeof this.line !== 'undefined') ***REMOVED***
      this.message += ':' + this.line + ':' + this.column
***REMOVED***
    this.message += ': ' + this.reason
***REMOVED***

  showSourceCode(color) ***REMOVED***
    if (!this.source) return ''

    let css = this.source
    if (color == null) color = pico.isColorSupported
    if (terminalHighlight) ***REMOVED***
      if (color) css = terminalHighlight(css)
***REMOVED***

    let lines = css.split(/\r?\n/)
    let start = Math.max(this.line - 3, 0)
    let end = Math.min(this.line + 2, lines.length)

    let maxWidth = String(end).length

    let mark, aside
    if (color) ***REMOVED***
      let ***REMOVED*** bold, red, gray ***REMOVED*** = pico.createColors(true)
      mark = text => bold(red(text))
      aside = text => gray(text)
***REMOVED*** else ***REMOVED***
      mark = aside = str => str
***REMOVED***

    return lines
      .slice(start, end)
      .map((line, index) => ***REMOVED***
        let number = start + 1 + index
        let gutter = ' ' + (' ' + number).slice(-maxWidth) + ' | '
        if (number === this.line) ***REMOVED***
          let spacing =
            aside(gutter.replace(/\d/g, ' ')) +
            line.slice(0, this.column - 1).replace(/[^\t]/g, ' ')
          return mark('>') + aside(gutter) + line + '\n ' + spacing + mark('^')
    ***REMOVED***
        return ' ' + aside(gutter) + line
  ***REMOVED***)
      .join('\n')
***REMOVED***

  toString() ***REMOVED***
    let code = this.showSourceCode()
    if (code) ***REMOVED***
      code = '\n\n' + code + '\n'
***REMOVED***
    return this.name + ': ' + this.message + code
***REMOVED***
***REMOVED***

module.exports = CssSyntaxError
CssSyntaxError.default = CssSyntaxError
