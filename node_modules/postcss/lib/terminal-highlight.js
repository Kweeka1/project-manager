'use strict'

let pico = require('picocolors')

let tokenizer = require('./tokenize')

let Input

function registerInput(dependant) ***REMOVED***
  Input = dependant
***REMOVED***

const HIGHLIGHT_THEME = ***REMOVED***
  'brackets': pico.cyan,
  'at-word': pico.cyan,
  'comment': pico.gray,
  'string': pico.green,
  'class': pico.yellow,
  'hash': pico.magenta,
  'call': pico.cyan,
  '(': pico.cyan,
  ')': pico.cyan,
  '***REMOVED***': pico.yellow,
  '***REMOVED***': pico.yellow,
  '[': pico.yellow,
  ']': pico.yellow,
  ':': pico.yellow,
  ';': pico.yellow
***REMOVED***

function getTokenType([type, value], processor) ***REMOVED***
  if (type === 'word') ***REMOVED***
    if (value[0] === '.') ***REMOVED***
      return 'class'
***REMOVED***
    if (value[0] === '#') ***REMOVED***
      return 'hash'
***REMOVED***
***REMOVED***

  if (!processor.endOfFile()) ***REMOVED***
    let next = processor.nextToken()
    processor.back(next)
    if (next[0] === 'brackets' || next[0] === '(') return 'call'
***REMOVED***

  return type
***REMOVED***

function terminalHighlight(css) ***REMOVED***
  let processor = tokenizer(new Input(css), ***REMOVED*** ignoreErrors: true ***REMOVED***)
  let result = ''
  while (!processor.endOfFile()) ***REMOVED***
    let token = processor.nextToken()
    let color = HIGHLIGHT_THEME[getTokenType(token, processor)]
    if (color) ***REMOVED***
      result += token[1]
        .split(/\r?\n/)
        .map(i => color(i))
        .join('\n')
***REMOVED*** else ***REMOVED***
      result += token[1]
***REMOVED***
***REMOVED***
  return result
***REMOVED***

terminalHighlight.registerInput = registerInput

module.exports = terminalHighlight
