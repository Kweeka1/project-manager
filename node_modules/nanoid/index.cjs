let crypto = require('crypto')
let ***REMOVED*** urlAlphabet ***REMOVED*** = require('./url-alphabet/index.cjs')
const POOL_SIZE_MULTIPLIER = 128
let pool, poolOffset
let fillPool = bytes => ***REMOVED***
  if (!pool || pool.length < bytes) ***REMOVED***
    pool = Buffer.allocUnsafe(bytes * POOL_SIZE_MULTIPLIER)
    crypto.randomFillSync(pool)
    poolOffset = 0
***REMOVED*** else if (poolOffset + bytes > pool.length) ***REMOVED***
    crypto.randomFillSync(pool)
    poolOffset = 0
***REMOVED***
  poolOffset += bytes
***REMOVED***
let random = bytes => ***REMOVED***
  fillPool((bytes -= 0))
  return pool.subarray(poolOffset - bytes, poolOffset)
***REMOVED***
let customRandom = (alphabet, defaultSize, getRandom) => ***REMOVED***
  let mask = (2 << (31 - Math.clz32((alphabet.length - 1) | 1))) - 1
  let step = Math.ceil((1.6 * mask * defaultSize) / alphabet.length)
  return (size = defaultSize) => ***REMOVED***
    let id = ''
    while (true) ***REMOVED***
      let bytes = getRandom(step)
      let i = step
      while (i--) ***REMOVED***
        id += alphabet[bytes[i] & mask] || ''
        if (id.length === size) return id
  ***REMOVED***
***REMOVED***
***REMOVED***
***REMOVED***
let customAlphabet = (alphabet, size = 21) =>
  customRandom(alphabet, size, random)
let nanoid = (size = 21) => ***REMOVED***
  fillPool((size -= 0))
  let id = ''
  for (let i = poolOffset - size; i < poolOffset; i++) ***REMOVED***
    id += urlAlphabet[pool[i] & 63]
***REMOVED***
  return id
***REMOVED***
module.exports = ***REMOVED*** nanoid, customAlphabet, customRandom, urlAlphabet, random ***REMOVED***
