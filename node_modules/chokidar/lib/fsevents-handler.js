'use strict';

const fs = require('fs');
const sysPath = require('path');
const ***REMOVED*** promisify ***REMOVED*** = require('util');

let fsevents;
try ***REMOVED***
  fsevents = require('fsevents');
***REMOVED*** catch (error) ***REMOVED***
  if (process.env.CHOKIDAR_PRINT_FSEVENTS_REQUIRE_ERROR) console.error(error);
***REMOVED***

if (fsevents) ***REMOVED***
  // TODO: real check
  const mtch = process.version.match(/v(\d+)\.(\d+)/);
  if (mtch && mtch[1] && mtch[2]) ***REMOVED***
    const maj = Number.parseInt(mtch[1], 10);
    const min = Number.parseInt(mtch[2], 10);
    if (maj === 8 && min < 16) ***REMOVED***
      fsevents = undefined;
***REMOVED***
***REMOVED***
***REMOVED***

const ***REMOVED***
  EV_ADD,
  EV_CHANGE,
  EV_ADD_DIR,
  EV_UNLINK,
  EV_ERROR,
  STR_DATA,
  STR_END,
  FSEVENT_CREATED,
  FSEVENT_MODIFIED,
  FSEVENT_DELETED,
  FSEVENT_MOVED,
  // FSEVENT_CLONED,
  FSEVENT_UNKNOWN,
  FSEVENT_TYPE_FILE,
  FSEVENT_TYPE_DIRECTORY,
  FSEVENT_TYPE_SYMLINK,

  ROOT_GLOBSTAR,
  DIR_SUFFIX,
  DOT_SLASH,
  FUNCTION_TYPE,
  EMPTY_FN,
  IDENTITY_FN
***REMOVED*** = require('./constants');

const Depth = (value) => isNaN(value) ? ***REMOVED******REMOVED*** : ***REMOVED***depth: value***REMOVED***;

const stat = promisify(fs.stat);
const lstat = promisify(fs.lstat);
const realpath = promisify(fs.realpath);

const statMethods = ***REMOVED*** stat, lstat ***REMOVED***;

/**
 * @typedef ***REMOVED***String***REMOVED*** Path
 */

/**
 * @typedef ***REMOVED***Object***REMOVED*** FsEventsWatchContainer
 * @property ***REMOVED***Set<Function>***REMOVED*** listeners
 * @property ***REMOVED***Function***REMOVED*** rawEmitter
 * @property ***REMOVED******REMOVED***stop: Function***REMOVED******REMOVED*** watcher
 */

// fsevents instance helper functions
/**
 * Object to hold per-process fsevents instances (may be shared across chokidar FSWatcher instances)
 * @type ***REMOVED***Map<Path,FsEventsWatchContainer>***REMOVED***
 */
const FSEventsWatchers = new Map();

// Threshold of duplicate path prefixes at which to start
// consolidating going forward
const consolidateThreshhold = 10;

const wrongEventFlags = new Set([
  69888, 70400, 71424, 72704, 73472, 131328, 131840, 262912
]);

/**
 * Instantiates the fsevents interface
 * @param ***REMOVED***Path***REMOVED*** path path to be watched
 * @param ***REMOVED***Function***REMOVED*** callback called when fsevents is bound and ready
 * @returns ***REMOVED******REMOVED***stop: Function***REMOVED******REMOVED*** new fsevents instance
 */
const createFSEventsInstance = (path, callback) => ***REMOVED***
  const stop = fsevents.watch(path, callback);
  return ***REMOVED***stop***REMOVED***;
***REMOVED***;

/**
 * Instantiates the fsevents interface or binds listeners to an existing one covering
 * the same file tree.
 * @param ***REMOVED***Path***REMOVED*** path           - to be watched
 * @param ***REMOVED***Path***REMOVED*** realPath       - real path for symlinks
 * @param ***REMOVED***Function***REMOVED*** listener   - called when fsevents emits events
 * @param ***REMOVED***Function***REMOVED*** rawEmitter - passes data to listeners of the 'raw' event
 * @returns ***REMOVED***Function***REMOVED*** closer
 */
function setFSEventsListener(path, realPath, listener, rawEmitter) ***REMOVED***
  let watchPath = sysPath.extname(realPath) ? sysPath.dirname(realPath) : realPath;

  const parentPath = sysPath.dirname(watchPath);
  let cont = FSEventsWatchers.get(watchPath);

  // If we've accumulated a substantial number of paths that
  // could have been consolidated by watching one directory
  // above the current one, create a watcher on the parent
  // path instead, so that we do consolidate going forward.
  if (couldConsolidate(parentPath)) ***REMOVED***
    watchPath = parentPath;
***REMOVED***

  const resolvedPath = sysPath.resolve(path);
  const hasSymlink = resolvedPath !== realPath;

  const filteredListener = (fullPath, flags, info) => ***REMOVED***
    if (hasSymlink) fullPath = fullPath.replace(realPath, resolvedPath);
    if (
      fullPath === resolvedPath ||
      !fullPath.indexOf(resolvedPath + sysPath.sep)
    ) listener(fullPath, flags, info);
***REMOVED***;

  // check if there is already a watcher on a parent path
  // modifies `watchPath` to the parent path when it finds a match
  let watchedParent = false;
  for (const watchedPath of FSEventsWatchers.keys()) ***REMOVED***
    if (realPath.indexOf(sysPath.resolve(watchedPath) + sysPath.sep) === 0) ***REMOVED***
      watchPath = watchedPath;
      cont = FSEventsWatchers.get(watchPath);
      watchedParent = true;
      break;
***REMOVED***
***REMOVED***

  if (cont || watchedParent) ***REMOVED***
    cont.listeners.add(filteredListener);
***REMOVED*** else ***REMOVED***
    cont = ***REMOVED***
      listeners: new Set([filteredListener]),
      rawEmitter,
      watcher: createFSEventsInstance(watchPath, (fullPath, flags) => ***REMOVED***
        if (!cont.listeners.size) return;
        const info = fsevents.getInfo(fullPath, flags);
        cont.listeners.forEach(list => ***REMOVED***
          list(fullPath, flags, info);
    ***REMOVED***);

        cont.rawEmitter(info.event, fullPath, info);
  ***REMOVED***)
***REMOVED***;
    FSEventsWatchers.set(watchPath, cont);
***REMOVED***

  // removes this instance's listeners and closes the underlying fsevents
  // instance if there are no more listeners left
  return () => ***REMOVED***
    const lst = cont.listeners;

    lst.delete(filteredListener);
    if (!lst.size) ***REMOVED***
      FSEventsWatchers.delete(watchPath);
      if (cont.watcher) return cont.watcher.stop().then(() => ***REMOVED***
        cont.rawEmitter = cont.watcher = undefined;
        Object.freeze(cont);
  ***REMOVED***);
***REMOVED***
***REMOVED***;
***REMOVED***

// Decide whether or not we should start a new higher-level
// parent watcher
const couldConsolidate = (path) => ***REMOVED***
  let count = 0;
  for (const watchPath of FSEventsWatchers.keys()) ***REMOVED***
    if (watchPath.indexOf(path) === 0) ***REMOVED***
      count++;
      if (count >= consolidateThreshhold) ***REMOVED***
        return true;
  ***REMOVED***
***REMOVED***
***REMOVED***

  return false;
***REMOVED***;

// returns boolean indicating whether fsevents can be used
const canUse = () => fsevents && FSEventsWatchers.size < 128;

// determines subdirectory traversal levels from root to path
const calcDepth = (path, root) => ***REMOVED***
  let i = 0;
  while (!path.indexOf(root) && (path = sysPath.dirname(path)) !== root) i++;
  return i;
***REMOVED***;

// returns boolean indicating whether the fsevents' event info has the same type
// as the one returned by fs.stat
const sameTypes = (info, stats) => (
  info.type === FSEVENT_TYPE_DIRECTORY && stats.isDirectory() ||
  info.type === FSEVENT_TYPE_SYMLINK && stats.isSymbolicLink() ||
  info.type === FSEVENT_TYPE_FILE && stats.isFile()
)

/**
 * @mixin
 */
class FsEventsHandler ***REMOVED***

/**
 * @param ***REMOVED***import('../index').FSWatcher***REMOVED*** fsw
 */
constructor(fsw) ***REMOVED***
  this.fsw = fsw;
***REMOVED***
checkIgnored(path, stats) ***REMOVED***
  const ipaths = this.fsw._ignoredPaths;
  if (this.fsw._isIgnored(path, stats)) ***REMOVED***
    ipaths.add(path);
    if (stats && stats.isDirectory()) ***REMOVED***
      ipaths.add(path + ROOT_GLOBSTAR);
***REMOVED***
    return true;
***REMOVED***

  ipaths.delete(path);
  ipaths.delete(path + ROOT_GLOBSTAR);
***REMOVED***

addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts) ***REMOVED***
  const event = watchedDir.has(item) ? EV_CHANGE : EV_ADD;
  this.handleEvent(event, path, fullPath, realPath, parent, watchedDir, item, info, opts);
***REMOVED***

async checkExists(path, fullPath, realPath, parent, watchedDir, item, info, opts) ***REMOVED***
  try ***REMOVED***
    const stats = await stat(path)
    if (this.fsw.closed) return;
    if (sameTypes(info, stats)) ***REMOVED***
      this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);
***REMOVED*** else ***REMOVED***
      this.handleEvent(EV_UNLINK, path, fullPath, realPath, parent, watchedDir, item, info, opts);
***REMOVED***
***REMOVED*** catch (error) ***REMOVED***
    if (error.code === 'EACCES') ***REMOVED***
      this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);
***REMOVED*** else ***REMOVED***
      this.handleEvent(EV_UNLINK, path, fullPath, realPath, parent, watchedDir, item, info, opts);
***REMOVED***
***REMOVED***
***REMOVED***

handleEvent(event, path, fullPath, realPath, parent, watchedDir, item, info, opts) ***REMOVED***
  if (this.fsw.closed || this.checkIgnored(path)) return;

  if (event === EV_UNLINK) ***REMOVED***
    const isDirectory = info.type === FSEVENT_TYPE_DIRECTORY
    // suppress unlink events on never before seen files
    if (isDirectory || watchedDir.has(item)) ***REMOVED***
      this.fsw._remove(parent, item, isDirectory);
***REMOVED***
***REMOVED*** else ***REMOVED***
    if (event === EV_ADD) ***REMOVED***
      // track new directories
      if (info.type === FSEVENT_TYPE_DIRECTORY) this.fsw._getWatchedDir(path);

      if (info.type === FSEVENT_TYPE_SYMLINK && opts.followSymlinks) ***REMOVED***
        // push symlinks back to the top of the stack to get handled
        const curDepth = opts.depth === undefined ?
          undefined : calcDepth(fullPath, realPath) + 1;
        return this._addToFsEvents(path, false, true, curDepth);
  ***REMOVED***

      // track new paths
      // (other than symlinks being followed, which will be tracked soon)
      this.fsw._getWatchedDir(parent).add(item);
***REMOVED***
    /**
     * @type ***REMOVED***'add'|'addDir'|'unlink'|'unlinkDir'***REMOVED***
     */
    const eventName = info.type === FSEVENT_TYPE_DIRECTORY ? event + DIR_SUFFIX : event;
    this.fsw._emit(eventName, path);
    if (eventName === EV_ADD_DIR) this._addToFsEvents(path, false, true);
***REMOVED***
***REMOVED***

/**
 * Handle symlinks encountered during directory scan
 * @param ***REMOVED***String***REMOVED*** watchPath  - file/dir path to be watched with fsevents
 * @param ***REMOVED***String***REMOVED*** realPath   - real path (in case of symlinks)
 * @param ***REMOVED***Function***REMOVED*** transform  - path transformer
 * @param ***REMOVED***Function***REMOVED*** globFilter - path filter in case a glob pattern was provided
 * @returns ***REMOVED***Function***REMOVED*** closer for the watcher instance
*/
_watchWithFsEvents(watchPath, realPath, transform, globFilter) ***REMOVED***
  if (this.fsw.closed || this.fsw._isIgnored(watchPath)) return;
  const opts = this.fsw.options;
  const watchCallback = async (fullPath, flags, info) => ***REMOVED***
    if (this.fsw.closed) return;
    if (
      opts.depth !== undefined &&
      calcDepth(fullPath, realPath) > opts.depth
    ) return;
    const path = transform(sysPath.join(
      watchPath, sysPath.relative(watchPath, fullPath)
    ));
    if (globFilter && !globFilter(path)) return;
    // ensure directories are tracked
    const parent = sysPath.dirname(path);
    const item = sysPath.basename(path);
    const watchedDir = this.fsw._getWatchedDir(
      info.type === FSEVENT_TYPE_DIRECTORY ? path : parent
    );

    // correct for wrong events emitted
    if (wrongEventFlags.has(flags) || info.event === FSEVENT_UNKNOWN) ***REMOVED***
      if (typeof opts.ignored === FUNCTION_TYPE) ***REMOVED***
        let stats;
        try ***REMOVED***
          stats = await stat(path);
    ***REMOVED*** catch (error) ***REMOVED******REMOVED***
        if (this.fsw.closed) return;
        if (this.checkIgnored(path, stats)) return;
        if (sameTypes(info, stats)) ***REMOVED***
          this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);
    ***REMOVED*** else ***REMOVED***
          this.handleEvent(EV_UNLINK, path, fullPath, realPath, parent, watchedDir, item, info, opts);
    ***REMOVED***
  ***REMOVED*** else ***REMOVED***
        this.checkExists(path, fullPath, realPath, parent, watchedDir, item, info, opts);
  ***REMOVED***
***REMOVED*** else ***REMOVED***
      switch (info.event) ***REMOVED***
      case FSEVENT_CREATED:
      case FSEVENT_MODIFIED:
        return this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);
      case FSEVENT_DELETED:
      case FSEVENT_MOVED:
        return this.checkExists(path, fullPath, realPath, parent, watchedDir, item, info, opts);
  ***REMOVED***
***REMOVED***
***REMOVED***;

  const closer = setFSEventsListener(
    watchPath,
    realPath,
    watchCallback,
    this.fsw._emitRaw
  );

  this.fsw._emitReady();
  return closer;
***REMOVED***

/**
 * Handle symlinks encountered during directory scan
 * @param ***REMOVED***String***REMOVED*** linkPath path to symlink
 * @param ***REMOVED***String***REMOVED*** fullPath absolute path to the symlink
 * @param ***REMOVED***Function***REMOVED*** transform pre-existing path transformer
 * @param ***REMOVED***Number***REMOVED*** curDepth level of subdirectories traversed to where symlink is
 * @returns ***REMOVED***Promise<void>***REMOVED***
 */
async _handleFsEventsSymlink(linkPath, fullPath, transform, curDepth) ***REMOVED***
  // don't follow the same symlink more than once
  if (this.fsw.closed || this.fsw._symlinkPaths.has(fullPath)) return;

  this.fsw._symlinkPaths.set(fullPath, true);
  this.fsw._incrReadyCount();

  try ***REMOVED***
    const linkTarget = await realpath(linkPath);
    if (this.fsw.closed) return;
    if (this.fsw._isIgnored(linkTarget)) ***REMOVED***
      return this.fsw._emitReady();
***REMOVED***

    this.fsw._incrReadyCount();

    // add the linkTarget for watching with a wrapper for transform
    // that causes emitted paths to incorporate the link's path
    this._addToFsEvents(linkTarget || linkPath, (path) => ***REMOVED***
      let aliasedPath = linkPath;
      if (linkTarget && linkTarget !== DOT_SLASH) ***REMOVED***
        aliasedPath = path.replace(linkTarget, linkPath);
  ***REMOVED*** else if (path !== DOT_SLASH) ***REMOVED***
        aliasedPath = sysPath.join(linkPath, path);
  ***REMOVED***
      return transform(aliasedPath);
***REMOVED***, false, curDepth);
***REMOVED*** catch(error) ***REMOVED***
    if (this.fsw._handleError(error)) ***REMOVED***
      return this.fsw._emitReady();
***REMOVED***
***REMOVED***
***REMOVED***

/**
 *
 * @param ***REMOVED***Path***REMOVED*** newPath
 * @param ***REMOVED***fs.Stats***REMOVED*** stats
 */
emitAdd(newPath, stats, processPath, opts, forceAdd) ***REMOVED***
  const pp = processPath(newPath);
  const isDir = stats.isDirectory();
  const dirObj = this.fsw._getWatchedDir(sysPath.dirname(pp));
  const base = sysPath.basename(pp);

  // ensure empty dirs get tracked
  if (isDir) this.fsw._getWatchedDir(pp);
  if (dirObj.has(base)) return;
  dirObj.add(base);

  if (!opts.ignoreInitial || forceAdd === true) ***REMOVED***
    this.fsw._emit(isDir ? EV_ADD_DIR : EV_ADD, pp, stats);
***REMOVED***
***REMOVED***

initWatch(realPath, path, wh, processPath) ***REMOVED***
  if (this.fsw.closed) return;
  const closer = this._watchWithFsEvents(
    wh.watchPath,
    sysPath.resolve(realPath || wh.watchPath),
    processPath,
    wh.globFilter
  );
  this.fsw._addPathCloser(path, closer);
***REMOVED***

/**
 * Handle added path with fsevents
 * @param ***REMOVED***String***REMOVED*** path file/dir path or glob pattern
 * @param ***REMOVED***Function|Boolean=***REMOVED*** transform converts working path to what the user expects
 * @param ***REMOVED***Boolean=***REMOVED*** forceAdd ensure add is emitted
 * @param ***REMOVED***Number=***REMOVED*** priorDepth Level of subdirectories already traversed.
 * @returns ***REMOVED***Promise<void>***REMOVED***
 */
async _addToFsEvents(path, transform, forceAdd, priorDepth) ***REMOVED***
  if (this.fsw.closed) ***REMOVED***
    return;
***REMOVED***
  const opts = this.fsw.options;
  const processPath = typeof transform === FUNCTION_TYPE ? transform : IDENTITY_FN;

  const wh = this.fsw._getWatchHelpers(path);

  // evaluate what is at the path we're being asked to watch
  try ***REMOVED***
    const stats = await statMethods[wh.statMethod](wh.watchPath);
    if (this.fsw.closed) return;
    if (this.fsw._isIgnored(wh.watchPath, stats)) ***REMOVED***
      throw null;
***REMOVED***
    if (stats.isDirectory()) ***REMOVED***
      // emit addDir unless this is a glob parent
      if (!wh.globFilter) this.emitAdd(processPath(path), stats, processPath, opts, forceAdd);

      // don't recurse further if it would exceed depth setting
      if (priorDepth && priorDepth > opts.depth) return;

      // scan the contents of the dir
      this.fsw._readdirp(wh.watchPath, ***REMOVED***
        fileFilter: entry => wh.filterPath(entry),
        directoryFilter: entry => wh.filterDir(entry),
        ...Depth(opts.depth - (priorDepth || 0))
  ***REMOVED***).on(STR_DATA, (entry) => ***REMOVED***
        // need to check filterPath on dirs b/c filterDir is less restrictive
        if (this.fsw.closed) ***REMOVED***
          return;
    ***REMOVED***
        if (entry.stats.isDirectory() && !wh.filterPath(entry)) return;

        const joinedPath = sysPath.join(wh.watchPath, entry.path);
        const ***REMOVED***fullPath***REMOVED*** = entry;

        if (wh.followSymlinks && entry.stats.isSymbolicLink()) ***REMOVED***
          // preserve the current depth here since it can't be derived from
          // real paths past the symlink
          const curDepth = opts.depth === undefined ?
            undefined : calcDepth(joinedPath, sysPath.resolve(wh.watchPath)) + 1;

          this._handleFsEventsSymlink(joinedPath, fullPath, processPath, curDepth);
    ***REMOVED*** else ***REMOVED***
          this.emitAdd(joinedPath, entry.stats, processPath, opts, forceAdd);
    ***REMOVED***
  ***REMOVED***).on(EV_ERROR, EMPTY_FN).on(STR_END, () => ***REMOVED***
        this.fsw._emitReady();
  ***REMOVED***);
***REMOVED*** else ***REMOVED***
      this.emitAdd(wh.watchPath, stats, processPath, opts, forceAdd);
      this.fsw._emitReady();
***REMOVED***
***REMOVED*** catch (error) ***REMOVED***
    if (!error || this.fsw._handleError(error)) ***REMOVED***
      // TODO: Strange thing: "should not choke on an ignored watch path" will be failed without 2 ready calls -__-
      this.fsw._emitReady();
      this.fsw._emitReady();
***REMOVED***
***REMOVED***

  if (opts.persistent && forceAdd !== true) ***REMOVED***
    if (typeof transform === FUNCTION_TYPE) ***REMOVED***
      // realpath has already been resolved
      this.initWatch(undefined, path, wh, processPath);
***REMOVED*** else ***REMOVED***
      let realPath;
      try ***REMOVED***
        realPath = await realpath(wh.watchPath);
  ***REMOVED*** catch (e) ***REMOVED******REMOVED***
      this.initWatch(realPath, path, wh, processPath);
***REMOVED***
***REMOVED***
***REMOVED***

***REMOVED***

module.exports = FsEventsHandler;
module.exports.canUse = canUse;
