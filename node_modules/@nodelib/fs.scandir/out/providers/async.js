"use strict";
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
exports.readdir = exports.readdirWithFileTypes = exports.read = void 0;
const fsStat = require("@nodelib/fs.stat");
const rpl = require("run-parallel");
const constants_1 = require("../constants");
const utils = require("../utils");
const common = require("./common");
function read(directory, settings, callback) ***REMOVED***
    if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) ***REMOVED***
        readdirWithFileTypes(directory, settings, callback);
        return;
***REMOVED***
    readdir(directory, settings, callback);
***REMOVED***
exports.read = read;
function readdirWithFileTypes(directory, settings, callback) ***REMOVED***
    settings.fs.readdir(directory, ***REMOVED*** withFileTypes: true ***REMOVED***, (readdirError, dirents) => ***REMOVED***
        if (readdirError !== null) ***REMOVED***
            callFailureCallback(callback, readdirError);
            return;
    ***REMOVED***
        const entries = dirents.map((dirent) => (***REMOVED***
            dirent,
            name: dirent.name,
            path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)
    ***REMOVED***));
        if (!settings.followSymbolicLinks) ***REMOVED***
            callSuccessCallback(callback, entries);
            return;
    ***REMOVED***
        const tasks = entries.map((entry) => makeRplTaskEntry(entry, settings));
        rpl(tasks, (rplError, rplEntries) => ***REMOVED***
            if (rplError !== null) ***REMOVED***
                callFailureCallback(callback, rplError);
                return;
        ***REMOVED***
            callSuccessCallback(callback, rplEntries);
    ***REMOVED***);
***REMOVED***);
***REMOVED***
exports.readdirWithFileTypes = readdirWithFileTypes;
function makeRplTaskEntry(entry, settings) ***REMOVED***
    return (done) => ***REMOVED***
        if (!entry.dirent.isSymbolicLink()) ***REMOVED***
            done(null, entry);
            return;
    ***REMOVED***
        settings.fs.stat(entry.path, (statError, stats) => ***REMOVED***
            if (statError !== null) ***REMOVED***
                if (settings.throwErrorOnBrokenSymbolicLink) ***REMOVED***
                    done(statError);
                    return;
            ***REMOVED***
                done(null, entry);
                return;
        ***REMOVED***
            entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);
            done(null, entry);
    ***REMOVED***);
***REMOVED***;
***REMOVED***
function readdir(directory, settings, callback) ***REMOVED***
    settings.fs.readdir(directory, (readdirError, names) => ***REMOVED***
        if (readdirError !== null) ***REMOVED***
            callFailureCallback(callback, readdirError);
            return;
    ***REMOVED***
        const tasks = names.map((name) => ***REMOVED***
            const path = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);
            return (done) => ***REMOVED***
                fsStat.stat(path, settings.fsStatSettings, (error, stats) => ***REMOVED***
                    if (error !== null) ***REMOVED***
                        done(error);
                        return;
                ***REMOVED***
                    const entry = ***REMOVED***
                        name,
                        path,
                        dirent: utils.fs.createDirentFromStats(name, stats)
                ***REMOVED***;
                    if (settings.stats) ***REMOVED***
                        entry.stats = stats;
                ***REMOVED***
                    done(null, entry);
            ***REMOVED***);
        ***REMOVED***;
    ***REMOVED***);
        rpl(tasks, (rplError, entries) => ***REMOVED***
            if (rplError !== null) ***REMOVED***
                callFailureCallback(callback, rplError);
                return;
        ***REMOVED***
            callSuccessCallback(callback, entries);
    ***REMOVED***);
***REMOVED***);
***REMOVED***
exports.readdir = readdir;
function callFailureCallback(callback, error) ***REMOVED***
    callback(error);
***REMOVED***
function callSuccessCallback(callback, result) ***REMOVED***
    callback(null, result);
***REMOVED***
