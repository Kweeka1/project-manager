'use strict'

const resolve = require('path').resolve

const config = require('lilconfig')
const yaml = require('yaml')

const loadOptions = require('./options.js')
const loadPlugins = require('./plugins.js')

/* istanbul ignore next */
const interopRequireDefault = (obj) => obj && obj.__esModule ? obj : ***REMOVED*** default: obj ***REMOVED***

/**
 * Process the result from cosmiconfig
 *
 * @param  ***REMOVED***Object***REMOVED*** ctx Config Context
 * @param  ***REMOVED***Object***REMOVED*** result Cosmiconfig result
 *
 * @return ***REMOVED***Object***REMOVED*** PostCSS Config
 */
const processResult = (ctx, result) => ***REMOVED***
  const file = result.filepath || ''
  let config = interopRequireDefault(result.config).default || ***REMOVED******REMOVED***

  if (typeof config === 'function') ***REMOVED***
    config = config(ctx)
***REMOVED*** else ***REMOVED***
    config = Object.assign(***REMOVED******REMOVED***, config, ctx)
***REMOVED***

  if (!config.plugins) ***REMOVED***
    config.plugins = []
***REMOVED***

  return ***REMOVED***
    plugins: loadPlugins(config, file),
    options: loadOptions(config, file),
    file: file
***REMOVED***
***REMOVED***

/**
 * Builds the Config Context
 *
 * @param  ***REMOVED***Object***REMOVED*** ctx Config Context
 *
 * @return ***REMOVED***Object***REMOVED*** Config Context
 */
const createContext = (ctx) => ***REMOVED***
  /**
   * @type ***REMOVED***Object***REMOVED***
   *
   * @prop ***REMOVED***String***REMOVED*** cwd=process.cwd() Config search start location
   * @prop ***REMOVED***String***REMOVED*** env=process.env.NODE_ENV Config Enviroment, will be set to `development` by `postcss-load-config` if `process.env.NODE_ENV` is `undefined`
   */
  ctx = Object.assign(***REMOVED***
    cwd: process.cwd(),
    env: process.env.NODE_ENV
***REMOVED*** ctx)

  if (!ctx.env) ***REMOVED***
    process.env.NODE_ENV = 'development'
***REMOVED***

  return ctx
***REMOVED***

const addTypeScriptLoader = (options = ***REMOVED******REMOVED***, loader) => ***REMOVED***
  const moduleName = 'postcss'

  return ***REMOVED***
    ...options,
    searchPlaces: [
      ...(options.searchPlaces || []),
      'package.json',
      `.$***REMOVED***moduleName***REMOVED***rc`,
      `.$***REMOVED***moduleName***REMOVED***rc.json`,
      `.$***REMOVED***moduleName***REMOVED***rc.yaml`,
      `.$***REMOVED***moduleName***REMOVED***rc.yml`,
      `.$***REMOVED***moduleName***REMOVED***rc.ts`,
      `.$***REMOVED***moduleName***REMOVED***rc.js`,
      `.$***REMOVED***moduleName***REMOVED***rc.cjs`,
      `$***REMOVED***moduleName***REMOVED***.config.ts`,
      `$***REMOVED***moduleName***REMOVED***.config.js`,
      `$***REMOVED***moduleName***REMOVED***.config.cjs`
    ],
    loaders: ***REMOVED***
      ...options.loaders,
      '.yaml': (filepath, content) => yaml.parse(content),
      '.yml': (filepath, content) => yaml.parse(content),
      '.ts': loader
***REMOVED***
***REMOVED***
***REMOVED***

const withTypeScriptLoader = (rcFunc) => ***REMOVED***
  return (ctx, path, options) => ***REMOVED***
    return rcFunc(ctx, path, addTypeScriptLoader(options, (configFile) => ***REMOVED***
      let registerer = ***REMOVED*** enabled () ***REMOVED******REMOVED*** ***REMOVED***

      try ***REMOVED***
        // Register TypeScript compiler instance
        registerer = require('ts-node').register()

        return require(configFile)
  ***REMOVED*** catch (err) ***REMOVED***
        if (err.code === 'MODULE_NOT_FOUND') ***REMOVED***
          throw new Error(
            `'ts-node' is required for the TypeScript configuration files. Make sure it is installed\nError: $***REMOVED***err.message***REMOVED***`
          )
    ***REMOVED***

        throw err
  ***REMOVED*** finally ***REMOVED***
        registerer.enabled(false)
  ***REMOVED***
***REMOVED***))
***REMOVED***
***REMOVED***

/**
 * Load Config
 *
 * @method rc
 *
 * @param  ***REMOVED***Object***REMOVED*** ctx Config Context
 * @param  ***REMOVED***String***REMOVED*** path Config Path
 * @param  ***REMOVED***Object***REMOVED*** options Config Options
 *
 * @return ***REMOVED***Promise***REMOVED*** config PostCSS Config
 */
const rc = withTypeScriptLoader((ctx, path, options) => ***REMOVED***
  /**
   * @type ***REMOVED***Object***REMOVED*** The full Config Context
   */
  ctx = createContext(ctx)

  /**
   * @type ***REMOVED***String***REMOVED*** `process.cwd()`
   */
  path = path ? resolve(path) : process.cwd()

  return config.lilconfig('postcss', options)
    .search(path)
    .then((result) => ***REMOVED***
      if (!result) ***REMOVED***
        throw new Error(`No PostCSS Config found in: $***REMOVED***path***REMOVED***`)
  ***REMOVED***

      return processResult(ctx, result)
***REMOVED***)
***REMOVED***)

rc.sync = withTypeScriptLoader((ctx, path, options) => ***REMOVED***
  /**
   * @type ***REMOVED***Object***REMOVED*** The full Config Context
   */
  ctx = createContext(ctx)

  /**
   * @type ***REMOVED***String***REMOVED*** `process.cwd()`
   */
  path = path ? resolve(path) : process.cwd()

  const result = config.lilconfigSync('postcss', options).search(path)

  if (!result) ***REMOVED***
    throw new Error(`No PostCSS Config found in: $***REMOVED***path***REMOVED***`)
***REMOVED***

  return processResult(ctx, result)
***REMOVED***)

/**
 * Autoload Config for PostCSS
 *
 * @author Michael Ciniawsky @michael-ciniawsky <michael.ciniawsky@gmail.com>
 * @license MIT
 *
 * @module postcss-load-config
 * @version 2.1.0
 *
 * @requires comsiconfig
 * @requires ./options
 * @requires ./plugins
 */
module.exports = rc
