'use strict'

const fs = require('graceful-fs')
const path = require('path')
const mkdirs = require('../mkdirs').mkdirs
const pathExists = require('../path-exists').pathExists
const utimesMillis = require('../util/utimes').utimesMillis
const stat = require('../util/stat')

function copy (src, dest, opts, cb) ***REMOVED***
  if (typeof opts === 'function' && !cb) ***REMOVED***
    cb = opts
    opts = ***REMOVED******REMOVED***
***REMOVED*** else if (typeof opts === 'function') ***REMOVED***
    opts = ***REMOVED*** filter: opts ***REMOVED***
***REMOVED***

  cb = cb || function () ***REMOVED******REMOVED***
  opts = opts || ***REMOVED******REMOVED***

  opts.clobber = 'clobber' in opts ? !!opts.clobber : true // default to true for now
  opts.overwrite = 'overwrite' in opts ? !!opts.overwrite : opts.clobber // overwrite falls back to clobber

  // Warn about using preserveTimestamps on 32-bit node
  if (opts.preserveTimestamps && process.arch === 'ia32') ***REMOVED***
    process.emitWarning(
      'Using the preserveTimestamps option in 32-bit node is not recommended;\n\n' +
      '\tsee https://github.com/jprichardson/node-fs-extra/issues/269',
      'Warning', 'fs-extra-WARN0001'
    )
***REMOVED***

  stat.checkPaths(src, dest, 'copy', opts, (err, stats) => ***REMOVED***
    if (err) return cb(err)
    const ***REMOVED*** srcStat, destStat ***REMOVED*** = stats
    stat.checkParentPaths(src, srcStat, dest, 'copy', err => ***REMOVED***
      if (err) return cb(err)
      if (opts.filter) return handleFilter(checkParentDir, destStat, src, dest, opts, cb)
      return checkParentDir(destStat, src, dest, opts, cb)
***REMOVED***)
***REMOVED***)
***REMOVED***

function checkParentDir (destStat, src, dest, opts, cb) ***REMOVED***
  const destParent = path.dirname(dest)
  pathExists(destParent, (err, dirExists) => ***REMOVED***
    if (err) return cb(err)
    if (dirExists) return getStats(destStat, src, dest, opts, cb)
    mkdirs(destParent, err => ***REMOVED***
      if (err) return cb(err)
      return getStats(destStat, src, dest, opts, cb)
***REMOVED***)
***REMOVED***)
***REMOVED***

function handleFilter (onInclude, destStat, src, dest, opts, cb) ***REMOVED***
  Promise.resolve(opts.filter(src, dest)).then(include => ***REMOVED***
    if (include) return onInclude(destStat, src, dest, opts, cb)
    return cb()
***REMOVED*** error => cb(error))
***REMOVED***

function startCopy (destStat, src, dest, opts, cb) ***REMOVED***
  if (opts.filter) return handleFilter(getStats, destStat, src, dest, opts, cb)
  return getStats(destStat, src, dest, opts, cb)
***REMOVED***

function getStats (destStat, src, dest, opts, cb) ***REMOVED***
  const stat = opts.dereference ? fs.stat : fs.lstat
  stat(src, (err, srcStat) => ***REMOVED***
    if (err) return cb(err)

    if (srcStat.isDirectory()) return onDir(srcStat, destStat, src, dest, opts, cb)
    else if (srcStat.isFile() ||
             srcStat.isCharacterDevice() ||
             srcStat.isBlockDevice()) return onFile(srcStat, destStat, src, dest, opts, cb)
    else if (srcStat.isSymbolicLink()) return onLink(destStat, src, dest, opts, cb)
    else if (srcStat.isSocket()) return cb(new Error(`Cannot copy a socket file: $***REMOVED***src***REMOVED***`))
    else if (srcStat.isFIFO()) return cb(new Error(`Cannot copy a FIFO pipe: $***REMOVED***src***REMOVED***`))
    return cb(new Error(`Unknown file: $***REMOVED***src***REMOVED***`))
***REMOVED***)
***REMOVED***

function onFile (srcStat, destStat, src, dest, opts, cb) ***REMOVED***
  if (!destStat) return copyFile(srcStat, src, dest, opts, cb)
  return mayCopyFile(srcStat, src, dest, opts, cb)
***REMOVED***

function mayCopyFile (srcStat, src, dest, opts, cb) ***REMOVED***
  if (opts.overwrite) ***REMOVED***
    fs.unlink(dest, err => ***REMOVED***
      if (err) return cb(err)
      return copyFile(srcStat, src, dest, opts, cb)
***REMOVED***)
***REMOVED*** else if (opts.errorOnExist) ***REMOVED***
    return cb(new Error(`'$***REMOVED***dest***REMOVED***' already exists`))
***REMOVED*** else return cb()
***REMOVED***

function copyFile (srcStat, src, dest, opts, cb) ***REMOVED***
  fs.copyFile(src, dest, err => ***REMOVED***
    if (err) return cb(err)
    if (opts.preserveTimestamps) return handleTimestampsAndMode(srcStat.mode, src, dest, cb)
    return setDestMode(dest, srcStat.mode, cb)
***REMOVED***)
***REMOVED***

function handleTimestampsAndMode (srcMode, src, dest, cb) ***REMOVED***
  // Make sure the file is writable before setting the timestamp
  // otherwise open fails with EPERM when invoked with 'r+'
  // (through utimes call)
  if (fileIsNotWritable(srcMode)) ***REMOVED***
    return makeFileWritable(dest, srcMode, err => ***REMOVED***
      if (err) return cb(err)
      return setDestTimestampsAndMode(srcMode, src, dest, cb)
***REMOVED***)
***REMOVED***
  return setDestTimestampsAndMode(srcMode, src, dest, cb)
***REMOVED***

function fileIsNotWritable (srcMode) ***REMOVED***
  return (srcMode & 0o200) === 0
***REMOVED***

function makeFileWritable (dest, srcMode, cb) ***REMOVED***
  return setDestMode(dest, srcMode | 0o200, cb)
***REMOVED***

function setDestTimestampsAndMode (srcMode, src, dest, cb) ***REMOVED***
  setDestTimestamps(src, dest, err => ***REMOVED***
    if (err) return cb(err)
    return setDestMode(dest, srcMode, cb)
***REMOVED***)
***REMOVED***

function setDestMode (dest, srcMode, cb) ***REMOVED***
  return fs.chmod(dest, srcMode, cb)
***REMOVED***

function setDestTimestamps (src, dest, cb) ***REMOVED***
  // The initial srcStat.atime cannot be trusted
  // because it is modified by the read(2) system call
  // (See https://nodejs.org/api/fs.html#fs_stat_time_values)
  fs.stat(src, (err, updatedSrcStat) => ***REMOVED***
    if (err) return cb(err)
    return utimesMillis(dest, updatedSrcStat.atime, updatedSrcStat.mtime, cb)
***REMOVED***)
***REMOVED***

function onDir (srcStat, destStat, src, dest, opts, cb) ***REMOVED***
  if (!destStat) return mkDirAndCopy(srcStat.mode, src, dest, opts, cb)
  return copyDir(src, dest, opts, cb)
***REMOVED***

function mkDirAndCopy (srcMode, src, dest, opts, cb) ***REMOVED***
  fs.mkdir(dest, err => ***REMOVED***
    if (err) return cb(err)
    copyDir(src, dest, opts, err => ***REMOVED***
      if (err) return cb(err)
      return setDestMode(dest, srcMode, cb)
***REMOVED***)
***REMOVED***)
***REMOVED***

function copyDir (src, dest, opts, cb) ***REMOVED***
  fs.readdir(src, (err, items) => ***REMOVED***
    if (err) return cb(err)
    return copyDirItems(items, src, dest, opts, cb)
***REMOVED***)
***REMOVED***

function copyDirItems (items, src, dest, opts, cb) ***REMOVED***
  const item = items.pop()
  if (!item) return cb()
  return copyDirItem(items, item, src, dest, opts, cb)
***REMOVED***

function copyDirItem (items, item, src, dest, opts, cb) ***REMOVED***
  const srcItem = path.join(src, item)
  const destItem = path.join(dest, item)
  stat.checkPaths(srcItem, destItem, 'copy', opts, (err, stats) => ***REMOVED***
    if (err) return cb(err)
    const ***REMOVED*** destStat ***REMOVED*** = stats
    startCopy(destStat, srcItem, destItem, opts, err => ***REMOVED***
      if (err) return cb(err)
      return copyDirItems(items, src, dest, opts, cb)
***REMOVED***)
***REMOVED***)
***REMOVED***

function onLink (destStat, src, dest, opts, cb) ***REMOVED***
  fs.readlink(src, (err, resolvedSrc) => ***REMOVED***
    if (err) return cb(err)
    if (opts.dereference) ***REMOVED***
      resolvedSrc = path.resolve(process.cwd(), resolvedSrc)
***REMOVED***

    if (!destStat) ***REMOVED***
      return fs.symlink(resolvedSrc, dest, cb)
***REMOVED*** else ***REMOVED***
      fs.readlink(dest, (err, resolvedDest) => ***REMOVED***
        if (err) ***REMOVED***
          // dest exists and is a regular file or directory,
          // Windows may throw UNKNOWN error. If dest already exists,
          // fs throws error anyway, so no need to guard against it here.
          if (err.code === 'EINVAL' || err.code === 'UNKNOWN') return fs.symlink(resolvedSrc, dest, cb)
          return cb(err)
    ***REMOVED***
        if (opts.dereference) ***REMOVED***
          resolvedDest = path.resolve(process.cwd(), resolvedDest)
    ***REMOVED***
        if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) ***REMOVED***
          return cb(new Error(`Cannot copy '$***REMOVED***resolvedSrc***REMOVED***' to a subdirectory of itself, '$***REMOVED***resolvedDest***REMOVED***'.`))
    ***REMOVED***

        // do not copy if src is a subdir of dest since unlinking
        // dest in this case would result in removing src contents
        // and therefore a broken symlink would be created.
        if (destStat.isDirectory() && stat.isSrcSubdir(resolvedDest, resolvedSrc)) ***REMOVED***
          return cb(new Error(`Cannot overwrite '$***REMOVED***resolvedDest***REMOVED***' with '$***REMOVED***resolvedSrc***REMOVED***'.`))
    ***REMOVED***
        return copyLink(resolvedSrc, dest, cb)
  ***REMOVED***)
***REMOVED***
***REMOVED***)
***REMOVED***

function copyLink (resolvedSrc, dest, cb) ***REMOVED***
  fs.unlink(dest, err => ***REMOVED***
    if (err) return cb(err)
    return fs.symlink(resolvedSrc, dest, cb)
***REMOVED***)
***REMOVED***

module.exports = copy
