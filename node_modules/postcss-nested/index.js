let parser = require('postcss-selector-parser')

function parse (str, rule) ***REMOVED***
  let nodes
  let saver = parser(parsed => ***REMOVED***
    nodes = parsed
***REMOVED***)
  try ***REMOVED***
    saver.processSync(str)
***REMOVED*** catch (e) ***REMOVED***
    if (str.includes(':')) ***REMOVED***
      throw rule ? rule.error('Missed semicolon') : e
***REMOVED*** else ***REMOVED***
      throw rule ? rule.error(e.message) : e
***REMOVED***
***REMOVED***
  return nodes.at(0)
***REMOVED***

function replace (nodes, parent) ***REMOVED***
  let replaced = false
  nodes.each(i => ***REMOVED***
    if (i.type === 'nesting') ***REMOVED***
      let clonedParent = parent.clone()
      if (i.value !== '&') ***REMOVED***
        i.replaceWith(parse(i.value.replace('&', clonedParent.toString())))
  ***REMOVED*** else ***REMOVED***
        i.replaceWith(clonedParent)
  ***REMOVED***
      replaced = true
***REMOVED*** else if (i.nodes) ***REMOVED***
      if (replace(i, parent)) ***REMOVED***
        replaced = true
  ***REMOVED***
***REMOVED***
***REMOVED***)
  return replaced
***REMOVED***

function selectors (parent, child) ***REMOVED***
  let result = []
  parent.selectors.forEach(i => ***REMOVED***
    let parentNode = parse(i, parent)

    child.selectors.forEach(j => ***REMOVED***
      if (j.length) ***REMOVED***
        let node = parse(j, child)
        let replaced = replace(node, parentNode)
        if (!replaced) ***REMOVED***
          node.prepend(parser.combinator(***REMOVED*** value: ' ' ***REMOVED***))
          node.prepend(parentNode.clone())
    ***REMOVED***
        result.push(node.toString())
  ***REMOVED***
***REMOVED***)
***REMOVED***)
  return result
***REMOVED***

function pickComment (comment, after) ***REMOVED***
  if (comment && comment.type === 'comment') ***REMOVED***
    after.after(comment)
    return comment
***REMOVED*** else ***REMOVED***
    return after
***REMOVED***
***REMOVED***

function createFnAtruleChilds (bubble) ***REMOVED***
  return function atruleChilds (rule, atrule, bubbling) ***REMOVED***
    let children = []
    atrule.each(child => ***REMOVED***
      if (child.type === 'comment') ***REMOVED***
        children.push(child)
  ***REMOVED*** else if (child.type === 'decl') ***REMOVED***
        children.push(child)
  ***REMOVED*** else if (child.type === 'rule' && bubbling) ***REMOVED***
        child.selectors = selectors(rule, child)
  ***REMOVED*** else if (child.type === 'atrule') ***REMOVED***
        if (child.nodes && bubble[child.name]) ***REMOVED***
          atruleChilds(rule, child, true)
    ***REMOVED*** else ***REMOVED***
          children.push(child)
    ***REMOVED***
  ***REMOVED***
***REMOVED***)
    if (bubbling) ***REMOVED***
      if (children.length) ***REMOVED***
        let clone = rule.clone(***REMOVED*** nodes: [] ***REMOVED***)
        for (let child of children) ***REMOVED***
          clone.append(child)
    ***REMOVED***
        atrule.prepend(clone)
  ***REMOVED***
***REMOVED***
***REMOVED***
***REMOVED***

function pickDeclarations (selector, declarations, after, Rule) ***REMOVED***
  let parent = new Rule(***REMOVED***
    selector,
    nodes: []
***REMOVED***)

  for (let declaration of declarations) ***REMOVED***
    parent.append(declaration)
***REMOVED***

  after.after(parent)
  return parent
***REMOVED***

function atruleNames (defaults, custom) ***REMOVED***
  let list = ***REMOVED******REMOVED***
  for (let i of defaults) ***REMOVED***
    list[i] = true
***REMOVED***
  if (custom) ***REMOVED***
    for (let i of custom) ***REMOVED***
      let name = i.replace(/^@/, '')
      list[name] = true
***REMOVED***
***REMOVED***
  return list
***REMOVED***

module.exports = (opts = ***REMOVED******REMOVED***) => ***REMOVED***
  let bubble = atruleNames(['media', 'supports'], opts.bubble)
  let atruleChilds = createFnAtruleChilds(bubble)
  let unwrap = atruleNames(
    [
      'document',
      'font-face',
      'keyframes',
      '-webkit-keyframes',
      '-moz-keyframes'
    ],
    opts.unwrap
  )
  let preserveEmpty = opts.preserveEmpty

  return ***REMOVED***
    postcssPlugin: 'postcss-nested',
    Rule (rule, ***REMOVED*** Rule ***REMOVED***) ***REMOVED***
      let unwrapped = false
      let after = rule
      let copyDeclarations = false
      let declarations = []

      rule.each(child => ***REMOVED***
        if (child.type === 'rule') ***REMOVED***
          if (declarations.length) ***REMOVED***
            after = pickDeclarations(rule.selector, declarations, after, Rule)
            declarations = []
      ***REMOVED***

          copyDeclarations = true
          unwrapped = true
          child.selectors = selectors(rule, child)
          after = pickComment(child.prev(), after)
          after.after(child)
          after = child
    ***REMOVED*** else if (child.type === 'atrule') ***REMOVED***
          if (declarations.length) ***REMOVED***
            after = pickDeclarations(rule.selector, declarations, after, Rule)
            declarations = []
      ***REMOVED***

          if (child.name === 'at-root') ***REMOVED***
            unwrapped = true
            atruleChilds(rule, child, false)

            let nodes = child.nodes
            if (child.params) ***REMOVED***
              nodes = new Rule(***REMOVED*** selector: child.params, nodes ***REMOVED***)
        ***REMOVED***

            after.after(nodes)
            after = nodes
            child.remove()
      ***REMOVED*** else if (bubble[child.name]) ***REMOVED***
            copyDeclarations = true
            unwrapped = true
            atruleChilds(rule, child, true)
            after = pickComment(child.prev(), after)
            after.after(child)
            after = child
      ***REMOVED*** else if (unwrap[child.name]) ***REMOVED***
            copyDeclarations = true
            unwrapped = true
            atruleChilds(rule, child, false)
            after = pickComment(child.prev(), after)
            after.after(child)
            after = child
      ***REMOVED*** else if (copyDeclarations) ***REMOVED***
            declarations.push(child)
      ***REMOVED***
    ***REMOVED*** else if (child.type === 'decl' && copyDeclarations) ***REMOVED***
          declarations.push(child)
    ***REMOVED***
  ***REMOVED***)

      if (declarations.length) ***REMOVED***
        after = pickDeclarations(rule.selector, declarations, after, Rule)
  ***REMOVED***

      if (unwrapped && preserveEmpty !== true) ***REMOVED***
        rule.raws.semicolon = true
        if (rule.nodes.length === 0) rule.remove()
  ***REMOVED***
***REMOVED***
***REMOVED***
***REMOVED***
module.exports.postcss = true
