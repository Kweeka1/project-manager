var test = require('tape')
var acorn = require('../')
var walk = require('../walk')
var baseAcorn = require('acorn')

test('parses object spread syntax', function (t) ***REMOVED***
  var ast = acorn.parse('var a = ***REMOVED*** ...b ***REMOVED***')
  t.equal(ast.body[0].declarations[0].init.type, 'ObjectExpression')
  t.equal(ast.body[0].declarations[0].init.properties[0].type, 'SpreadElement')

  ast = acorn.parse('function a (***REMOVED*** ...b ***REMOVED***) ***REMOVED******REMOVED***')
  t.equal(ast.body[0].params[0].type, 'ObjectPattern')
  t.equal(ast.body[0].params[0].properties[0].type, 'RestElement')

  t.end()
***REMOVED***)

test('does not change main acorn module', function (t) ***REMOVED***
  t.throws(function () ***REMOVED***
    baseAcorn.parse('var a = 10n')
***REMOVED***)
  t.end()
***REMOVED***)

test('tokenizes object spread syntax', function (t) ***REMOVED***
  var tokenizer = acorn.tokenizer('var a = ***REMOVED*** ...b ***REMOVED***')

  t.doesNotThrow(function (t) ***REMOVED***
    while (tokenizer.getToken().type !== acorn.tokTypes.eof) ***REMOVED******REMOVED***
***REMOVED***)
  t.end()
***REMOVED***)

test('allows hashbangs by default', function (t) ***REMOVED***
  t.doesNotThrow(function () ***REMOVED***
    acorn.parse('#!/usr/bin/env node\nconsole.log("ok")')
***REMOVED***)
  t.end()
***REMOVED***)

test('allows top level return by default', function (t) ***REMOVED***
  t.doesNotThrow(function () ***REMOVED***
    acorn.parse('console.log("ok"); return; console.log("not ok")')
***REMOVED***)
  t.end()
***REMOVED***)

test('supports async generators', function (t) ***REMOVED***
  t.doesNotThrow(function () ***REMOVED***
    acorn.parse('async function* a () ***REMOVED*** await x; yield 1 ***REMOVED***')
***REMOVED***)
  t.end()
***REMOVED***)

test('supports async iteration', function (t) ***REMOVED***
  t.doesNotThrow(function () ***REMOVED***
    acorn.parse('async function l (y) ***REMOVED*** for await (const x of y) ***REMOVED******REMOVED*** ***REMOVED***')
***REMOVED***)
  t.end()
***REMOVED***)

test('supports optional catch', function (t) ***REMOVED***
  t.doesNotThrow(function () ***REMOVED***
    acorn.parse('try ***REMOVED*** throw null ***REMOVED*** catch ***REMOVED******REMOVED***')
***REMOVED***)
  t.end()
***REMOVED***)

test('supports bigint', function (t) ***REMOVED***
  t.doesNotThrow(function () ***REMOVED***
    acorn.parse('50n ** 50n')
***REMOVED***)
  t.end()
***REMOVED***)

test('supports numeric separators', function (t) ***REMOVED***
  t.doesNotThrow(function () ***REMOVED***
    acorn.parse('50_000_000n ** 1n')
***REMOVED***)
  t.end()
***REMOVED***)

test('supports import.meta with sourceType: module', function (t) ***REMOVED***
  t.doesNotThrow(function () ***REMOVED***
    acorn.parse('console.log(import.meta.url)', ***REMOVED*** sourceType: 'module' ***REMOVED***)
***REMOVED***)
  t.end()
***REMOVED***)

test('supports dynamic import() with sourceType: module', function (t) ***REMOVED***
  t.doesNotThrow(function () ***REMOVED***
    acorn.parse('import("./whatever.mjs")', ***REMOVED*** sourceType: 'module' ***REMOVED***)
***REMOVED***)
  t.end()
***REMOVED***)

test('supports dynamic import() with sourceType: script', function (t) ***REMOVED***
  t.doesNotThrow(function () ***REMOVED***
    acorn.parse('import("./whatever.mjs")', ***REMOVED*** sourceType: 'script' ***REMOVED***)
***REMOVED***)
  t.end()
***REMOVED***)

test('supports class instance properties', function (t) ***REMOVED***
  t.doesNotThrow(function () ***REMOVED***
    acorn.parse('class X ***REMOVED*** x = y ***REMOVED***', ***REMOVED*** sourceType: 'script' ***REMOVED***)
***REMOVED***)
  t.end()
***REMOVED***)

test('supports private class instance properties', function (t) ***REMOVED***
  t.doesNotThrow(function () ***REMOVED***
    acorn.parse('class X ***REMOVED*** #x = y ***REMOVED***', ***REMOVED*** sourceType: 'script' ***REMOVED***)
***REMOVED***)
  t.end()
***REMOVED***)

test('supports class static properties', function (t) ***REMOVED***
  t.doesNotThrow(function () ***REMOVED***
    acorn.parse('class X ***REMOVED*** static x = y ***REMOVED***', ***REMOVED*** sourceType: 'script' ***REMOVED***)
***REMOVED***)
  t.end()
***REMOVED***)

test('supports private class static properties', function (t) ***REMOVED***
  t.doesNotThrow(function () ***REMOVED***
    acorn.parse('class X ***REMOVED*** static #x = y ***REMOVED***', ***REMOVED*** sourceType: 'script' ***REMOVED***)
***REMOVED***)
  t.end()
***REMOVED***)

test('supports namespace export syntax with sourceType: module', function (t) ***REMOVED***
  t.doesNotThrow(function () ***REMOVED***
    acorn.parse('export * as x from "./x.mjs";', ***REMOVED*** sourceType: 'module' ***REMOVED***)
***REMOVED***)
  t.end()
***REMOVED***)

test('walk supports plugin syntax', function (t) ***REMOVED***
  var ast = acorn.parse(
    'async function* a() ***REMOVED*** try ***REMOVED*** await import(xyz); ***REMOVED*** catch ***REMOVED*** for await (x of null) ***REMOVED******REMOVED*** ***REMOVED*** yield import.meta.url ***REMOVED***',
    ***REMOVED*** sourceType: 'module' ***REMOVED***
  )
  t.plan(2)
  walk.simple(ast, ***REMOVED***
    Import: function () ***REMOVED***
      t.pass('import()')
***REMOVED***,
    MetaProperty: function () ***REMOVED***
      t.pass('import.meta')
***REMOVED***
***REMOVED***)
  t.end()
***REMOVED***)
