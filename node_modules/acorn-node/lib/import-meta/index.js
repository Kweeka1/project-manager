/* Generated by `npm run build`, do not edit! */

"use strict"

var tt = require("acorn").tokTypes

var skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g

var nextTokenIsDot = function (parser) ***REMOVED***
  skipWhiteSpace.lastIndex = parser.pos
  var skip = skipWhiteSpace.exec(parser.input)
  var next = parser.pos + skip[0].length
  return parser.input.slice(next, next + 1) === "."
***REMOVED***

module.exports = function(Parser) ***REMOVED***
  return /*@__PURE__*/(function (Parser) ***REMOVED***
    function anonymous () ***REMOVED***
      Parser.apply(this, arguments);
***REMOVED***

    if ( Parser ) anonymous.__proto__ = Parser;
    anonymous.prototype = Object.create( Parser && Parser.prototype );
    anonymous.prototype.constructor = anonymous;

    anonymous.prototype.parseExprAtom = function parseExprAtom (refDestructuringErrors) ***REMOVED***
      if (this.type !== tt._import || !nextTokenIsDot(this)) ***REMOVED*** return Parser.prototype.parseExprAtom.call(this, refDestructuringErrors) ***REMOVED***

      if (!this.options.allowImportExportEverywhere && !this.inModule) ***REMOVED***
        this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'")
  ***REMOVED***

      var node = this.startNode()
      node.meta = this.parseIdent(true)
      this.expect(tt.dot)
      node.property = this.parseIdent(true)
      if (node.property.name !== "meta") ***REMOVED***
        this.raiseRecoverable(node.property.start, "The only valid meta property for import is import.meta")
  ***REMOVED***
      return this.finishNode(node, "MetaProperty")
***REMOVED***;

    anonymous.prototype.parseStatement = function parseStatement (context, topLevel, exports) ***REMOVED***
      if (this.type !== tt._import || !nextTokenIsDot(this)) ***REMOVED***
        return Parser.prototype.parseStatement.call(this, context, topLevel, exports)
  ***REMOVED***

      var node = this.startNode()
      var expr = this.parseExpression()
      return this.parseExpressionStatement(node, expr)
***REMOVED***;

    return anonymous;
***REMOVED***(Parser))
***REMOVED***
