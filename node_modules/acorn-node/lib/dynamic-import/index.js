/* Generated by `npm run build`, do not edit! */

'use strict';

Object.defineProperty(exports, "__esModule", ***REMOVED***
  value: true
***REMOVED***);
exports.DynamicImportKey = undefined;

var _createClass = function () ***REMOVED*** function defineProperties(target, props) ***REMOVED*** for (var i = 0; i < props.length; i++) ***REMOVED*** var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) ***REMOVED*** descriptor.writable = true; ***REMOVED*** Object.defineProperty(target, descriptor.key, descriptor); ***REMOVED*** ***REMOVED*** return function (Constructor, protoProps, staticProps) ***REMOVED*** if (protoProps) ***REMOVED*** defineProperties(Constructor.prototype, protoProps); ***REMOVED*** if (staticProps) ***REMOVED*** defineProperties(Constructor, staticProps); ***REMOVED*** return Constructor; ***REMOVED***; ***REMOVED***();

var _get = function () ***REMOVED***
  function get(object, property, receiver) ***REMOVED*** if (object === null) ***REMOVED*** object = Function.prototype; ***REMOVED*** var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) ***REMOVED*** var parent = Object.getPrototypeOf(object); if (parent === null) ***REMOVED*** return undefined; ***REMOVED*** else ***REMOVED*** return get(parent, property, receiver); ***REMOVED*** ***REMOVED*** else if ("value" in desc) ***REMOVED*** return desc.value; ***REMOVED*** else ***REMOVED*** var getter = desc.get; if (getter === undefined) ***REMOVED*** return undefined; ***REMOVED*** return getter.call(receiver); ***REMOVED*** ***REMOVED***

  return get;
***REMOVED***();

exports['default'] = dynamicImport;

var _acorn = require('acorn');

function _classCallCheck(instance, Constructor) ***REMOVED*** if (!(instance instanceof Constructor)) ***REMOVED*** throw new TypeError("Cannot call a class as a function"); ***REMOVED*** ***REMOVED***

function _possibleConstructorReturn(self, call) ***REMOVED*** if (!self) ***REMOVED*** throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); ***REMOVED*** return call && (typeof call === "object" || typeof call === "function") ? call : self; ***REMOVED***

function _inherits(subClass, superClass) ***REMOVED*** if (typeof superClass !== "function" && superClass !== null) ***REMOVED*** throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); ***REMOVED*** subClass.prototype = Object.create(superClass && superClass.prototype, ***REMOVED*** constructor: ***REMOVED*** value: subClass, enumerable: false, writable: true, configurable: true ***REMOVED*** ***REMOVED***); if (superClass) ***REMOVED*** Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; ***REMOVED*** ***REMOVED*** /* eslint-disable no-underscore-dangle */


var DynamicImportKey = exports.DynamicImportKey = 'Import';

// NOTE: This allows `yield import()` to parse correctly.
_acorn.tokTypes._import.startsExpr = true;

function parseDynamicImport() ***REMOVED***
  var node = this.startNode();
  this.next();
  if (this.type !== _acorn.tokTypes.parenL) ***REMOVED***
    this.unexpected();
***REMOVED***
  return this.finishNode(node, DynamicImportKey);
***REMOVED***

function parenAfter() ***REMOVED***
  return (/^(\s|\/\/.*|\/\*[^]*?\*\/)*\(/.test(this.input.slice(this.pos))
  );
***REMOVED***

function dynamicImport(Parser) ***REMOVED***
  return function (_Parser) ***REMOVED***
    _inherits(_class, _Parser);

    function _class() ***REMOVED***
      _classCallCheck(this, _class);

      return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
***REMOVED***

    _createClass(_class, [***REMOVED***
      key: 'parseStatement',
      value: function () ***REMOVED***
        function parseStatement(context, topLevel, exports) ***REMOVED***
          if (this.type === _acorn.tokTypes._import && parenAfter.call(this)) ***REMOVED***
            return this.parseExpressionStatement(this.startNode(), this.parseExpression());
      ***REMOVED***
          return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'parseStatement', this).call(this, context, topLevel, exports);
    ***REMOVED***

        return parseStatement;
  ***REMOVED***()
***REMOVED***, ***REMOVED***
      key: 'parseExprAtom',
      value: function () ***REMOVED***
        function parseExprAtom(refDestructuringErrors) ***REMOVED***
          if (this.type === _acorn.tokTypes._import) ***REMOVED***
            return parseDynamicImport.call(this);
      ***REMOVED***
          return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'parseExprAtom', this).call(this, refDestructuringErrors);
    ***REMOVED***

        return parseExprAtom;
  ***REMOVED***()
***REMOVED***]);

    return _class;
***REMOVED***(Parser);
***REMOVED***