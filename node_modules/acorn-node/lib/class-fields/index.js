/* Generated by `npm run build`, do not edit! */

"use strict"

var acorn = require("acorn")
var tt = acorn.tokTypes
var privateClassElements = require("../private-class-elements")

function maybeParseFieldValue(field) ***REMOVED***
  if (this.eat(tt.eq)) ***REMOVED***
    var oldInFieldValue = this._inFieldValue
    this._inFieldValue = true
    field.value = this.parseExpression()
    this._inFieldValue = oldInFieldValue
***REMOVED*** else ***REMOVED*** field.value = null ***REMOVED***
***REMOVED***

module.exports = function(Parser) ***REMOVED***
  Parser = privateClassElements(Parser)
  return /*@__PURE__*/(function (Parser) ***REMOVED***
    function anonymous () ***REMOVED***
      Parser.apply(this, arguments);
***REMOVED***

    if ( Parser ) anonymous.__proto__ = Parser;
    anonymous.prototype = Object.create( Parser && Parser.prototype );
    anonymous.prototype.constructor = anonymous;

    anonymous.prototype.parseClassElement = function parseClassElement (_constructorAllowsSuper) ***REMOVED***
      if (this.options.ecmaVersion >= 8 && (this.type == tt.name || this.type == this.privateNameToken || this.type == tt.bracketL || this.type == tt.string)) ***REMOVED***
        var branch = this._branch()
        if (branch.type == tt.bracketL) ***REMOVED***
          var count = 0
          do ***REMOVED***
            if (branch.eat(tt.bracketL)) ***REMOVED*** ++count ***REMOVED***
            else if (branch.eat(tt.bracketR)) ***REMOVED*** --count ***REMOVED***
            else ***REMOVED*** branch.next() ***REMOVED***
      ***REMOVED*** while (count > 0)
    ***REMOVED*** else ***REMOVED*** branch.next() ***REMOVED***
        if (branch.type == tt.eq || branch.canInsertSemicolon() || branch.type == tt.semi) ***REMOVED***
          var node = this.startNode()
          if (this.type == this.privateNameToken) ***REMOVED***
            this.parsePrivateClassElementName(node)
      ***REMOVED*** else ***REMOVED***
            this.parsePropertyName(node)
      ***REMOVED***
          if ((node.key.type === "Identifier" && node.key.name === "constructor") ||
              (node.key.type === "Literal" && node.key.value === "constructor")) ***REMOVED***
            this.raise(node.key.start, "Classes may not have a field called constructor")
      ***REMOVED***
          maybeParseFieldValue.call(this, node)
          this.finishNode(node, "FieldDefinition")
          this.semicolon()
          return node
    ***REMOVED***
  ***REMOVED***

      return Parser.prototype.parseClassElement.apply(this, arguments)
***REMOVED***;

    // Prohibit arguments in class field initializers
    anonymous.prototype.parseIdent = function parseIdent (liberal, isBinding) ***REMOVED***
      var ident = Parser.prototype.parseIdent.call(this, liberal, isBinding)
      if (this._inFieldValue && ident.name == "arguments") ***REMOVED*** this.raise(ident.start, "A class field initializer may not contain arguments") ***REMOVED***
      return ident
***REMOVED***;

    return anonymous;
***REMOVED***(Parser))
***REMOVED***
