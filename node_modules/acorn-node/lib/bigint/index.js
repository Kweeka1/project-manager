/* Generated by `npm run build`, do not edit! */

"use strict"

var acorn = require("acorn")
var tt = acorn.tokTypes
var isIdentifierStart = acorn.isIdentifierStart

module.exports = function(Parser) ***REMOVED***
  return /*@__PURE__*/(function (Parser) ***REMOVED***
    function anonymous () ***REMOVED***
      Parser.apply(this, arguments);
***REMOVED***

    if ( Parser ) anonymous.__proto__ = Parser;
    anonymous.prototype = Object.create( Parser && Parser.prototype );
    anonymous.prototype.constructor = anonymous;

    anonymous.prototype.parseLiteral = function parseLiteral (value) ***REMOVED***
      var node = Parser.prototype.parseLiteral.call(this, value)
      if (node.raw.charCodeAt(node.raw.length - 1) == 110) ***REMOVED*** node.bigint = this.getNumberInput(node.start, node.end) ***REMOVED***
      return node
***REMOVED***;

    anonymous.prototype.readRadixNumber = function readRadixNumber (radix) ***REMOVED***
      var start = this.pos
      this.pos += 2 // 0x
      var val = this.readInt(radix)
      if (val === null) ***REMOVED*** this.raise(this.start + 2, ("Expected number in radix " + radix)) ***REMOVED***
      if (this.input.charCodeAt(this.pos) == 110) ***REMOVED***
        var str = this.getNumberInput(start, this.pos)
        val = typeof BigInt !== "undefined" ? BigInt(str) : null
        ++this.pos
  ***REMOVED*** else if (isIdentifierStart(this.fullCharCodeAtPos())) ***REMOVED*** this.raise(this.pos, "Identifier directly after number") ***REMOVED***
      return this.finishToken(tt.num, val)
***REMOVED***;

    anonymous.prototype.readNumber = function readNumber (startsWithDot) ***REMOVED***
      var start = this.pos

      // Not an int
      if (startsWithDot) ***REMOVED*** return Parser.prototype.readNumber.call(this, startsWithDot) ***REMOVED***

      // Legacy octal
      if (this.input.charCodeAt(start) === 48 && this.input.charCodeAt(start + 1) !== 110) ***REMOVED***
        return Parser.prototype.readNumber.call(this, startsWithDot)
  ***REMOVED***

      if (this.readInt(10) === null) ***REMOVED*** this.raise(start, "Invalid number") ***REMOVED***

      // Not a BigInt, reset and parse again
      if (this.input.charCodeAt(this.pos) != 110) ***REMOVED***
        this.pos = start
        return Parser.prototype.readNumber.call(this, startsWithDot)
  ***REMOVED***

      var str = this.getNumberInput(start, this.pos)
      var val = typeof BigInt !== "undefined" ? BigInt(str) : null
      ++this.pos
      return this.finishToken(tt.num, val)
***REMOVED***;

    // This is basically a hook for acorn-numeric-separator
    anonymous.prototype.getNumberInput = function getNumberInput (start, end) ***REMOVED***
      if (Parser.prototype.getNumberInput) ***REMOVED*** return Parser.prototype.getNumberInput.call(this, start, end) ***REMOVED***
      return this.input.slice(start, end)
***REMOVED***;

    return anonymous;
***REMOVED***(Parser))
***REMOVED***
