import ***REMOVED*** YError ***REMOVED*** from '../yerror.js';
let previouslyVisitedConfigs = [];
let shim;
export function applyExtends(config, cwd, mergeExtends, _shim) ***REMOVED***
    shim = _shim;
    let defaultConfig = ***REMOVED******REMOVED***;
    if (Object.prototype.hasOwnProperty.call(config, 'extends')) ***REMOVED***
        if (typeof config.extends !== 'string')
            return defaultConfig;
        const isPath = /\.json|\..*rc$/.test(config.extends);
        let pathToDefault = null;
        if (!isPath) ***REMOVED***
            try ***REMOVED***
                pathToDefault = require.resolve(config.extends);
        ***REMOVED***
            catch (_err) ***REMOVED***
                return config;
        ***REMOVED***
    ***REMOVED***
        else ***REMOVED***
            pathToDefault = getPathToDefaultConfig(cwd, config.extends);
    ***REMOVED***
        checkForCircularExtends(pathToDefault);
        previouslyVisitedConfigs.push(pathToDefault);
        defaultConfig = isPath
            ? JSON.parse(shim.readFileSync(pathToDefault, 'utf8'))
            : require(config.extends);
        delete config.extends;
        defaultConfig = applyExtends(defaultConfig, shim.path.dirname(pathToDefault), mergeExtends, shim);
***REMOVED***
    previouslyVisitedConfigs = [];
    return mergeExtends
        ? mergeDeep(defaultConfig, config)
        : Object.assign(***REMOVED******REMOVED***, defaultConfig, config);
***REMOVED***
function checkForCircularExtends(cfgPath) ***REMOVED***
    if (previouslyVisitedConfigs.indexOf(cfgPath) > -1) ***REMOVED***
        throw new YError(`Circular extended configurations: '$***REMOVED***cfgPath***REMOVED***'.`);
***REMOVED***
***REMOVED***
function getPathToDefaultConfig(cwd, pathToExtend) ***REMOVED***
    return shim.path.resolve(cwd, pathToExtend);
***REMOVED***
function mergeDeep(config1, config2) ***REMOVED***
    const target = ***REMOVED******REMOVED***;
    function isObject(obj) ***REMOVED***
        return obj && typeof obj === 'object' && !Array.isArray(obj);
***REMOVED***
    Object.assign(target, config1);
    for (const key of Object.keys(config2)) ***REMOVED***
        if (isObject(config2[key]) && isObject(target[key])) ***REMOVED***
            target[key] = mergeDeep(config1[key], config2[key]);
    ***REMOVED***
        else ***REMOVED***
            target[key] = config2[key];
    ***REMOVED***
***REMOVED***
    return target;
***REMOVED***
