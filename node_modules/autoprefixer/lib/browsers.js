let browserslist = require('browserslist')
let agents = require('caniuse-lite').agents

let utils = require('./utils')

class Browsers ***REMOVED***
  /**
   * Return all prefixes for default browser data
   */
  static prefixes() ***REMOVED***
    if (this.prefixesCache) ***REMOVED***
      return this.prefixesCache
***REMOVED***

    this.prefixesCache = []
    for (let name in agents) ***REMOVED***
      this.prefixesCache.push(`-$***REMOVED***agents[name].prefix***REMOVED***-`)
***REMOVED***

    this.prefixesCache = utils
      .uniq(this.prefixesCache)
      .sort((a, b) => b.length - a.length)

    return this.prefixesCache
***REMOVED***

  /**
   * Check is value contain any possible prefix
   */
  static withPrefix(value) ***REMOVED***
    if (!this.prefixesRegexp) ***REMOVED***
      this.prefixesRegexp = new RegExp(this.prefixes().join('|'))
***REMOVED***

    return this.prefixesRegexp.test(value)
***REMOVED***

  constructor(data, requirements, options, browserslistOpts) ***REMOVED***
    this.data = data
    this.options = options || ***REMOVED******REMOVED***
    this.browserslistOpts = browserslistOpts || ***REMOVED******REMOVED***
    this.selected = this.parse(requirements)
***REMOVED***

  /**
   * Return browsers selected by requirements
   */
  parse(requirements) ***REMOVED***
    let opts = ***REMOVED******REMOVED***
    for (let i in this.browserslistOpts) ***REMOVED***
      opts[i] = this.browserslistOpts[i]
***REMOVED***
    opts.path = this.options.from
    return browserslist(requirements, opts)
***REMOVED***

  /**
   * Return prefix for selected browser
   */
  prefix(browser) ***REMOVED***
    let [name, version] = browser.split(' ')
    let data = this.data[name]

    let prefix = data.prefix_exceptions && data.prefix_exceptions[version]
    if (!prefix) ***REMOVED***
      prefix = data.prefix
***REMOVED***
    return `-$***REMOVED***prefix***REMOVED***-`
***REMOVED***

  /**
   * Is browser is selected by requirements
   */
  isSelected(browser) ***REMOVED***
    return this.selected.includes(browser)
***REMOVED***
***REMOVED***

module.exports = Browsers
