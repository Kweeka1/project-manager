let Declaration = require('../declaration')
let ***REMOVED*** isPureNumber ***REMOVED*** = require('../utils')

class GridEnd extends Declaration ***REMOVED***
  /**
   * Change repeating syntax for IE
   */
  insert(decl, prefix, prefixes, result) ***REMOVED***
    if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes)

    let clonedDecl = this.clone(decl)

    let startProp = decl.prop.replace(/end$/, 'start')
    let spanProp = prefix + decl.prop.replace(/end$/, 'span')

    if (decl.parent.some(i => i.prop === spanProp)) ***REMOVED***
      return undefined
***REMOVED***

    clonedDecl.prop = spanProp

    if (decl.value.includes('span')) ***REMOVED***
      clonedDecl.value = decl.value.replace(/span\s/i, '')
***REMOVED*** else ***REMOVED***
      let startDecl
      decl.parent.walkDecls(startProp, d => ***REMOVED***
        startDecl = d
  ***REMOVED***)
      if (startDecl) ***REMOVED***
        if (isPureNumber(startDecl.value)) ***REMOVED***
          let value = Number(decl.value) - Number(startDecl.value) + ''
          clonedDecl.value = value
    ***REMOVED*** else ***REMOVED***
          return undefined
    ***REMOVED***
  ***REMOVED*** else ***REMOVED***
        decl.warn(
          result,
          `Can not prefix $***REMOVED***decl.prop***REMOVED*** ($***REMOVED***startProp***REMOVED*** is not found)`
        )
  ***REMOVED***
***REMOVED***

    decl.cloneBefore(clonedDecl)

    return undefined
***REMOVED***
***REMOVED***

GridEnd.names = ['grid-row-end', 'grid-column-end']

module.exports = GridEnd
