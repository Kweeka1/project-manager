let Declaration = require('../declaration')

class TransformDecl extends Declaration ***REMOVED***
  /**
   * Recursively check all parents for @keyframes
   */
  keyframeParents(decl) ***REMOVED***
    let ***REMOVED*** parent ***REMOVED*** = decl
    while (parent) ***REMOVED***
      if (parent.type === 'atrule' && parent.name === 'keyframes') ***REMOVED***
        return true
  ***REMOVED***
      ;(***REMOVED*** parent ***REMOVED*** = parent)
***REMOVED***
    return false
***REMOVED***

  /**
   * Is transform contain 3D commands
   */
  contain3d(decl) ***REMOVED***
    if (decl.prop === 'transform-origin') ***REMOVED***
      return false
***REMOVED***

    for (let func of TransformDecl.functions3d) ***REMOVED***
      if (decl.value.includes(`$***REMOVED***func***REMOVED***(`)) ***REMOVED***
        return true
  ***REMOVED***
***REMOVED***

    return false
***REMOVED***

  /**
   * Replace rotateZ to rotate for IE 9
   */
  set(decl, prefix) ***REMOVED***
    decl = super.set(decl, prefix)
    if (prefix === '-ms-') ***REMOVED***
      decl.value = decl.value.replace(/rotatez/gi, 'rotate')
***REMOVED***
    return decl
***REMOVED***

  /**
   * Don't add prefix for IE in keyframes
   */
  insert(decl, prefix, prefixes) ***REMOVED***
    if (prefix === '-ms-') ***REMOVED***
      if (!this.contain3d(decl) && !this.keyframeParents(decl)) ***REMOVED***
        return super.insert(decl, prefix, prefixes)
  ***REMOVED***
***REMOVED*** else if (prefix === '-o-') ***REMOVED***
      if (!this.contain3d(decl)) ***REMOVED***
        return super.insert(decl, prefix, prefixes)
  ***REMOVED***
***REMOVED*** else ***REMOVED***
      return super.insert(decl, prefix, prefixes)
***REMOVED***
    return undefined
***REMOVED***
***REMOVED***

TransformDecl.names = ['transform', 'transform-origin']

TransformDecl.functions3d = [
  'matrix3d',
  'translate3d',
  'translateZ',
  'scale3d',
  'scaleZ',
  'rotate3d',
  'rotateX',
  'rotateY',
  'perspective'
]

module.exports = TransformDecl
