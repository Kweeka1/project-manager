let Browsers = require('./browsers')
let vendor = require('./vendor')
let utils = require('./utils')

/**
 * Recursively clone objects
 */
function clone(obj, parent) ***REMOVED***
  let cloned = new obj.constructor()

  for (let i of Object.keys(obj || ***REMOVED******REMOVED***)) ***REMOVED***
    let value = obj[i]
    if (i === 'parent' && typeof value === 'object') ***REMOVED***
      if (parent) ***REMOVED***
        cloned[i] = parent
  ***REMOVED***
***REMOVED*** else if (i === 'source' || i === null) ***REMOVED***
      cloned[i] = value
***REMOVED*** else if (Array.isArray(value)) ***REMOVED***
      cloned[i] = value.map(x => clone(x, cloned))
***REMOVED*** else if (
      i !== '_autoprefixerPrefix' &&
      i !== '_autoprefixerValues' &&
      i !== 'proxyCache'
    ) ***REMOVED***
      if (typeof value === 'object' && value !== null) ***REMOVED***
        value = clone(value, cloned)
  ***REMOVED***
      cloned[i] = value
***REMOVED***
***REMOVED***

  return cloned
***REMOVED***

class Prefixer ***REMOVED***
  /**
   * Add hack to selected names
   */
  static hack(klass) ***REMOVED***
    if (!this.hacks) ***REMOVED***
      this.hacks = ***REMOVED******REMOVED***
***REMOVED***
    return klass.names.map(name => ***REMOVED***
      this.hacks[name] = klass
      return this.hacks[name]
***REMOVED***)
***REMOVED***

  /**
   * Load hacks for some names
   */
  static load(name, prefixes, all) ***REMOVED***
    let Klass = this.hacks && this.hacks[name]
    if (Klass) ***REMOVED***
      return new Klass(name, prefixes, all)
***REMOVED*** else ***REMOVED***
      return new this(name, prefixes, all)
***REMOVED***
***REMOVED***

  /**
   * Clone node and clean autprefixer custom caches
   */
  static clone(node, overrides) ***REMOVED***
    let cloned = clone(node)
    for (let name in overrides) ***REMOVED***
      cloned[name] = overrides[name]
***REMOVED***
    return cloned
***REMOVED***

  constructor(name, prefixes, all) ***REMOVED***
    this.prefixes = prefixes
    this.name = name
    this.all = all
***REMOVED***

  /**
   * Find prefix in node parents
   */
  parentPrefix(node) ***REMOVED***
    let prefix

    if (typeof node._autoprefixerPrefix !== 'undefined') ***REMOVED***
      prefix = node._autoprefixerPrefix
***REMOVED*** else if (node.type === 'decl' && node.prop[0] === '-') ***REMOVED***
      prefix = vendor.prefix(node.prop)
***REMOVED*** else if (node.type === 'root') ***REMOVED***
      prefix = false
***REMOVED*** else if (
      node.type === 'rule' &&
      node.selector.includes(':-') &&
      /:(-\w+-)/.test(node.selector)
    ) ***REMOVED***
      prefix = node.selector.match(/:(-\w+-)/)[1]
***REMOVED*** else if (node.type === 'atrule' && node.name[0] === '-') ***REMOVED***
      prefix = vendor.prefix(node.name)
***REMOVED*** else ***REMOVED***
      prefix = this.parentPrefix(node.parent)
***REMOVED***

    if (!Browsers.prefixes().includes(prefix)) ***REMOVED***
      prefix = false
***REMOVED***

    node._autoprefixerPrefix = prefix

    return node._autoprefixerPrefix
***REMOVED***

  /**
   * Clone node with prefixes
   */
  process(node, result) ***REMOVED***
    if (!this.check(node)) ***REMOVED***
      return undefined
***REMOVED***

    let parent = this.parentPrefix(node)

    let prefixes = this.prefixes.filter(
      prefix => !parent || parent === utils.removeNote(prefix)
    )

    let added = []
    for (let prefix of prefixes) ***REMOVED***
      if (this.add(node, prefix, added.concat([prefix]), result)) ***REMOVED***
        added.push(prefix)
  ***REMOVED***
***REMOVED***

    return added
***REMOVED***

  /**
   * Shortcut for Prefixer.clone
   */
  clone(node, overrides) ***REMOVED***
    return Prefixer.clone(node, overrides)
***REMOVED***
***REMOVED***

module.exports = Prefixer
