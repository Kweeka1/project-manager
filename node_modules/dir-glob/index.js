'use strict';
const path = require('path');
const pathType = require('path-type');

const getExtensions = extensions => extensions.length > 1 ? `***REMOVED***$***REMOVED***extensions.join(',')***REMOVED******REMOVED***` : extensions[0];

const getPath = (filepath, cwd) => ***REMOVED***
	const pth = filepath[0] === '!' ? filepath.slice(1) : filepath;
	return path.isAbsolute(pth) ? pth : path.join(cwd, pth);
***REMOVED***;

const addExtensions = (file, extensions) => ***REMOVED***
	if (path.extname(file)) ***REMOVED***
		return `**/$***REMOVED***file***REMOVED***`;
	***REMOVED***

	return `**/$***REMOVED***file***REMOVED***.$***REMOVED***getExtensions(extensions)***REMOVED***`;
***REMOVED***;

const getGlob = (directory, options) => ***REMOVED***
	if (options.files && !Array.isArray(options.files)) ***REMOVED***
		throw new TypeError(`Expected \`files\` to be of type \`Array\` but received type \`$***REMOVED***typeof options.files***REMOVED***\``);
	***REMOVED***

	if (options.extensions && !Array.isArray(options.extensions)) ***REMOVED***
		throw new TypeError(`Expected \`extensions\` to be of type \`Array\` but received type \`$***REMOVED***typeof options.extensions***REMOVED***\``);
	***REMOVED***

	if (options.files && options.extensions) ***REMOVED***
		return options.files.map(x => path.posix.join(directory, addExtensions(x, options.extensions)));
	***REMOVED***

	if (options.files) ***REMOVED***
		return options.files.map(x => path.posix.join(directory, `**/$***REMOVED***x***REMOVED***`));
	***REMOVED***

	if (options.extensions) ***REMOVED***
		return [path.posix.join(directory, `**/*.$***REMOVED***getExtensions(options.extensions)***REMOVED***`)];
	***REMOVED***

	return [path.posix.join(directory, '**')];
***REMOVED***;

module.exports = async (input, options) => ***REMOVED***
	options = ***REMOVED***
		cwd: process.cwd(),
		...options
	***REMOVED***;

	if (typeof options.cwd !== 'string') ***REMOVED***
		throw new TypeError(`Expected \`cwd\` to be of type \`string\` but received type \`$***REMOVED***typeof options.cwd***REMOVED***\``);
	***REMOVED***

	const globs = await Promise.all([].concat(input).map(async x => ***REMOVED***
		const isDirectory = await pathType.isDirectory(getPath(x, options.cwd));
		return isDirectory ? getGlob(x, options) : x;
	***REMOVED***));

	return [].concat.apply([], globs); // eslint-disable-line prefer-spread
***REMOVED***;

module.exports.sync = (input, options) => ***REMOVED***
	options = ***REMOVED***
		cwd: process.cwd(),
		...options
	***REMOVED***;

	if (typeof options.cwd !== 'string') ***REMOVED***
		throw new TypeError(`Expected \`cwd\` to be of type \`string\` but received type \`$***REMOVED***typeof options.cwd***REMOVED***\``);
	***REMOVED***

	const globs = [].concat(input).map(x => pathType.isDirectorySync(getPath(x, options.cwd)) ? getGlob(x, options) : x);

	return [].concat.apply([], globs); // eslint-disable-line prefer-spread
***REMOVED***;
