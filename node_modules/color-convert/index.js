const conversions = require('./conversions');
const route = require('./route');

const convert = ***REMOVED******REMOVED***;

const models = Object.keys(conversions);

function wrapRaw(fn) ***REMOVED***
	const wrappedFn = function (...args) ***REMOVED***
		const arg0 = args[0];
		if (arg0 === undefined || arg0 === null) ***REMOVED***
			return arg0;
		***REMOVED***

		if (arg0.length > 1) ***REMOVED***
			args = arg0;
		***REMOVED***

		return fn(args);
	***REMOVED***;

	// Preserve .conversion property if there is one
	if ('conversion' in fn) ***REMOVED***
		wrappedFn.conversion = fn.conversion;
	***REMOVED***

	return wrappedFn;
***REMOVED***

function wrapRounded(fn) ***REMOVED***
	const wrappedFn = function (...args) ***REMOVED***
		const arg0 = args[0];

		if (arg0 === undefined || arg0 === null) ***REMOVED***
			return arg0;
		***REMOVED***

		if (arg0.length > 1) ***REMOVED***
			args = arg0;
		***REMOVED***

		const result = fn(args);

		// We're assuming the result is an array here.
		// see notice in conversions.js; don't use box types
		// in conversion functions.
		if (typeof result === 'object') ***REMOVED***
			for (let len = result.length, i = 0; i < len; i++) ***REMOVED***
				result[i] = Math.round(result[i]);
			***REMOVED***
		***REMOVED***

		return result;
	***REMOVED***;

	// Preserve .conversion property if there is one
	if ('conversion' in fn) ***REMOVED***
		wrappedFn.conversion = fn.conversion;
	***REMOVED***

	return wrappedFn;
***REMOVED***

models.forEach(fromModel => ***REMOVED***
	convert[fromModel] = ***REMOVED******REMOVED***;

	Object.defineProperty(convert[fromModel], 'channels', ***REMOVED***value: conversions[fromModel].channels***REMOVED***);
	Object.defineProperty(convert[fromModel], 'labels', ***REMOVED***value: conversions[fromModel].labels***REMOVED***);

	const routes = route(fromModel);
	const routeModels = Object.keys(routes);

	routeModels.forEach(toModel => ***REMOVED***
		const fn = routes[toModel];

		convert[fromModel][toModel] = wrapRounded(fn);
		convert[fromModel][toModel].raw = wrapRaw(fn);
	***REMOVED***);
***REMOVED***);

module.exports = convert;
