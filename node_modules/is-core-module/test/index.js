'use strict';

var test = require('tape');
var keys = require('object-keys');
var semver = require('semver');
var mockProperty = require('mock-property');

var isCore = require('../');
var data = require('../core.json');

var supportsNodePrefix = semver.satisfies(process.versions.node, '^14.18 || >= 16', ***REMOVED*** includePrerelease: true ***REMOVED***);

test('core modules', function (t) ***REMOVED***
	t.test('isCore()', function (st) ***REMOVED***
		st.ok(isCore('fs'));
		st.ok(isCore('net'));
		st.ok(isCore('http'));

		st.ok(!isCore('seq'));
		st.ok(!isCore('../'));

		st.ok(!isCore('toString'));

		st.end();
	***REMOVED***);

	t.test('core list', function (st) ***REMOVED***
		var cores = keys(data);
		st.plan(cores.length);

		for (var i = 0; i < cores.length; ++i) ***REMOVED***
			var mod = cores[i];
			var requireFunc = function () ***REMOVED*** require(mod); ***REMOVED***; // eslint-disable-line no-loop-func
			if (isCore(mod)) ***REMOVED***
				st.doesNotThrow(requireFunc, mod + ' supported; requiring does not throw');
			***REMOVED*** else ***REMOVED***
				st['throws'](requireFunc, mod + ' not supported; requiring throws');
			***REMOVED***
		***REMOVED***

		st.end();
	***REMOVED***);

	t.test('core via repl module', ***REMOVED*** skip: !data.repl ***REMOVED***, function (st) ***REMOVED***
		var libs = require('repl')._builtinLibs; // eslint-disable-line no-underscore-dangle
		if (!libs) ***REMOVED***
			st.skip('module.builtinModules does not exist');
		***REMOVED*** else ***REMOVED***
			for (var i = 0; i < libs.length; ++i) ***REMOVED***
				var mod = libs[i];
				st.ok(data[mod], mod + ' is a core module');
				st.doesNotThrow(
					function () ***REMOVED*** require(mod); ***REMOVED***, // eslint-disable-line no-loop-func
					'requiring ' + mod + ' does not throw'
				);
				if (mod.slice(0, 5) !== 'node:') ***REMOVED***
					if (supportsNodePrefix) ***REMOVED***
						st.doesNotThrow(
							function () ***REMOVED*** require('node:' + mod); ***REMOVED***, // eslint-disable-line no-loop-func
							'requiring node:' + mod + ' does not throw'
						);
					***REMOVED*** else ***REMOVED***
						st['throws'](
							function () ***REMOVED*** require('node:' + mod); ***REMOVED***, // eslint-disable-line no-loop-func
							'requiring node:' + mod + ' throws'
						);
					***REMOVED***
				***REMOVED***
			***REMOVED***
		***REMOVED***
		st.end();
	***REMOVED***);

	t.test('core via builtinModules list', ***REMOVED*** skip: !data.module ***REMOVED***, function (st) ***REMOVED***
		var libs = require('module').builtinModules;
		if (!libs) ***REMOVED***
			st.skip('module.builtinModules does not exist');
		***REMOVED*** else ***REMOVED***
			var excludeList = [
				'_debug_agent',
				'v8/tools/tickprocessor-driver',
				'v8/tools/SourceMap',
				'v8/tools/tickprocessor',
				'v8/tools/profile'
			];
			// see https://github.com/nodejs/node/issues/42785
			if (semver.satisfies(process.version, '>= 18')) ***REMOVED***
				libs = libs.concat('node:test');
			***REMOVED***
			for (var i = 0; i < libs.length; ++i) ***REMOVED***
				var mod = libs[i];
				if (excludeList.indexOf(mod) === -1) ***REMOVED***
					st.ok(data[mod], mod + ' is a core module');
					st.doesNotThrow(
						function () ***REMOVED*** require(mod); ***REMOVED***, // eslint-disable-line no-loop-func
						'requiring ' + mod + ' does not throw'
					);
					if (mod.slice(0, 5) !== 'node:') ***REMOVED***
						if (supportsNodePrefix) ***REMOVED***
							st.doesNotThrow(
								function () ***REMOVED*** require('node:' + mod); ***REMOVED***, // eslint-disable-line no-loop-func
								'requiring node:' + mod + ' does not throw'
							);
						***REMOVED*** else ***REMOVED***
							st['throws'](
								function () ***REMOVED*** require('node:' + mod); ***REMOVED***, // eslint-disable-line no-loop-func
								'requiring node:' + mod + ' throws'
							);
						***REMOVED***
					***REMOVED***
				***REMOVED***
			***REMOVED***
		***REMOVED***
		st.end();
	***REMOVED***);

	t.test('Object.prototype pollution', function (st) ***REMOVED***
		var nonKey = 'not a core module';
		st.teardown(mockProperty(Object.prototype, 'fs', ***REMOVED*** value: false ***REMOVED***));
		st.teardown(mockProperty(Object.prototype, 'path', ***REMOVED*** value: '>= 999999999' ***REMOVED***));
		st.teardown(mockProperty(Object.prototype, 'http', ***REMOVED*** value: data.http ***REMOVED***));
		st.teardown(mockProperty(Object.prototype, nonKey, ***REMOVED*** value: true ***REMOVED***));

		st.equal(isCore('fs'), true, 'fs is a core module even if Object.prototype lies');
		st.equal(isCore('path'), true, 'path is a core module even if Object.prototype lies');
		st.equal(isCore('http'), true, 'path is a core module even if Object.prototype matches data');
		st.equal(isCore(nonKey), false, '"' + nonKey + '" is not a core module even if Object.prototype lies');

		st.end();
	***REMOVED***);

	t.end();
***REMOVED***);
